
STM32_GP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005474  08005474  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005474  08005474  00015474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800547c  0800547c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800547c  0800547c  0001547c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005480  08005480  00015480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000000c  08005490  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08005490  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107ac  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eb1  00000000  00000000  0003082b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  000336e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd0  00000000  00000000  00034638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017905  00000000  00000000  00035208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001328f  00000000  00000000  0004cb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e549  00000000  00000000  0005fd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ef8  00000000  00000000  000ee2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000f21e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005444 	.word	0x08005444

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005444 	.word	0x08005444

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b970 	b.w	8000adc <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9e08      	ldr	r6, [sp, #32]
 800081a:	460d      	mov	r5, r1
 800081c:	4604      	mov	r4, r0
 800081e:	460f      	mov	r7, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4694      	mov	ip, r2
 8000828:	d965      	bls.n	80008f6 <__udivmoddi4+0xe2>
 800082a:	fab2 f382 	clz	r3, r2
 800082e:	b143      	cbz	r3, 8000842 <__udivmoddi4+0x2e>
 8000830:	fa02 fc03 	lsl.w	ip, r2, r3
 8000834:	f1c3 0220 	rsb	r2, r3, #32
 8000838:	409f      	lsls	r7, r3
 800083a:	fa20 f202 	lsr.w	r2, r0, r2
 800083e:	4317      	orrs	r7, r2
 8000840:	409c      	lsls	r4, r3
 8000842:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000846:	fa1f f58c 	uxth.w	r5, ip
 800084a:	fbb7 f1fe 	udiv	r1, r7, lr
 800084e:	0c22      	lsrs	r2, r4, #16
 8000850:	fb0e 7711 	mls	r7, lr, r1, r7
 8000854:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000858:	fb01 f005 	mul.w	r0, r1, r5
 800085c:	4290      	cmp	r0, r2
 800085e:	d90a      	bls.n	8000876 <__udivmoddi4+0x62>
 8000860:	eb1c 0202 	adds.w	r2, ip, r2
 8000864:	f101 37ff 	add.w	r7, r1, #4294967295
 8000868:	f080 811c 	bcs.w	8000aa4 <__udivmoddi4+0x290>
 800086c:	4290      	cmp	r0, r2
 800086e:	f240 8119 	bls.w	8000aa4 <__udivmoddi4+0x290>
 8000872:	3902      	subs	r1, #2
 8000874:	4462      	add	r2, ip
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	b2a4      	uxth	r4, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000886:	fb00 f505 	mul.w	r5, r0, r5
 800088a:	42a5      	cmp	r5, r4
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x90>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f100 32ff 	add.w	r2, r0, #4294967295
 8000896:	f080 8107 	bcs.w	8000aa8 <__udivmoddi4+0x294>
 800089a:	42a5      	cmp	r5, r4
 800089c:	f240 8104 	bls.w	8000aa8 <__udivmoddi4+0x294>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11e      	cbz	r6, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	e9c6 4300 	strd	r4, r3, [r6]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0xbc>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f000 80ed 	beq.w	8000a9e <__udivmoddi4+0x28a>
 80008c4:	2100      	movs	r1, #0
 80008c6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ca:	4608      	mov	r0, r1
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	fab3 f183 	clz	r1, r3
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d149      	bne.n	800096c <__udivmoddi4+0x158>
 80008d8:	42ab      	cmp	r3, r5
 80008da:	d302      	bcc.n	80008e2 <__udivmoddi4+0xce>
 80008dc:	4282      	cmp	r2, r0
 80008de:	f200 80f8 	bhi.w	8000ad2 <__udivmoddi4+0x2be>
 80008e2:	1a84      	subs	r4, r0, r2
 80008e4:	eb65 0203 	sbc.w	r2, r5, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	4617      	mov	r7, r2
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0e2      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	e9c6 4700 	strd	r4, r7, [r6]
 80008f4:	e7df      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xe6>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f382 	clz	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 8090 	bne.w	8000a24 <__udivmoddi4+0x210>
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2101      	movs	r1, #1
 8000910:	fbb2 f5f7 	udiv	r5, r2, r7
 8000914:	fb07 2015 	mls	r0, r7, r5, r2
 8000918:	0c22      	lsrs	r2, r4, #16
 800091a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800091e:	fb0e f005 	mul.w	r0, lr, r5
 8000922:	4290      	cmp	r0, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x124>
 8000926:	eb1c 0202 	adds.w	r2, ip, r2
 800092a:	f105 38ff 	add.w	r8, r5, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x122>
 8000930:	4290      	cmp	r0, r2
 8000932:	f200 80cb 	bhi.w	8000acc <__udivmoddi4+0x2b8>
 8000936:	4645      	mov	r5, r8
 8000938:	1a12      	subs	r2, r2, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000940:	fb07 2210 	mls	r2, r7, r0, r2
 8000944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x14e>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x14c>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80bb 	bhi.w	8000ad6 <__udivmoddi4+0x2c2>
 8000960:	4610      	mov	r0, r2
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800096a:	e79f      	b.n	80008ac <__udivmoddi4+0x98>
 800096c:	f1c1 0720 	rsb	r7, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa05 f401 	lsl.w	r4, r5, r1
 800097e:	fa20 f307 	lsr.w	r3, r0, r7
 8000982:	40fd      	lsrs	r5, r7
 8000984:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000988:	4323      	orrs	r3, r4
 800098a:	fbb5 f8f9 	udiv	r8, r5, r9
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	fb09 5518 	mls	r5, r9, r8, r5
 8000996:	0c1c      	lsrs	r4, r3, #16
 8000998:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800099c:	fb08 f50e 	mul.w	r5, r8, lr
 80009a0:	42a5      	cmp	r5, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	fa00 f001 	lsl.w	r0, r0, r1
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b0>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009b4:	f080 8088 	bcs.w	8000ac8 <__udivmoddi4+0x2b4>
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	f240 8085 	bls.w	8000ac8 <__udivmoddi4+0x2b4>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4464      	add	r4, ip
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	b29d      	uxth	r5, r3
 80009c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009cc:	fb09 4413 	mls	r4, r9, r3, r4
 80009d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1da>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009e4:	d26c      	bcs.n	8000ac0 <__udivmoddi4+0x2ac>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	d96a      	bls.n	8000ac0 <__udivmoddi4+0x2ac>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f2:	fba3 9502 	umull	r9, r5, r3, r2
 80009f6:	eba4 040e 	sub.w	r4, r4, lr
 80009fa:	42ac      	cmp	r4, r5
 80009fc:	46c8      	mov	r8, r9
 80009fe:	46ae      	mov	lr, r5
 8000a00:	d356      	bcc.n	8000ab0 <__udivmoddi4+0x29c>
 8000a02:	d053      	beq.n	8000aac <__udivmoddi4+0x298>
 8000a04:	b156      	cbz	r6, 8000a1c <__udivmoddi4+0x208>
 8000a06:	ebb0 0208 	subs.w	r2, r0, r8
 8000a0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a12:	40ca      	lsrs	r2, r1
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	4317      	orrs	r7, r2
 8000a18:	e9c6 7400 	strd	r7, r4, [r6]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a24:	f1c3 0120 	rsb	r1, r3, #32
 8000a28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a30:	fa25 f101 	lsr.w	r1, r5, r1
 8000a34:	409d      	lsls	r5, r3
 8000a36:	432a      	orrs	r2, r5
 8000a38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a44:	fb07 1510 	mls	r5, r7, r0, r1
 8000a48:	0c11      	lsrs	r1, r2, #16
 8000a4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a52:	428d      	cmp	r5, r1
 8000a54:	fa04 f403 	lsl.w	r4, r4, r3
 8000a58:	d908      	bls.n	8000a6c <__udivmoddi4+0x258>
 8000a5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a62:	d22f      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d92d      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1b49      	subs	r1, r1, r5
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a74:	fb07 1115 	mls	r1, r7, r5, r1
 8000a78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a80:	4291      	cmp	r1, r2
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x282>
 8000a84:	eb1c 0202 	adds.w	r2, ip, r2
 8000a88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a8c:	d216      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a8e:	4291      	cmp	r1, r2
 8000a90:	d914      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a92:	3d02      	subs	r5, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a52      	subs	r2, r2, r1
 8000a98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a9c:	e738      	b.n	8000910 <__udivmoddi4+0xfc>
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	e708      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e6e6      	b.n	8000876 <__udivmoddi4+0x62>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	e6fb      	b.n	80008a4 <__udivmoddi4+0x90>
 8000aac:	4548      	cmp	r0, r9
 8000aae:	d2a9      	bcs.n	8000a04 <__udivmoddi4+0x1f0>
 8000ab0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	e7a3      	b.n	8000a04 <__udivmoddi4+0x1f0>
 8000abc:	4645      	mov	r5, r8
 8000abe:	e7ea      	b.n	8000a96 <__udivmoddi4+0x282>
 8000ac0:	462b      	mov	r3, r5
 8000ac2:	e794      	b.n	80009ee <__udivmoddi4+0x1da>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	e7d1      	b.n	8000a6c <__udivmoddi4+0x258>
 8000ac8:	46d0      	mov	r8, sl
 8000aca:	e77b      	b.n	80009c4 <__udivmoddi4+0x1b0>
 8000acc:	3d02      	subs	r5, #2
 8000ace:	4462      	add	r2, ip
 8000ad0:	e732      	b.n	8000938 <__udivmoddi4+0x124>
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e70a      	b.n	80008ec <__udivmoddi4+0xd8>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	e742      	b.n	8000962 <__udivmoddi4+0x14e>

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <Bootloader_Handle_Command>:
static uint8_t BL_Host_Buffer[BL_HOST_BUFFER_RX_LENGTH];
static uint8_t appExists = 0;

/************************************ Software Interfaces Implementations ************************************/
BL_Status Bootloader_Handle_Command(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	BL_Status Status = BL_NACK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_Length = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	717b      	strb	r3, [r7, #5]

	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 8000af2:	2264      	movs	r2, #100	; 0x64
 8000af4:	2100      	movs	r1, #0
 8000af6:	482d      	ldr	r0, [pc, #180]	; (8000bac <Bootloader_Handle_Command+0xcc>)
 8000af8:	f004 fc78 	bl	80053ec <memset>

	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	2201      	movs	r2, #1
 8000b02:	492a      	ldr	r1, [pc, #168]	; (8000bac <Bootloader_Handle_Command+0xcc>)
 8000b04:	482a      	ldr	r0, [pc, #168]	; (8000bb0 <Bootloader_Handle_Command+0xd0>)
 8000b06:	f003 fe96 	bl	8004836 <HAL_UART_Receive>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71bb      	strb	r3, [r7, #6]

	if(HAL_Status != HAL_OK)
 8000b0e:	79bb      	ldrb	r3, [r7, #6]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d002      	beq.n	8000b1a <Bootloader_Handle_Command+0x3a>
	{
		Status = BL_NACK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	e042      	b.n	8000ba0 <Bootloader_Handle_Command+0xc0>
	}
	else
	{
		Data_Length = BL_Host_Buffer[0];
 8000b1a:	4b24      	ldr	r3, [pc, #144]	; (8000bac <Bootloader_Handle_Command+0xcc>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	717b      	strb	r3, [r7, #5]
		/* Read the command packet received from the HOST */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], Data_Length, HAL_MAX_DELAY);
 8000b20:	797b      	ldrb	r3, [r7, #5]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	4922      	ldr	r1, [pc, #136]	; (8000bb4 <Bootloader_Handle_Command+0xd4>)
 8000b2a:	4821      	ldr	r0, [pc, #132]	; (8000bb0 <Bootloader_Handle_Command+0xd0>)
 8000b2c:	f003 fe83 	bl	8004836 <HAL_UART_Receive>
 8000b30:	4603      	mov	r3, r0
 8000b32:	71bb      	strb	r3, [r7, #6]

		if(HAL_Status != HAL_OK)
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <Bootloader_Handle_Command+0x60>
		{
			Status = BL_NACK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	71fb      	strb	r3, [r7, #7]
 8000b3e:	e02f      	b.n	8000ba0 <Bootloader_Handle_Command+0xc0>
		}
		else
		{
			switch(BL_Host_Buffer[1]){
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <Bootloader_Handle_Command+0xcc>)
 8000b42:	785b      	ldrb	r3, [r3, #1]
 8000b44:	3b10      	subs	r3, #16
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d82a      	bhi.n	8000ba0 <Bootloader_Handle_Command+0xc0>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <Bootloader_Handle_Command+0x70>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b65 	.word	0x08000b65
 8000b54:	08000b71 	.word	0x08000b71
 8000b58:	08000b7d 	.word	0x08000b7d
 8000b5c:	08000b89 	.word	0x08000b89
 8000b60:	08000b95 	.word	0x08000b95
				case CBL_GET_CID_CMD:
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <Bootloader_Handle_Command+0xcc>)
 8000b66:	f000 f827 	bl	8000bb8 <Bootloader_Get_Chip_Identification_Number>
					Status = BL_OK;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
					break;
 8000b6e:	e017      	b.n	8000ba0 <Bootloader_Handle_Command+0xc0>
				case CBL_GET_RDP_STATUS_CMD:
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 8000b70:	480e      	ldr	r0, [pc, #56]	; (8000bac <Bootloader_Handle_Command+0xcc>)
 8000b72:	f000 f864 	bl	8000c3e <Bootloader_Read_Protection_Level>
					Status = BL_OK;
 8000b76:	2301      	movs	r3, #1
 8000b78:	71fb      	strb	r3, [r7, #7]
					break;
 8000b7a:	e011      	b.n	8000ba0 <Bootloader_Handle_Command+0xc0>
				case CBL_GO_TO_ADDR_CMD:
					Bootloader_Jump_To_User_App(BL_Host_Buffer);
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <Bootloader_Handle_Command+0xcc>)
 8000b7e:	f000 f893 	bl	8000ca8 <Bootloader_Jump_To_User_App>
					Status = BL_OK;
 8000b82:	2301      	movs	r3, #1
 8000b84:	71fb      	strb	r3, [r7, #7]
					break;
 8000b86:	e00b      	b.n	8000ba0 <Bootloader_Handle_Command+0xc0>
				case CBL_FLASH_ERASE_CMD:
					Bootloader_Erase_Flash(BL_Host_Buffer);
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <Bootloader_Handle_Command+0xcc>)
 8000b8a:	f000 f940 	bl	8000e0e <Bootloader_Erase_Flash>
					Status = BL_OK;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	71fb      	strb	r3, [r7, #7]
					break;
 8000b92:	e005      	b.n	8000ba0 <Bootloader_Handle_Command+0xc0>
				case CBL_MEM_WRITE_CMD:
					Bootloader_Memory_Write(BL_Host_Buffer);
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <Bootloader_Handle_Command+0xcc>)
 8000b96:	f000 f9bb 	bl	8000f10 <Bootloader_Memory_Write>
					Status = BL_OK;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
					break;
 8000b9e:	bf00      	nop
			}
		}
	}

	return Status;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000028 	.word	0x20000028
 8000bb0:	20000174 	.word	0x20000174
 8000bb4:	20000029 	.word	0x20000029

08000bb8 <Bootloader_Get_Chip_Identification_Number>:

/************************************    Static Functions Implementations  ************************************/
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	81fb      	strh	r3, [r7, #14]
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000bd6:	8afb      	ldrh	r3, [r7, #22]
 8000bd8:	3b04      	subs	r3, #4
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000be2:	8afb      	ldrh	r3, [r7, #22]
 8000be4:	3b04      	subs	r3, #4
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4619      	mov	r1, r3
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 fa16 	bl	800101c <Bootloader_CRC_Verify>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d10d      	bne.n	8000c12 <Bootloader_Get_Chip_Identification_Number+0x5a>
		/* Get the MCU chip identification number */
		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <Bootloader_Get_Chip_Identification_Number+0x68>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	81fb      	strh	r3, [r7, #14]
		/* Report chip identification number to HOST */
		Bootloader_Send_Data_To_Host((uint8_t *)&MCU_Identification_Number, 2);
 8000c04:	f107 030e 	add.w	r3, r7, #14
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fa56 	bl	80010bc <Bootloader_Send_Data_To_Host>
	}
	else{
		Bootloader_Send_NACK();
	}
}
 8000c10:	e001      	b.n	8000c16 <Bootloader_Get_Chip_Identification_Number+0x5e>
		Bootloader_Send_NACK();
 8000c12:	f000 fa41 	bl	8001098 <Bootloader_Send_NACK>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e0042000 	.word	0xe0042000

08000c24 <CBL_STM32F401_Get_RDP_Level>:

static uint8_t CBL_STM32F401_Get_RDP_Level(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fb7d 	bl	800232c <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	b2db      	uxtb	r3, r3
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3301      	adds	r3, #1
 8000c5a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000c68:	8afb      	ldrh	r3, [r7, #22]
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f9d3 	bl	800101c <Bootloader_CRC_Verify>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d10f      	bne.n	8000c9c <Bootloader_Read_Protection_Level+0x5e>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F401_Get_RDP_Level();
 8000c7c:	f7ff ffd2 	bl	8000c24 <CBL_STM32F401_Get_RDP_Level>
 8000c80:	4603      	mov	r3, r0
 8000c82:	73fb      	strb	r3, [r7, #15]
		if(0xAA == RDP_Level)		 RDP_Level = 0x00;
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	2baa      	cmp	r3, #170	; 0xaa
 8000c88:	d102      	bne.n	8000c90 <Bootloader_Read_Protection_Level+0x52>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
		//Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
	}
	else{
		Bootloader_Send_NACK();
	}
}
 8000c8e:	e007      	b.n	8000ca0 <Bootloader_Read_Protection_Level+0x62>
		else if(0x55 == RDP_Level)   RDP_Level = 0x01;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	2b55      	cmp	r3, #85	; 0x55
 8000c94:	d104      	bne.n	8000ca0 <Bootloader_Read_Protection_Level+0x62>
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
}
 8000c9a:	e001      	b.n	8000ca0 <Bootloader_Read_Protection_Level+0x62>
		Bootloader_Send_NACK();
 8000c9c:	f000 f9fc 	bl	8001098 <Bootloader_Send_NACK>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <Bootloader_Jump_To_User_App>:

static void Bootloader_Jump_To_User_App(uint8_t *Host_Buffer)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	83fb      	strh	r3, [r7, #30]
	uint32_t Host_CRC32 = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000cc2:	8bfb      	ldrh	r3, [r7, #30]
 8000cc4:	3b04      	subs	r3, #4
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	61bb      	str	r3, [r7, #24]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 8000cce:	8bfb      	ldrh	r3, [r7, #30]
 8000cd0:	3b04      	subs	r3, #4
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f9a0 	bl	800101c <Bootloader_CRC_Verify>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d122      	bne.n	8000d28 <Bootloader_Jump_To_User_App+0x80>
	{
		if(0xFFFFFFFF != *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS))
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <Bootloader_Jump_To_User_App+0x8c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cea:	d015      	beq.n	8000d18 <Bootloader_Jump_To_User_App+0x70>
		{
			appExists = 1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <Bootloader_Jump_To_User_App+0x90>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
			//Bootloader_Send_Data_To_Host((uint8_t *)&appExists, 1);
			/* Value of the main stack pointer of our main application */
			uint32_t MSP_Value = *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS);
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <Bootloader_Jump_To_User_App+0x8c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	617b      	str	r3, [r7, #20]

			/* Reset Handler definition function of our main application */
			uint32_t MainAppAddr = *((volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4));
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <Bootloader_Jump_To_User_App+0x94>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	613b      	str	r3, [r7, #16]

			/* Fetch the reset handler address of the user application */
			pMainApp ResetHandler_Address = (pMainApp)MainAppAddr;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	f383 8808 	msr	MSP, r3
}
 8000d0c:	bf00      	nop

			/* Set Main Stack Pointer */
			__set_MSP(MSP_Value);

			/* DeInitialize / Disable of modules */
			HAL_RCC_DeInit(); /* DeInitialize the RCC clock configuration to the default reset state. */
 8000d0e:	f002 fa3f 	bl	8003190 <HAL_RCC_DeInit>
			                  /* Disable Maskable Interrupt */
			/* Jump to Application Reset Handler */
			ResetHandler_Address();
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4798      	blx	r3
		}
	}
	else{
		Bootloader_Send_NACK();
	}
}
 8000d16:	e009      	b.n	8000d2c <Bootloader_Jump_To_User_App+0x84>
			appExists = 0;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <Bootloader_Jump_To_User_App+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
			Bootloader_Send_Data_To_Host((uint8_t *)&appExists, 1);
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <Bootloader_Jump_To_User_App+0x90>)
 8000d22:	f000 f9cb 	bl	80010bc <Bootloader_Send_Data_To_Host>
}
 8000d26:	e001      	b.n	8000d2c <Bootloader_Jump_To_User_App+0x84>
		Bootloader_Send_NACK();
 8000d28:	f000 f9b6 	bl	8001098 <Bootloader_Send_NACK>
}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08008000 	.word	0x08008000
 8000d38:	2000008c 	.word	0x2000008c
 8000d3c:	08008004 	.word	0x08008004

08000d40 <Perform_Flash_Erase>:

static uint8_t Perform_Flash_Erase(uint8_t Sector_Numebr, uint8_t Number_Of_Sectors)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Sectors = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t SectorError = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]

	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	2b06      	cmp	r3, #6
 8000d6a:	d903      	bls.n	8000d74 <Perform_Flash_Erase+0x34>
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d72:	e046      	b.n	8000e02 <Perform_Flash_Erase+0xc2>
	}
	else{
		if((Sector_Numebr <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Numebr))
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d902      	bls.n	8000d80 <Perform_Flash_Erase+0x40>
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2bff      	cmp	r3, #255	; 0xff
 8000d7e:	d13d      	bne.n	8000dfc <Perform_Flash_Erase+0xbc>
		{
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Numebr)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d102      	bne.n	8000d8c <Perform_Flash_Erase+0x4c>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 8000d86:	2301      	movs	r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	e012      	b.n	8000db2 <Perform_Flash_Erase+0x72>
			}
			else
			{
				/* User needs Sector erase */
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Numebr;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f1c3 0306 	rsb	r3, r3, #6
 8000d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(Number_Of_Sectors > Remaining_Sectors)
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d902      	bls.n	8000da6 <Perform_Flash_Erase+0x66>
				{
					Number_Of_Sectors = Remaining_Sectors;
 8000da0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000da4:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Numebr;        /* Initial FLASH sector to erase when Mass erase is disabled */
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	61fb      	str	r3, [r7, #28]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]

			/* Unlock the FLASH control register access */
			HAL_Status = HAL_FLASH_Unlock();
 8000dba:	f001 f8d5 	bl	8001f68 <HAL_FLASH_Unlock>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000dc4:	f107 020c 	add.w	r2, r7, #12
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fa3c 	bl	800224c <HAL_FLASHEx_Erase>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if(HAL_SUCCESSFUL_ERASE == SectorError){
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d103      	bne.n	8000dea <Perform_Flash_Erase+0xaa>
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000de8:	e002      	b.n	8000df0 <Perform_Flash_Erase+0xb0>
			}
			else{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			/* Locks the FLASH control register access */
			HAL_Status = HAL_FLASH_Lock();
 8000df0:	f001 f8dc 	bl	8001fac <HAL_FLASH_Lock>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000dfa:	e002      	b.n	8000e02 <Perform_Flash_Erase+0xc2>
		}
		else{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
	return Sector_Validity_Status;
 8000e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000e2c:	8afb      	ldrh	r3, [r7, #22]
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 8000e38:	8afb      	ldrh	r3, [r7, #22]
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f8eb 	bl	800101c <Bootloader_CRC_Verify>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d106      	bne.n	8000e5a <Bootloader_Erase_Flash+0x4c>
	{
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(2, 4);
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f7ff ff76 	bl	8000d40 <Perform_Flash_Erase>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
	}
	else{
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000e58:	e001      	b.n	8000e5e <Bootloader_Erase_Flash+0x50>
		Bootloader_Send_NACK();
 8000e5a:	f000 f91d 	bl	8001098 <Bootloader_Send_NACK>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <Flash_Memory_Write_Payload>:

static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000e66:	b5b0      	push	{r4, r5, r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	4613      	mov	r3, r2
 8000e72:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 8000e80:	f001 f872 	bl	8001f68 <HAL_FLASH_Unlock>
 8000e84:	4603      	mov	r3, r0
 8000e86:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d002      	beq.n	8000e94 <Flash_Memory_Write_Payload+0x2e>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75bb      	strb	r3, [r7, #22]
 8000e92:	e023      	b.n	8000edc <Flash_Memory_Write_Payload+0x76>
	}
	else{
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	82bb      	strh	r3, [r7, #20]
 8000e98:	e01c      	b.n	8000ed4 <Flash_Memory_Write_Payload+0x6e>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 8000e9a:	8aba      	ldrh	r2, [r7, #20]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	18d1      	adds	r1, r2, r3
 8000ea0:	8abb      	ldrh	r3, [r7, #20]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2200      	movs	r2, #0
 8000eac:	461c      	mov	r4, r3
 8000eae:	4615      	mov	r5, r2
 8000eb0:	4622      	mov	r2, r4
 8000eb2:	462b      	mov	r3, r5
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f001 f803 	bl	8001ec0 <HAL_FLASH_Program>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <Flash_Memory_Write_Payload+0x64>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	75bb      	strb	r3, [r7, #22]
				break;
 8000ec8:	e008      	b.n	8000edc <Flash_Memory_Write_Payload+0x76>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 8000ece:	8abb      	ldrh	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	82bb      	strh	r3, [r7, #20]
 8000ed4:	8aba      	ldrh	r2, [r7, #20]
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d3de      	bcc.n	8000e9a <Flash_Memory_Write_Payload+0x34>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000edc:	7dbb      	ldrb	r3, [r7, #22]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d10f      	bne.n	8000f02 <Flash_Memory_Write_Payload+0x9c>
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10c      	bne.n	8000f02 <Flash_Memory_Write_Payload+0x9c>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000ee8:	f001 f860 	bl	8001fac <HAL_FLASH_Lock>
 8000eec:	4603      	mov	r3, r0
 8000eee:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 8000ef0:	7dfb      	ldrb	r3, [r7, #23]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <Flash_Memory_Write_Payload+0x96>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000efa:	e004      	b.n	8000f06 <Flash_Memory_Write_Payload+0xa0>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000efc:	2301      	movs	r3, #1
 8000efe:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000f00:	e001      	b.n	8000f06 <Flash_Memory_Write_Payload+0xa0>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000f02:	2300      	movs	r3, #0
 8000f04:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 8000f06:	7dbb      	ldrb	r3, [r7, #22]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bdb0      	pop	{r4, r5, r7, pc}

08000f10 <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	727b      	strb	r3, [r7, #9]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3301      	adds	r3, #1
 8000f38:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000f3a:	8afb      	ldrh	r3, [r7, #22]
 8000f3c:	3b04      	subs	r3, #4
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000f46:	8afb      	ldrh	r3, [r7, #22]
 8000f48:	3b04      	subs	r3, #4
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f864 	bl	800101c <Bootloader_CRC_Verify>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d132      	bne.n	8000fc0 <Bootloader_Memory_Write+0xb0>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f60:	60fb      	str	r3, [r7, #12]
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	799b      	ldrb	r3, [r3, #6]
 8000f66:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 f82f 	bl	8000fcc <Host_Address_Verification>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000f72:	7abb      	ldrb	r3, [r7, #10]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d11a      	bne.n	8000fae <Bootloader_Memory_Write+0x9e>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3307      	adds	r3, #7
 8000f7c:	7afa      	ldrb	r2, [r7, #11]
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff6f 	bl	8000e66 <Flash_Memory_Write_Payload>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 8000f8c:	7a7b      	ldrb	r3, [r7, #9]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d106      	bne.n	8000fa0 <Bootloader_Memory_Write+0x90>
				/* Report payload write passed */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000f92:	f107 0309 	add.w	r3, r7, #9
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f88f 	bl	80010bc <Bootloader_Send_Data_To_Host>
	}
	else{
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000f9e:	e011      	b.n	8000fc4 <Bootloader_Memory_Write+0xb4>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000fa0:	f107 0309 	add.w	r3, r7, #9
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f888 	bl	80010bc <Bootloader_Send_Data_To_Host>
}
 8000fac:	e00a      	b.n	8000fc4 <Bootloader_Memory_Write+0xb4>
			Address_Verification = ADDRESS_IS_INVALID;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000fb2:	f107 030a 	add.w	r3, r7, #10
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f87f 	bl	80010bc <Bootloader_Send_Data_To_Host>
}
 8000fbe:	e001      	b.n	8000fc4 <Bootloader_Memory_Write+0xb4>
		Bootloader_Send_NACK();
 8000fc0:	f000 f86a 	bl	8001098 <Bootloader_Send_NACK>
}
 8000fc4:	bf00      	nop
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <Host_Address_Verification>:

static uint8_t Host_Address_Verification(uint32_t Jump_Address)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]

	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F401_SRAM1_END))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fde:	d306      	bcc.n	8000fee <Host_Address_Verification+0x22>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <Host_Address_Verification+0x4c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d802      	bhi.n	8000fee <Host_Address_Verification+0x22>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e00c      	b.n	8001008 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401_FLASH_END))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ff4:	d306      	bcc.n	8001004 <Host_Address_Verification+0x38>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000ffc:	d802      	bhi.n	8001004 <Host_Address_Verification+0x38>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e001      	b.n	8001008 <Host_Address_Verification+0x3c>
	}
	else
	{
		Address_Verification = ADDRESS_IS_INVALID;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20010000 	.word	0x20010000

0800101c <Bootloader_CRC_Verify>:

static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8001028:	2300      	movs	r3, #0
 800102a:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8001038:	2300      	movs	r3, #0
 800103a:	75fb      	strb	r3, [r7, #23]
 800103c:	e00f      	b.n	800105e <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	2201      	movs	r2, #1
 800104e:	4619      	mov	r1, r3
 8001050:	4810      	ldr	r0, [pc, #64]	; (8001094 <Bootloader_CRC_Verify+0x78>)
 8001052:	f000 ff0a 	bl	8001e6a <HAL_CRC_Accumulate>
 8001056:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	3301      	adds	r3, #1
 800105c:	75fb      	strb	r3, [r7, #23]
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	429a      	cmp	r2, r3
 8001064:	d8eb      	bhi.n	800103e <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
  __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <Bootloader_CRC_Verify+0x78>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <Bootloader_CRC_Verify+0x78>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0201 	orr.w	r2, r2, #1
 8001074:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d102      	bne.n	8001084 <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 800107e:	2301      	movs	r3, #1
 8001080:	77fb      	strb	r3, [r7, #31]
 8001082:	e001      	b.n	8001088 <Bootloader_CRC_Verify+0x6c>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 8001084:	2300      	movs	r3, #0
 8001086:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 8001088:	7ffb      	ldrb	r3, [r7, #31]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000090 	.word	0x20000090

08001098 <Bootloader_Send_NACK>:

static void Bootloader_Send_NACK(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 800109e:	23ab      	movs	r3, #171	; 0xab
 80010a0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 80010a2:	1df9      	adds	r1, r7, #7
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	2201      	movs	r2, #1
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <Bootloader_Send_NACK+0x20>)
 80010ac:	f003 fb38 	bl	8004720 <HAL_UART_Transmit>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000174 	.word	0x20000174

080010bc <Bootloader_Send_Data_To_Host>:

static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <Bootloader_Send_Data_To_Host+0x24>)
 80010d2:	f003 fb25 	bl	8004720 <HAL_UART_Transmit>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000174 	.word	0x20000174

080010e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_CRC_Init+0x20>)
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <MX_CRC_Init+0x24>)
 80010ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_CRC_Init+0x20>)
 80010f0:	f000 fe9f 	bl	8001e32 <HAL_CRC_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80010fa:	f000 f9f7 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000090 	.word	0x20000090
 8001108:	40023000 	.word	0x40023000

0800110c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_CRC_MspInit+0x3c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10d      	bne.n	800113a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_CRC_MspInit+0x40>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <HAL_CRC_MspInit+0x40>)
 8001128:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_CRC_MspInit+0x40>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023000 	.word	0x40023000
 800114c:	40023800 	.word	0x40023800

08001150 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <MX_GPIO_Init+0xe8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <MX_GPIO_Init+0xe8>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <MX_GPIO_Init+0xe8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <MX_GPIO_Init+0xe8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a2b      	ldr	r2, [pc, #172]	; (8001238 <MX_GPIO_Init+0xe8>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <MX_GPIO_Init+0xe8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <MX_GPIO_Init+0xe8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a24      	ldr	r2, [pc, #144]	; (8001238 <MX_GPIO_Init+0xe8>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <MX_GPIO_Init+0xe8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	481e      	ldr	r0, [pc, #120]	; (800123c <MX_GPIO_Init+0xec>)
 80011c2:	f001 fb59 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	210f      	movs	r1, #15
 80011ca:	481d      	ldr	r0, [pc, #116]	; (8001240 <MX_GPIO_Init+0xf0>)
 80011cc:	f001 fb54 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2104      	movs	r1, #4
 80011d4:	481b      	ldr	r0, [pc, #108]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011d6:	f001 fb4f 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4619      	mov	r1, r3
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_GPIO_Init+0xec>)
 80011f4:	f001 f9bc 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011f8:	230f      	movs	r3, #15
 80011fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_GPIO_Init+0xf0>)
 8001210:	f001 f9ae 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001214:	2304      	movs	r3, #4
 8001216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_GPIO_Init+0xf4>)
 800122c:	f001 f9a0 	bl	8002570 <HAL_GPIO_Init>

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	40020800 	.word	0x40020800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400

08001248 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM10)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d10e      	bne.n	8001278 <HAL_TIM_PeriodElapsedCallback+0x30>
    {
      if(isReadingFinished)
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d009      	beq.n	8001278 <HAL_TIM_PeriodElapsedCallback+0x30>
	  {
		isReadingFinished = 0;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800126a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001270:	f001 fb1b 	bl	80028aa <HAL_GPIO_TogglePin>
		Ultrasonic_Get_Distance();
 8001274:	f004 f804 	bl	8005280 <Ultrasonic_Get_Distance>
	  }
    }
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40014400 	.word	0x40014400
 8001284:	2000009a 	.word	0x2000009a
 8001288:	40020800 	.word	0x40020800

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t bt_value = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	71bb      	strb	r3, [r7, #6]
	uint8_t last_bt_value = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129a:	f000 fc23 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 f8bb 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f7ff ff55 	bl	8001150 <MX_GPIO_Init>
  MX_TIM3_Init();
 80012a6:	f000 f9f1 	bl	800168c <MX_TIM3_Init>
  MX_TIM2_Init();
 80012aa:	f000 f99d 	bl	80015e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012ae:	f000 fb7d 	bl	80019ac <MX_USART1_UART_Init>
  MX_CRC_Init();
 80012b2:	f7ff ff17 	bl	80010e4 <MX_CRC_Init>
  MX_TIM10_Init();
 80012b6:	f000 fa63 	bl	8001780 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  Rover_Initialize();
 80012ba:	f003 fe83 	bl	8004fc4 <Rover_Initialize>
  Ultrasnoic_Initialize();
 80012be:	f003 ffcf 	bl	8005260 <Ultrasnoic_Initialize>
  HAL_TIM_Base_Start_IT(&htim10);
 80012c2:	4852      	ldr	r0, [pc, #328]	; (800140c <main+0x180>)
 80012c4:	f002 f882 	bl	80033cc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart1, (uint8_t*)&bt_value, 1, 30);
 80012c8:	1db9      	adds	r1, r7, #6
 80012ca:	231e      	movs	r3, #30
 80012cc:	2201      	movs	r2, #1
 80012ce:	4850      	ldr	r0, [pc, #320]	; (8001410 <main+0x184>)
 80012d0:	f003 fab1 	bl	8004836 <HAL_UART_Receive>

	  if(bt_value)
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d019      	beq.n	800130e <main+0x82>
	  {
		  if('U' == bt_value){
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	2b55      	cmp	r3, #85	; 0x55
 80012de:	d104      	bne.n	80012ea <main+0x5e>
			  bt_value = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	71bb      	strb	r3, [r7, #6]
			  Bootloader_Handle_Command();
 80012e4:	f7ff fbfc 	bl	8000ae0 <Bootloader_Handle_Command>
 80012e8:	e013      	b.n	8001312 <main+0x86>
		  }
		  else if('F' == bt_value || 'B' == bt_value || 'R' == bt_value || 'L' == bt_value)
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	2b46      	cmp	r3, #70	; 0x46
 80012ee:	d008      	beq.n	8001302 <main+0x76>
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	2b42      	cmp	r3, #66	; 0x42
 80012f4:	d005      	beq.n	8001302 <main+0x76>
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	2b52      	cmp	r3, #82	; 0x52
 80012fa:	d002      	beq.n	8001302 <main+0x76>
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b4c      	cmp	r3, #76	; 0x4c
 8001300:	d102      	bne.n	8001308 <main+0x7c>
			  last_bt_value = bt_value;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	e004      	b.n	8001312 <main+0x86>
		  else
			  last_bt_value = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	e001      	b.n	8001312 <main+0x86>
  	  }
	  else{ bt_value = last_bt_value; }
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	71bb      	strb	r3, [r7, #6]

	  switch(bt_value)
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	3b31      	subs	r3, #49	; 0x31
 8001316:	2b22      	cmp	r3, #34	; 0x22
 8001318:	d8d6      	bhi.n	80012c8 <main+0x3c>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <main+0x94>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	080013e5 	.word	0x080013e5
 8001324:	080013e5 	.word	0x080013e5
 8001328:	080013e5 	.word	0x080013e5
 800132c:	080013e5 	.word	0x080013e5
 8001330:	080013e5 	.word	0x080013e5
 8001334:	080012c9 	.word	0x080012c9
 8001338:	080012c9 	.word	0x080012c9
 800133c:	080012c9 	.word	0x080012c9
 8001340:	080012c9 	.word	0x080012c9
 8001344:	080012c9 	.word	0x080012c9
 8001348:	080012c9 	.word	0x080012c9
 800134c:	080012c9 	.word	0x080012c9
 8001350:	080012c9 	.word	0x080012c9
 8001354:	080012c9 	.word	0x080012c9
 8001358:	080012c9 	.word	0x080012c9
 800135c:	080012c9 	.word	0x080012c9
 8001360:	080012c9 	.word	0x080012c9
 8001364:	080013cd 	.word	0x080013cd
 8001368:	080012c9 	.word	0x080012c9
 800136c:	080012c9 	.word	0x080012c9
 8001370:	080012c9 	.word	0x080012c9
 8001374:	080013ad 	.word	0x080013ad
 8001378:	080012c9 	.word	0x080012c9
 800137c:	080012c9 	.word	0x080012c9
 8001380:	080012c9 	.word	0x080012c9
 8001384:	080012c9 	.word	0x080012c9
 8001388:	080012c9 	.word	0x080012c9
 800138c:	080013d9 	.word	0x080013d9
 8001390:	080012c9 	.word	0x080012c9
 8001394:	080012c9 	.word	0x080012c9
 8001398:	080012c9 	.word	0x080012c9
 800139c:	080012c9 	.word	0x080012c9
 80013a0:	080012c9 	.word	0x080012c9
 80013a4:	080013d3 	.word	0x080013d3
 80013a8:	080013df 	.word	0x080013df
	  {
		  case 'F':
			  if(20 > distance && 0 < distance)
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <main+0x188>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2b13      	cmp	r3, #19
 80013b4:	d807      	bhi.n	80013c6 <main+0x13a>
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <main+0x188>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <main+0x13a>
				  Rover_Stop();
 80013c0:	f003 fe64 	bl	800508c <Rover_Stop>
			  else
				  Rover_Forward();
			  break;
 80013c4:	e021      	b.n	800140a <main+0x17e>
				  Rover_Forward();
 80013c6:	f003 fe21 	bl	800500c <Rover_Forward>
			  break;
 80013ca:	e01e      	b.n	800140a <main+0x17e>

		  case 'B':
			  Rover_Backward();
 80013cc:	f003 fe2c 	bl	8005028 <Rover_Backward>
			  break;
 80013d0:	e01b      	b.n	800140a <main+0x17e>

		  case 'R':
			  Rover_Right();
 80013d2:	f003 fe37 	bl	8005044 <Rover_Right>
			  break;
 80013d6:	e018      	b.n	800140a <main+0x17e>

		  case 'L':
			  Rover_Left();
 80013d8:	f003 fe46 	bl	8005068 <Rover_Left>
			  break;
 80013dc:	e015      	b.n	800140a <main+0x17e>

		  case 'S':
			  Rover_Stop();
 80013de:	f003 fe55 	bl	800508c <Rover_Stop>
			  break;
 80013e2:	e012      	b.n	800140a <main+0x17e>

		  case '1': case '2': case '3': case '4': case '5':
			  Rover_Change_Speed((bt_value - '0') * 20);
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	f003 fe65 	bl	80050cc <Rover_Change_Speed>
			  bt_value = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	71bb      	strb	r3, [r7, #6]
			  break;
 8001406:	bf00      	nop
 8001408:	e75e      	b.n	80012c8 <main+0x3c>
	  HAL_UART_Receive(&huart1, (uint8_t*)&bt_value, 1, 30);
 800140a:	e75d      	b.n	80012c8 <main+0x3c>
 800140c:	2000012c 	.word	0x2000012c
 8001410:	20000174 	.word	0x20000174
 8001414:	20000098 	.word	0x20000098

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b094      	sub	sp, #80	; 0x50
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	2230      	movs	r2, #48	; 0x30
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f003 ffe0 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <SystemClock_Config+0xcc>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <SystemClock_Config+0xcc>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	6413      	str	r3, [r2, #64]	; 0x40
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <SystemClock_Config+0xcc>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <SystemClock_Config+0xd0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <SystemClock_Config+0xd0>)
 8001466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <SystemClock_Config+0xd0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001480:	2310      	movs	r3, #16
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001484:	2302      	movs	r3, #2
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001488:	2300      	movs	r3, #0
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800148c:	2308      	movs	r3, #8
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001490:	2354      	movs	r3, #84	; 0x54
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 fa1d 	bl	80028e0 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014ac:	f000 f81e 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2102      	movs	r1, #2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 fc7f 	bl	8002dd0 <HAL_RCC_ClockConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014d8:	f000 f808 	bl	80014ec <Error_Handler>
  }
}
 80014dc:	bf00      	nop
 80014de:	3750      	adds	r7, #80	; 0x50
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_MspInit+0x4c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_MspInit+0x4c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 faf8 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015a2:	f002 f9df 	bl	8003964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000012c 	.word	0x2000012c

080015b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM2_IRQHandler+0x10>)
 80015b6:	f002 f9d5 	bl	8003964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000009c 	.word	0x2000009c

080015c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SystemInit+0x20>)
 80015ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <SystemInit+0x20>)
 80015d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_TIM2_Init+0xa0>)
 8001606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <MX_TIM2_Init+0xa0>)
 800160e:	2253      	movs	r2, #83	; 0x53
 8001610:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_TIM2_Init+0xa0>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <MX_TIM2_Init+0xa0>)
 800161a:	f04f 32ff 	mov.w	r2, #4294967295
 800161e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_TIM2_Init+0xa0>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_TIM2_Init+0xa0>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800162c:	4816      	ldr	r0, [pc, #88]	; (8001688 <MX_TIM2_Init+0xa0>)
 800162e:	f002 f82f 	bl	8003690 <HAL_TIM_IC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001638:	f7ff ff58 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	480f      	ldr	r0, [pc, #60]	; (8001688 <MX_TIM2_Init+0xa0>)
 800164c:	f002 ff96 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001656:	f7ff ff49 	bl	80014ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800165e:	2301      	movs	r3, #1
 8001660:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	2208      	movs	r2, #8
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_TIM2_Init+0xa0>)
 8001672:	f002 fa67 	bl	8003b44 <HAL_TIM_IC_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800167c:	f7ff ff36 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000009c 	.word	0x2000009c

0800168c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <MX_TIM3_Init+0xec>)
 80016b0:	4a32      	ldr	r2, [pc, #200]	; (800177c <MX_TIM3_Init+0xf0>)
 80016b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <MX_TIM3_Init+0xec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <MX_TIM3_Init+0xec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <MX_TIM3_Init+0xec>)
 80016c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <MX_TIM3_Init+0xec>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <MX_TIM3_Init+0xec>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016d4:	4828      	ldr	r0, [pc, #160]	; (8001778 <MX_TIM3_Init+0xec>)
 80016d6:	f001 fedb 	bl	8003490 <HAL_TIM_PWM_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016e0:	f7ff ff04 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	4619      	mov	r1, r3
 80016f2:	4821      	ldr	r0, [pc, #132]	; (8001778 <MX_TIM3_Init+0xec>)
 80016f4:	f002 ff42 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80016fe:	f7ff fef5 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001702:	2360      	movs	r3, #96	; 0x60
 8001704:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	4817      	ldr	r0, [pc, #92]	; (8001778 <MX_TIM3_Init+0xec>)
 800171a:	f002 faaf 	bl	8003c7c <HAL_TIM_PWM_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001724:	f7ff fee2 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2204      	movs	r2, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4812      	ldr	r0, [pc, #72]	; (8001778 <MX_TIM3_Init+0xec>)
 8001730:	f002 faa4 	bl	8003c7c <HAL_TIM_PWM_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800173a:	f7ff fed7 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2208      	movs	r2, #8
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <MX_TIM3_Init+0xec>)
 8001746:	f002 fa99 	bl	8003c7c <HAL_TIM_PWM_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001750:	f7ff fecc 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	220c      	movs	r2, #12
 8001758:	4619      	mov	r1, r3
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM3_Init+0xec>)
 800175c:	f002 fa8e 	bl	8003c7c <HAL_TIM_PWM_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001766:	f7ff fec1 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM3_Init+0xec>)
 800176c:	f000 f8c4 	bl	80018f8 <HAL_TIM_MspPostInit>

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200000e4 	.word	0x200000e4
 800177c:	40000400 	.word	0x40000400

08001780 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_TIM10_Init+0x40>)
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <MX_TIM10_Init+0x44>)
 8001788:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <MX_TIM10_Init+0x40>)
 800178c:	2253      	movs	r2, #83	; 0x53
 800178e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_TIM10_Init+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 60000;
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_TIM10_Init+0x40>)
 8001798:	f64e 2260 	movw	r2, #60000	; 0xea60
 800179c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_TIM10_Init+0x40>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_TIM10_Init+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_TIM10_Init+0x40>)
 80017ac:	f001 fdbe 	bl	800332c <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80017b6:	f7ff fe99 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000012c 	.word	0x2000012c
 80017c4:	40014400 	.word	0x40014400

080017c8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d134      	bne.n	8001854 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_TIM_IC_MspInit+0x94>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a1a      	ldr	r2, [pc, #104]	; (800185c <HAL_TIM_IC_MspInit+0x94>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_TIM_IC_MspInit+0x94>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_TIM_IC_MspInit+0x94>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a13      	ldr	r2, [pc, #76]	; (800185c <HAL_TIM_IC_MspInit+0x94>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_TIM_IC_MspInit+0x94>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001834:	2301      	movs	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <HAL_TIM_IC_MspInit+0x98>)
 8001840:	f000 fe96 	bl	8002570 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	201c      	movs	r0, #28
 800184a:	f000 fabc 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800184e:	201c      	movs	r0, #28
 8001850:	f000 fad5 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40020400 	.word	0x40020400

08001864 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10d      	bne.n	8001892 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_TIM_PWM_MspInit+0x40>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_TIM_PWM_MspInit+0x40>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_TIM_PWM_MspInit+0x40>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40000400 	.word	0x40000400
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_TIM_Base_MspInit+0x48>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d115      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_TIM_Base_MspInit+0x4c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <HAL_TIM_Base_MspInit+0x4c>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_TIM_Base_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2019      	movs	r0, #25
 80018dc:	f000 fa73 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018e0:	2019      	movs	r0, #25
 80018e2:	f000 fa8c 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40014400 	.word	0x40014400
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a21      	ldr	r2, [pc, #132]	; (800199c <HAL_TIM_MspPostInit+0xa4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d13b      	bne.n	8001992 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_TIM_MspPostInit+0xa8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_TIM_MspPostInit+0xa8>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_TIM_MspPostInit+0xa8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_TIM_MspPostInit+0xa8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <HAL_TIM_MspPostInit+0xa8>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_TIM_MspPostInit+0xa8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001962:	2302      	movs	r3, #2
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <HAL_TIM_MspPostInit+0xac>)
 800196e:	f000 fdff 	bl	8002570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001972:	2303      	movs	r3, #3
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001982:	2302      	movs	r3, #2
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <HAL_TIM_MspPostInit+0xb0>)
 800198e:	f000 fdef 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	; 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40000400 	.word	0x40000400
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400

080019ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_USART1_UART_Init+0x4c>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_USART1_UART_Init+0x50>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <MX_USART1_UART_Init+0x4c>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_USART1_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_USART1_UART_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_USART1_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_USART1_UART_Init+0x4c>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_USART1_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_USART1_UART_Init+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_USART1_UART_Init+0x4c>)
 80019e4:	f002 fe4c 	bl	8004680 <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019ee:	f7ff fd7d 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000174 	.word	0x20000174
 80019fc:	40011000 	.word	0x40011000

08001a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <HAL_UART_MspInit+0x84>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12c      	bne.n	8001a7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_UART_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_UART_MspInit+0x8c>)
 8001a78:	f000 fd7a 	bl	8002570 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a94:	f7ff fd96 	bl	80015c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	; (8001adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001abe:	f003 fc9d 	bl	80053fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7ff fbe3 	bl	800128c <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ad4:	08005484 	.word	0x08005484
  ldr r2, =_sbss
 8001ad8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001adc:	200001f0 	.word	0x200001f0

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f94f 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fcee 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f967 	bl	8001e1a <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f92f 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	200001bc 	.word	0x200001bc

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200001bc 	.word	0x200001bc

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	; (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff29 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff3e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff31 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e00e      	b.n	8001e62 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	795b      	ldrb	r3, [r3, #5]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff f959 	bl	800110c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b087      	sub	sp, #28
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e00a      	b.n	8001e9c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	441a      	add	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3f0      	bcc.n	8001e86 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001eb2:	693b      	ldr	r3, [r7, #16]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_FLASH_Program+0xa0>)
 8001ed4:	7e1b      	ldrb	r3, [r3, #24]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_FLASH_Program+0x1e>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e03b      	b.n	8001f56 <HAL_FLASH_Program+0x96>
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_FLASH_Program+0xa0>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ee4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ee8:	f000 f870 	bl	8001fcc <FLASH_WaitForLastOperation>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d12b      	bne.n	8001f4e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001efc:	783b      	ldrb	r3, [r7, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	68b8      	ldr	r0, [r7, #8]
 8001f02:	f000 f91b 	bl	800213c <FLASH_Program_Byte>
 8001f06:	e016      	b.n	8001f36 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001f0e:	883b      	ldrh	r3, [r7, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	68b8      	ldr	r0, [r7, #8]
 8001f14:	f000 f8ee 	bl	80020f4 <FLASH_Program_HalfWord>
 8001f18:	e00d      	b.n	8001f36 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d105      	bne.n	8001f2c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	68b8      	ldr	r0, [r7, #8]
 8001f26:	f000 f8c3 	bl	80020b0 <FLASH_Program_Word>
 8001f2a:	e004      	b.n	8001f36 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f30:	68b8      	ldr	r0, [r7, #8]
 8001f32:	f000 f88b 	bl	800204c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f3a:	f000 f847 	bl	8001fcc <FLASH_WaitForLastOperation>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_FLASH_Program+0xa4>)
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_FLASH_Program+0xa4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_FLASH_Program+0xa0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	761a      	strb	r2, [r3, #24]

  return status;
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200001c0 	.word	0x200001c0
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da0b      	bge.n	8001f92 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f7c:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_FLASH_Unlock+0x3c>)
 8001f7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <HAL_FLASH_Unlock+0x40>)
 8001f84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da01      	bge.n	8001f92 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f92:	79fb      	ldrb	r3, [r7, #7]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40023c00 	.word	0x40023c00
 8001fa4:	45670123 	.word	0x45670123
 8001fa8:	cdef89ab 	.word	0xcdef89ab

08001fac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_FLASH_Lock+0x1c>)
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_FLASH_Lock+0x1c>)
 8001fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fba:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40023c00 	.word	0x40023c00

08001fcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <FLASH_WaitForLastOperation+0x78>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fde:	f7ff fde7 	bl	8001bb0 <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001fe4:	e010      	b.n	8002008 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d00c      	beq.n	8002008 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <FLASH_WaitForLastOperation+0x38>
 8001ff4:	f7ff fddc 	bl	8001bb0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d201      	bcs.n	8002008 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e019      	b.n	800203c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <FLASH_WaitForLastOperation+0x7c>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e8      	bne.n	8001fe6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <FLASH_WaitForLastOperation+0x7c>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <FLASH_WaitForLastOperation+0x7c>)
 8002022:	2201      	movs	r2, #1
 8002024:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <FLASH_WaitForLastOperation+0x7c>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002032:	f000 f8a5 	bl	8002180 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0

}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200001c0 	.word	0x200001c0
 8002048:	40023c00 	.word	0x40023c00

0800204c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	4a13      	ldr	r2, [pc, #76]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 800205e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	4a10      	ldr	r2, [pc, #64]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 800206a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800206e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <FLASH_Program_DoubleWord+0x60>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002082:	f3bf 8f6f 	isb	sy
}
 8002086:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	000a      	movs	r2, r1
 8002096:	2300      	movs	r3, #0
 8002098:	68f9      	ldr	r1, [r7, #12]
 800209a:	3104      	adds	r1, #4
 800209c:	4613      	mov	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40023c00 	.word	0x40023c00

080020b0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <FLASH_Program_Word+0x40>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	601a      	str	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 8002106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	4a09      	ldr	r2, [pc, #36]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002116:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <FLASH_Program_HalfWord+0x44>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	801a      	strh	r2, [r3, #0]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00

0800213c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <FLASH_Program_Byte+0x40>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4a0b      	ldr	r2, [pc, #44]	; (800217c <FLASH_Program_Byte+0x40>)
 800214e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002152:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <FLASH_Program_Byte+0x40>)
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <FLASH_Program_Byte+0x40>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <FLASH_Program_Byte+0x40>)
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <FLASH_Program_Byte+0x40>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	701a      	strb	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00

08002180 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 800219a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 800219e:	2210      	movs	r2, #16
 80021a0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	4a24      	ldr	r2, [pc, #144]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021b8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021bc:	2220      	movs	r2, #32
 80021be:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021d6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 80021f4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 8002212:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 8002216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f043 0320 	orr.w	r3, r3, #32
 8002230:	4a05      	ldr	r2, [pc, #20]	; (8002248 <FLASH_SetErrorCode+0xc8>)
 8002232:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <FLASH_SetErrorCode+0xc4>)
 8002236:	2202      	movs	r2, #2
 8002238:	60da      	str	r2, [r3, #12]
  }
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40023c00 	.word	0x40023c00
 8002248:	200001c0 	.word	0x200001c0

0800224c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800225e:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_FLASHEx_Erase+0xd8>)
 8002260:	7e1b      	ldrb	r3, [r3, #24]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_FLASHEx_Erase+0x1e>
 8002266:	2302      	movs	r3, #2
 8002268:	e058      	b.n	800231c <HAL_FLASHEx_Erase+0xd0>
 800226a:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_FLASHEx_Erase+0xd8>)
 800226c:	2201      	movs	r2, #1
 800226e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002270:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002274:	f7ff feaa 	bl	8001fcc <FLASH_WaitForLastOperation>
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d148      	bne.n	8002314 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d115      	bne.n	80022be <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4619      	mov	r1, r3
 800229e:	4610      	mov	r0, r2
 80022a0:	f000 f868 	bl	8002374 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022a8:	f7ff fe90 	bl	8001fcc <FLASH_WaitForLastOperation>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_FLASHEx_Erase+0xdc>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_FLASHEx_Erase+0xdc>)
 80022b6:	f023 0304 	bic.w	r3, r3, #4
 80022ba:	6113      	str	r3, [r2, #16]
 80022bc:	e028      	b.n	8002310 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	e01c      	b.n	8002300 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	68b8      	ldr	r0, [r7, #8]
 80022d0:	f000 f874 	bl	80023bc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022d8:	f7ff fe78 	bl	8001fcc <FLASH_WaitForLastOperation>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_FLASHEx_Erase+0xdc>)
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4a10      	ldr	r2, [pc, #64]	; (8002328 <HAL_FLASHEx_Erase+0xdc>)
 80022e6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80022ea:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	601a      	str	r2, [r3, #0]
          break;
 80022f8:	e00a      	b.n	8002310 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4413      	add	r3, r2
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d3da      	bcc.n	80022c6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002310:	f000 f8e8 	bl	80024e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_FLASHEx_Erase+0xd8>)
 8002316:	2200      	movs	r2, #0
 8002318:	761a      	strb	r2, [r3, #24]

  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200001c0 	.word	0x200001c0
 8002328:	40023c00 	.word	0x40023c00

0800232c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	220f      	movs	r2, #15
 8002338:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800233a:	f000 f897 	bl	800246c <FLASH_OB_GetWRP>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8002346:	f000 f89d 	bl	8002484 <FLASH_OB_GetRDP>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8002352:	f000 f87b 	bl	800244c <FLASH_OB_GetUser>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800235e:	f000 f8b1 	bl	80024c4 <FLASH_OB_GetBOR>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	615a      	str	r2, [r3, #20]
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <FLASH_MassErase+0x44>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <FLASH_MassErase+0x44>)
 8002386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <FLASH_MassErase+0x44>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <FLASH_MassErase+0x44>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <FLASH_MassErase+0x44>)
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	4313      	orrs	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <FLASH_MassErase+0x44>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6113      	str	r3, [r2, #16]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00

080023bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e010      	b.n	80023fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d103      	bne.n	80023e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80023de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e009      	b.n	80023fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d103      	bne.n	80023f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80023ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e002      	b.n	80023fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80023f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002404:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	490f      	ldr	r1, [pc, #60]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002418:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800241c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4313      	orrs	r3, r2
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <FLASH_Erase_Sector+0x8c>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	6113      	str	r3, [r2, #16]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40023c00 	.word	0x40023c00

0800244c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <FLASH_OB_GetUser+0x1c>)
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f023 031f 	bic.w	r3, r3, #31
 800245a:	b2db      	uxtb	r3, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00

0800246c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <FLASH_OB_GetWRP+0x14>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40023c16 	.word	0x40023c16

08002484 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800248a:	23aa      	movs	r3, #170	; 0xaa
 800248c:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <FLASH_OB_GetRDP+0x3c>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2bcc      	cmp	r3, #204	; 0xcc
 8002496:	d102      	bne.n	800249e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002498:	23cc      	movs	r3, #204	; 0xcc
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	e009      	b.n	80024b2 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <FLASH_OB_GetRDP+0x3c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2baa      	cmp	r3, #170	; 0xaa
 80024a6:	d102      	bne.n	80024ae <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80024a8:	23aa      	movs	r3, #170	; 0xaa
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	e001      	b.n	80024b2 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80024ae:	2355      	movs	r3, #85	; 0x55
 80024b0:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80024b2:	79fb      	ldrb	r3, [r7, #7]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40023c15 	.word	0x40023c15

080024c4 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <FLASH_OB_GetBOR+0x1c>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	b2db      	uxtb	r3, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023c14 	.word	0x40023c14

080024e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80024e8:	4b20      	ldr	r3, [pc, #128]	; (800256c <FLASH_FlushCaches+0x88>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d017      	beq.n	8002524 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <FLASH_FlushCaches+0x88>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1c      	ldr	r2, [pc, #112]	; (800256c <FLASH_FlushCaches+0x88>)
 80024fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024fe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <FLASH_FlushCaches+0x88>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <FLASH_FlushCaches+0x88>)
 8002506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <FLASH_FlushCaches+0x88>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a16      	ldr	r2, [pc, #88]	; (800256c <FLASH_FlushCaches+0x88>)
 8002512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002516:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <FLASH_FlushCaches+0x88>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <FLASH_FlushCaches+0x88>)
 800251e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002522:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <FLASH_FlushCaches+0x88>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d017      	beq.n	8002560 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <FLASH_FlushCaches+0x88>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <FLASH_FlushCaches+0x88>)
 8002536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800253a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <FLASH_FlushCaches+0x88>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0a      	ldr	r2, [pc, #40]	; (800256c <FLASH_FlushCaches+0x88>)
 8002542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <FLASH_FlushCaches+0x88>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <FLASH_FlushCaches+0x88>)
 800254e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002552:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <FLASH_FlushCaches+0x88>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <FLASH_FlushCaches+0x88>)
 800255a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255e:	6013      	str	r3, [r2, #0]
  }
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023c00 	.word	0x40023c00

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e159      	b.n	8002840 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800258c:	2201      	movs	r2, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 8148 	bne.w	800283a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d005      	beq.n	80025c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b03      	cmp	r3, #3
 800262e:	d017      	beq.n	8002660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a2 	beq.w	800283a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b57      	ldr	r3, [pc, #348]	; (8002858 <HAL_GPIO_Init+0x2e8>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a56      	ldr	r2, [pc, #344]	; (8002858 <HAL_GPIO_Init+0x2e8>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b54      	ldr	r3, [pc, #336]	; (8002858 <HAL_GPIO_Init+0x2e8>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002712:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_GPIO_Init+0x2ec>)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a49      	ldr	r2, [pc, #292]	; (8002860 <HAL_GPIO_Init+0x2f0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x202>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a48      	ldr	r2, [pc, #288]	; (8002864 <HAL_GPIO_Init+0x2f4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x1fe>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a47      	ldr	r2, [pc, #284]	; (8002868 <HAL_GPIO_Init+0x2f8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x1fa>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a46      	ldr	r2, [pc, #280]	; (800286c <HAL_GPIO_Init+0x2fc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x1f6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a45      	ldr	r2, [pc, #276]	; (8002870 <HAL_GPIO_Init+0x300>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x1f2>
 800275e:	2304      	movs	r3, #4
 8002760:	e008      	b.n	8002774 <HAL_GPIO_Init+0x204>
 8002762:	2307      	movs	r3, #7
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x204>
 8002766:	2303      	movs	r3, #3
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x204>
 800276a:	2302      	movs	r3, #2
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x204>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x204>
 8002772:	2300      	movs	r3, #0
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f002 0203 	and.w	r2, r2, #3
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	; (800285c <HAL_GPIO_Init+0x2ec>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_GPIO_Init+0x304>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b6:	4a2f      	ldr	r2, [pc, #188]	; (8002874 <HAL_GPIO_Init+0x304>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HAL_GPIO_Init+0x304>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e0:	4a24      	ldr	r2, [pc, #144]	; (8002874 <HAL_GPIO_Init+0x304>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e6:	4b23      	ldr	r3, [pc, #140]	; (8002874 <HAL_GPIO_Init+0x304>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <HAL_GPIO_Init+0x304>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <HAL_GPIO_Init+0x304>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_GPIO_Init+0x304>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f67f aea2 	bls.w	800258c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40013c00 	.word	0x40013c00

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002894:	e003      	b.n	800289e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	041a      	lsls	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	619a      	str	r2, [r3, #24]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028bc:	887a      	ldrh	r2, [r7, #2]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	041a      	lsls	r2, r3, #16
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	43d9      	mvns	r1, r3
 80028c8:	887b      	ldrh	r3, [r7, #2]
 80028ca:	400b      	ands	r3, r1
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	619a      	str	r2, [r3, #24]
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e267      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d075      	beq.n	80029ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028fe:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d00c      	beq.n	8002924 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290a:	4b85      	ldr	r3, [pc, #532]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002912:	2b08      	cmp	r3, #8
 8002914:	d112      	bne.n	800293c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002916:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002922:	d10b      	bne.n	800293c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d05b      	beq.n	80029e8 <HAL_RCC_OscConfig+0x108>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d157      	bne.n	80029e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e242      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002944:	d106      	bne.n	8002954 <HAL_RCC_OscConfig+0x74>
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a75      	ldr	r2, [pc, #468]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e01d      	b.n	8002990 <HAL_RCC_OscConfig+0xb0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x98>
 800295e:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6f      	ldr	r2, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a6c      	ldr	r2, [pc, #432]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0xb0>
 8002978:	4b69      	ldr	r3, [pc, #420]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a68      	ldr	r2, [pc, #416]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800297e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800298a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff f90a 	bl	8001bb0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7ff f906 	bl	8001bb0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e207      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0xc0>
 80029be:	e014      	b.n	80029ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff f8f6 	bl	8001bb0 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff f8f2 	bl	8001bb0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1f3      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0xe8>
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d11c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d116      	bne.n	8002a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_RCC_OscConfig+0x152>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e1c7      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4937      	ldr	r1, [pc, #220]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e03a      	b.n	8002abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_OscConfig+0x244>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7ff f8ab 	bl	8001bb0 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5e:	f7ff f8a7 	bl	8001bb0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e1a8      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4925      	ldr	r1, [pc, #148]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
 8002a90:	e015      	b.n	8002abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x244>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7ff f88a 	bl	8001bb0 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7ff f886 	bl	8001bb0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e187      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d036      	beq.n	8002b38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x248>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7ff f86a 	bl	8001bb0 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7ff f866 	bl	8001bb0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e167      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x200>
 8002afe:	e01b      	b.n	8002b38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x248>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7ff f853 	bl	8001bb0 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	e00e      	b.n	8002b2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0e:	f7ff f84f 	bl	8001bb0 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d907      	bls.n	8002b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e150      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	42470000 	.word	0x42470000
 8002b28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	4b88      	ldr	r3, [pc, #544]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ea      	bne.n	8002b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8097 	beq.w	8002c74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b81      	ldr	r3, [pc, #516]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b7d      	ldr	r3, [pc, #500]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a7c      	ldr	r2, [pc, #496]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b7a      	ldr	r3, [pc, #488]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	4b77      	ldr	r3, [pc, #476]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d118      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b82:	4b74      	ldr	r3, [pc, #464]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a73      	ldr	r2, [pc, #460]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8e:	f7ff f80f 	bl	8001bb0 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b96:	f7ff f80b 	bl	8001bb0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e10c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x2ea>
 8002bbc:	4b64      	ldr	r3, [pc, #400]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a63      	ldr	r2, [pc, #396]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCC_OscConfig+0x324>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x30c>
 8002bd2:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a5e      	ldr	r2, [pc, #376]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bde:	4b5c      	ldr	r3, [pc, #368]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a5b      	ldr	r2, [pc, #364]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0x324>
 8002bec:	4b58      	ldr	r3, [pc, #352]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a57      	ldr	r2, [pc, #348]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	4b55      	ldr	r3, [pc, #340]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4a54      	ldr	r2, [pc, #336]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	f023 0304 	bic.w	r3, r3, #4
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe ffd0 	bl	8001bb0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe ffcc 	bl	8001bb0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e0cb      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2a:	4b49      	ldr	r3, [pc, #292]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ee      	beq.n	8002c14 <HAL_RCC_OscConfig+0x334>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7fe ffba 	bl	8001bb0 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe ffb6 	bl	8001bb0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0b5      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c56:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ee      	bne.n	8002c40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c68:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a1 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d05c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d141      	bne.n	8002d16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_OscConfig+0x478>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe ff8a 	bl	8001bb0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe ff86 	bl	8001bb0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e087      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	491b      	ldr	r1, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCC_OscConfig+0x478>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe ff5f 	bl	8001bb0 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fe ff5b 	bl	8001bb0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e05c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x416>
 8002d14:	e054      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_RCC_OscConfig+0x478>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe ff48 	bl	8001bb0 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe ff44 	bl	8001bb0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e045      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x444>
 8002d42:	e03d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e038      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40007000 	.word	0x40007000
 8002d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x4ec>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d028      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d121      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d11a      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d111      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	3b01      	subs	r3, #1
 8002da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0cc      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b68      	ldr	r3, [pc, #416]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d90c      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a52      	ldr	r2, [pc, #328]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	494d      	ldr	r1, [pc, #308]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d044      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d119      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e06f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e067      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4934      	ldr	r1, [pc, #208]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fe76 	bl	8001bb0 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7fe fe72 	bl	8001bb0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e04f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 020c 	and.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1eb      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d20c      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4916      	ldr	r1, [pc, #88]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f56:	f000 f821 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490a      	ldr	r1, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe fdd6 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023c00 	.word	0x40023c00
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	0800545c 	.word	0x0800545c
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa0:	b090      	sub	sp, #64	; 0x40
 8002fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb4:	4b59      	ldr	r3, [pc, #356]	; (800311c <HAL_RCC_GetSysClockFreq+0x180>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x40>
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	f200 80a1 	bhi.w	8003108 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fce:	e09b      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fd4:	e09b      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd6:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fda:	e098      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fdc:	4b4f      	ldr	r3, [pc, #316]	; (800311c <HAL_RCC_GetSysClockFreq+0x180>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe6:	4b4d      	ldr	r3, [pc, #308]	; (800311c <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d028      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff2:	4b4a      	ldr	r3, [pc, #296]	; (800311c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	099b      	lsrs	r3, r3, #6
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	623b      	str	r3, [r7, #32]
 8002ffc:	627a      	str	r2, [r7, #36]	; 0x24
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003004:	2100      	movs	r1, #0
 8003006:	4b47      	ldr	r3, [pc, #284]	; (8003124 <HAL_RCC_GetSysClockFreq+0x188>)
 8003008:	fb03 f201 	mul.w	r2, r3, r1
 800300c:	2300      	movs	r3, #0
 800300e:	fb00 f303 	mul.w	r3, r0, r3
 8003012:	4413      	add	r3, r2
 8003014:	4a43      	ldr	r2, [pc, #268]	; (8003124 <HAL_RCC_GetSysClockFreq+0x188>)
 8003016:	fba0 1202 	umull	r1, r2, r0, r2
 800301a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800301c:	460a      	mov	r2, r1
 800301e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003022:	4413      	add	r3, r2
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003028:	2200      	movs	r2, #0
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	61fa      	str	r2, [r7, #28]
 800302e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003032:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003036:	f7fd fbd5 	bl	80007e4 <__aeabi_uldivmod>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4613      	mov	r3, r2
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003042:	e053      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003044:	4b35      	ldr	r3, [pc, #212]	; (800311c <HAL_RCC_GetSysClockFreq+0x180>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	2200      	movs	r2, #0
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	617a      	str	r2, [r7, #20]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003056:	f04f 0b00 	mov.w	fp, #0
 800305a:	4652      	mov	r2, sl
 800305c:	465b      	mov	r3, fp
 800305e:	f04f 0000 	mov.w	r0, #0
 8003062:	f04f 0100 	mov.w	r1, #0
 8003066:	0159      	lsls	r1, r3, #5
 8003068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306c:	0150      	lsls	r0, r2, #5
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	ebb2 080a 	subs.w	r8, r2, sl
 8003076:	eb63 090b 	sbc.w	r9, r3, fp
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003086:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800308a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800308e:	ebb2 0408 	subs.w	r4, r2, r8
 8003092:	eb63 0509 	sbc.w	r5, r3, r9
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	00eb      	lsls	r3, r5, #3
 80030a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a4:	00e2      	lsls	r2, r4, #3
 80030a6:	4614      	mov	r4, r2
 80030a8:	461d      	mov	r5, r3
 80030aa:	eb14 030a 	adds.w	r3, r4, sl
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	eb45 030b 	adc.w	r3, r5, fp
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030c2:	4629      	mov	r1, r5
 80030c4:	028b      	lsls	r3, r1, #10
 80030c6:	4621      	mov	r1, r4
 80030c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030cc:	4621      	mov	r1, r4
 80030ce:	028a      	lsls	r2, r1, #10
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	2200      	movs	r2, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	60fa      	str	r2, [r7, #12]
 80030dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030e0:	f7fd fb80 	bl	80007e4 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4613      	mov	r3, r2
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_GetSysClockFreq+0x180>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	3301      	adds	r3, #1
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80030fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003106:	e002      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetSysClockFreq+0x184>)
 800310a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800310c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003110:	4618      	mov	r0, r3
 8003112:	3740      	adds	r7, #64	; 0x40
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	00f42400 	.word	0x00f42400
 8003124:	017d7840 	.word	0x017d7840

08003128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_RCC_GetHCLKFreq+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000000 	.word	0x20000000

08003140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003144:	f7ff fff0 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	0a9b      	lsrs	r3, r3, #10
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4903      	ldr	r1, [pc, #12]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	0800546c 	.word	0x0800546c

08003168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800316c:	f7ff ffdc 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	0b5b      	lsrs	r3, r3, #13
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4903      	ldr	r1, [pc, #12]	; (800318c <HAL_RCC_GetPCLK2Freq+0x24>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	0800546c 	.word	0x0800546c

08003190 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003196:	f7fe fd0b 	bl	8001bb0 <HAL_GetTick>
 800319a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800319c:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCC_DeInit+0x184>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a5c      	ldr	r2, [pc, #368]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031aa:	f7fe fd01 	bl	8001bb0 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0a7      	b.n	800330c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80031c8:	4b52      	ldr	r3, [pc, #328]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a51      	ldr	r2, [pc, #324]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80031ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80031d4:	f7fe fcec 	bl	8001bb0 <HAL_GetTick>
 80031d8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80031da:	4b4e      	ldr	r3, [pc, #312]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e2:	f7fe fce5 	bl	8001bb0 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e089      	b.n	800330c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80031f8:	4b46      	ldr	r3, [pc, #280]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ee      	bne.n	80031e2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003204:	f7fe fcd4 	bl	8001bb0 <HAL_GetTick>
 8003208:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800320a:	4b42      	ldr	r3, [pc, #264]	; (8003314 <HAL_RCC_DeInit+0x184>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a41      	ldr	r2, [pc, #260]	; (8003314 <HAL_RCC_DeInit+0x184>)
 8003210:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003214:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe fcca 	bl	8001bb0 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e070      	b.n	800330c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_RCC_DeInit+0x184>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003236:	f7fe fcbb 	bl	8001bb0 <HAL_GetTick>
 800323a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800323c:	4b35      	ldr	r3, [pc, #212]	; (8003314 <HAL_RCC_DeInit+0x184>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a34      	ldr	r2, [pc, #208]	; (8003314 <HAL_RCC_DeInit+0x184>)
 8003242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003246:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe fcb1 	bl	8001bb0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e057      	b.n	800330c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_DeInit+0x184>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003268:	f7fe fca2 	bl	8001bb0 <HAL_GetTick>
 800326c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800326e:	4b29      	ldr	r3, [pc, #164]	; (8003314 <HAL_RCC_DeInit+0x184>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a28      	ldr	r2, [pc, #160]	; (8003314 <HAL_RCC_DeInit+0x184>)
 8003274:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003278:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800327c:	f7fe fc98 	bl	8001bb0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e03e      	b.n	800330c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_RCC_DeInit+0x184>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_DeInit+0x184>)
 800329c:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <HAL_RCC_DeInit+0x188>)
 800329e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80032a0:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032a2:	4a1e      	ldr	r2, [pc, #120]	; (800331c <HAL_RCC_DeInit+0x18c>)
 80032a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a19      	ldr	r2, [pc, #100]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032ae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80032b2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a16      	ldr	r2, [pc, #88]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032be:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a13      	ldr	r2, [pc, #76]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032c6:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80032ca:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032d6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032dc:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_RCC_DeInit+0x184>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ee:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_DeInit+0x190>)
 80032f2:	4a0c      	ldr	r2, [pc, #48]	; (8003324 <HAL_RCC_DeInit+0x194>)
 80032f4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_RCC_DeInit+0x198>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fc14 	bl	8001b28 <HAL_InitTick>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800330a:	2300      	movs	r3, #0
  }
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	04003010 	.word	0x04003010
 800331c:	20003000 	.word	0x20003000
 8003320:	20000000 	.word	0x20000000
 8003324:	00f42400 	.word	0x00f42400
 8003328:	20000004 	.word	0x20000004

0800332c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e041      	b.n	80033c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe faa8 	bl	80018a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f000 fdaa 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d001      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e044      	b.n	800346e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1e      	ldr	r2, [pc, #120]	; (800347c <HAL_TIM_Base_Start_IT+0xb0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d018      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x6c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340e:	d013      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x6c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <HAL_TIM_Base_Start_IT+0xb4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00e      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x6c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a19      	ldr	r2, [pc, #100]	; (8003484 <HAL_TIM_Base_Start_IT+0xb8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x6c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a17      	ldr	r2, [pc, #92]	; (8003488 <HAL_TIM_Base_Start_IT+0xbc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x6c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a16      	ldr	r2, [pc, #88]	; (800348c <HAL_TIM_Base_Start_IT+0xc0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d111      	bne.n	800345c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b06      	cmp	r3, #6
 8003448:	d010      	beq.n	800346c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	e007      	b.n	800346c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40010000 	.word	0x40010000
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40014000 	.word	0x40014000

08003490 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e041      	b.n	8003526 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fe f9d4 	bl	8001864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f000 fcf8 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <HAL_TIM_PWM_Start+0x24>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e022      	b.n	800359a <HAL_TIM_PWM_Start+0x6a>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b04      	cmp	r3, #4
 8003558:	d109      	bne.n	800356e <HAL_TIM_PWM_Start+0x3e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e015      	b.n	800359a <HAL_TIM_PWM_Start+0x6a>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d109      	bne.n	8003588 <HAL_TIM_PWM_Start+0x58>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e008      	b.n	800359a <HAL_TIM_PWM_Start+0x6a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e068      	b.n	8003674 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0x82>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035b0:	e013      	b.n	80035da <HAL_TIM_PWM_Start+0xaa>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0x92>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c0:	e00b      	b.n	80035da <HAL_TIM_PWM_Start+0xaa>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0xa2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d0:	e003      	b.n	80035da <HAL_TIM_PWM_Start+0xaa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2201      	movs	r2, #1
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 ffa4 	bl	8004530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a23      	ldr	r2, [pc, #140]	; (800367c <HAL_TIM_PWM_Start+0x14c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d107      	bne.n	8003602 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_TIM_PWM_Start+0x14c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_TIM_PWM_Start+0x10e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d013      	beq.n	800363e <HAL_TIM_PWM_Start+0x10e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_TIM_PWM_Start+0x150>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_TIM_PWM_Start+0x10e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a17      	ldr	r2, [pc, #92]	; (8003684 <HAL_TIM_PWM_Start+0x154>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_TIM_PWM_Start+0x10e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_TIM_PWM_Start+0x158>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_TIM_PWM_Start+0x10e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a14      	ldr	r2, [pc, #80]	; (800368c <HAL_TIM_PWM_Start+0x15c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d111      	bne.n	8003662 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b06      	cmp	r3, #6
 800364e:	d010      	beq.n	8003672 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003660:	e007      	b.n	8003672 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0201 	orr.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40010000 	.word	0x40010000
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40014000 	.word	0x40014000

08003690 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e041      	b.n	8003726 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fe f886 	bl	80017c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 fbf8 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <HAL_TIM_IC_Start_IT+0x1e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800374a:	b2db      	uxtb	r3, r3
 800374c:	e013      	b.n	8003776 <HAL_TIM_IC_Start_IT+0x46>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d104      	bne.n	800375e <HAL_TIM_IC_Start_IT+0x2e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e00b      	b.n	8003776 <HAL_TIM_IC_Start_IT+0x46>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d104      	bne.n	800376e <HAL_TIM_IC_Start_IT+0x3e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e003      	b.n	8003776 <HAL_TIM_IC_Start_IT+0x46>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <HAL_TIM_IC_Start_IT+0x58>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e013      	b.n	80037b0 <HAL_TIM_IC_Start_IT+0x80>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d104      	bne.n	8003798 <HAL_TIM_IC_Start_IT+0x68>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e00b      	b.n	80037b0 <HAL_TIM_IC_Start_IT+0x80>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b08      	cmp	r3, #8
 800379c:	d104      	bne.n	80037a8 <HAL_TIM_IC_Start_IT+0x78>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e003      	b.n	80037b0 <HAL_TIM_IC_Start_IT+0x80>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037b2:	7bbb      	ldrb	r3, [r7, #14]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037b8:	7b7b      	ldrb	r3, [r7, #13]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d001      	beq.n	80037c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0c2      	b.n	8003948 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_IC_Start_IT+0xa2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d0:	e013      	b.n	80037fa <HAL_TIM_IC_Start_IT+0xca>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_IC_Start_IT+0xb2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e0:	e00b      	b.n	80037fa <HAL_TIM_IC_Start_IT+0xca>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_IC_Start_IT+0xc2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f0:	e003      	b.n	80037fa <HAL_TIM_IC_Start_IT+0xca>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_TIM_IC_Start_IT+0xda>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003808:	e013      	b.n	8003832 <HAL_TIM_IC_Start_IT+0x102>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d104      	bne.n	800381a <HAL_TIM_IC_Start_IT+0xea>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003818:	e00b      	b.n	8003832 <HAL_TIM_IC_Start_IT+0x102>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d104      	bne.n	800382a <HAL_TIM_IC_Start_IT+0xfa>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003828:	e003      	b.n	8003832 <HAL_TIM_IC_Start_IT+0x102>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d841      	bhi.n	80038bc <HAL_TIM_IC_Start_IT+0x18c>
 8003838:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <HAL_TIM_IC_Start_IT+0x110>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003875 	.word	0x08003875
 8003844:	080038bd 	.word	0x080038bd
 8003848:	080038bd 	.word	0x080038bd
 800384c:	080038bd 	.word	0x080038bd
 8003850:	08003887 	.word	0x08003887
 8003854:	080038bd 	.word	0x080038bd
 8003858:	080038bd 	.word	0x080038bd
 800385c:	080038bd 	.word	0x080038bd
 8003860:	08003899 	.word	0x08003899
 8003864:	080038bd 	.word	0x080038bd
 8003868:	080038bd 	.word	0x080038bd
 800386c:	080038bd 	.word	0x080038bd
 8003870:	080038ab 	.word	0x080038ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0202 	orr.w	r2, r2, #2
 8003882:	60da      	str	r2, [r3, #12]
      break;
 8003884:	e01d      	b.n	80038c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0204 	orr.w	r2, r2, #4
 8003894:	60da      	str	r2, [r3, #12]
      break;
 8003896:	e014      	b.n	80038c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0208 	orr.w	r2, r2, #8
 80038a6:	60da      	str	r2, [r3, #12]
      break;
 80038a8:	e00b      	b.n	80038c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0210 	orr.w	r2, r2, #16
 80038b8:	60da      	str	r2, [r3, #12]
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d13e      	bne.n	8003946 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2201      	movs	r2, #1
 80038ce:	6839      	ldr	r1, [r7, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fe2d 	bl	8004530 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <HAL_TIM_IC_Start_IT+0x220>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d018      	beq.n	8003912 <HAL_TIM_IC_Start_IT+0x1e2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d013      	beq.n	8003912 <HAL_TIM_IC_Start_IT+0x1e2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a19      	ldr	r2, [pc, #100]	; (8003954 <HAL_TIM_IC_Start_IT+0x224>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00e      	beq.n	8003912 <HAL_TIM_IC_Start_IT+0x1e2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a17      	ldr	r2, [pc, #92]	; (8003958 <HAL_TIM_IC_Start_IT+0x228>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d009      	beq.n	8003912 <HAL_TIM_IC_Start_IT+0x1e2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a16      	ldr	r2, [pc, #88]	; (800395c <HAL_TIM_IC_Start_IT+0x22c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_TIM_IC_Start_IT+0x1e2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <HAL_TIM_IC_Start_IT+0x230>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d111      	bne.n	8003936 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b06      	cmp	r3, #6
 8003922:	d010      	beq.n	8003946 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003934:	e007      	b.n	8003946 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40010000 	.word	0x40010000
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40014000 	.word	0x40014000

08003964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d020      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01b      	beq.n	80039c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0202 	mvn.w	r2, #2
 8003998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f001 fc82 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 80039b4:	e005      	b.n	80039c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fa66 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fa6d 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d020      	beq.n	8003a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01b      	beq.n	8003a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0204 	mvn.w	r2, #4
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f001 fc5c 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fa40 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fa47 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d020      	beq.n	8003a60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01b      	beq.n	8003a60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0208 	mvn.w	r2, #8
 8003a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2204      	movs	r2, #4
 8003a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f001 fc36 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa1a 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa21 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d020      	beq.n	8003aac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01b      	beq.n	8003aac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0210 	mvn.w	r2, #16
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2208      	movs	r2, #8
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f001 fc10 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f9f4 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f9fb 	bl	8003e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0201 	mvn.w	r2, #1
 8003ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd fbbc 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00c      	beq.n	8003af4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fdbc 	bl	800466c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00c      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9cc 	bl	8003eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0220 	mvn.w	r2, #32
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fd8e 	bl	8004658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e088      	b.n	8003c74 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003b80:	f000 fbb8 	bl	80042f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 020c 	bic.w	r2, r2, #12
 8003b92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	619a      	str	r2, [r3, #24]
 8003ba6:	e060      	b.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d11c      	bne.n	8003be8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003bbe:	f000 fc01 	bl	80043c4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6999      	ldr	r1, [r3, #24]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	619a      	str	r2, [r3, #24]
 8003be6:	e040      	b.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d11b      	bne.n	8003c26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003bfe:	f000 fc1e 	bl	800443e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 020c 	bic.w	r2, r2, #12
 8003c10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69d9      	ldr	r1, [r3, #28]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	61da      	str	r2, [r3, #28]
 8003c24:	e021      	b.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d11c      	bne.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003c3c:	f000 fc3b 	bl	80044b6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69d9      	ldr	r1, [r3, #28]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	021a      	lsls	r2, r3, #8
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	61da      	str	r2, [r3, #28]
 8003c64:	e001      	b.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e0ae      	b.n	8003df8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	f200 809f 	bhi.w	8003de8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003de9 	.word	0x08003de9
 8003cb8:	08003de9 	.word	0x08003de9
 8003cbc:	08003de9 	.word	0x08003de9
 8003cc0:	08003d25 	.word	0x08003d25
 8003cc4:	08003de9 	.word	0x08003de9
 8003cc8:	08003de9 	.word	0x08003de9
 8003ccc:	08003de9 	.word	0x08003de9
 8003cd0:	08003d67 	.word	0x08003d67
 8003cd4:	08003de9 	.word	0x08003de9
 8003cd8:	08003de9 	.word	0x08003de9
 8003cdc:	08003de9 	.word	0x08003de9
 8003ce0:	08003da7 	.word	0x08003da7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f976 	bl	8003fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0208 	orr.w	r2, r2, #8
 8003cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0204 	bic.w	r2, r2, #4
 8003d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6999      	ldr	r1, [r3, #24]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	619a      	str	r2, [r3, #24]
      break;
 8003d22:	e064      	b.n	8003dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f9bc 	bl	80040a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6999      	ldr	r1, [r3, #24]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	021a      	lsls	r2, r3, #8
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	619a      	str	r2, [r3, #24]
      break;
 8003d64:	e043      	b.n	8003dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fa07 	bl	8004180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0208 	orr.w	r2, r2, #8
 8003d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0204 	bic.w	r2, r2, #4
 8003d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69d9      	ldr	r1, [r3, #28]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	61da      	str	r2, [r3, #28]
      break;
 8003da4:	e023      	b.n	8003dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fa51 	bl	8004254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69d9      	ldr	r1, [r3, #28]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	021a      	lsls	r2, r3, #8
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	61da      	str	r2, [r3, #28]
      break;
 8003de6:	e002      	b.n	8003dee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
      break;
 8003dec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d831      	bhi.n	8003e78 <HAL_TIM_ReadCapturedValue+0x78>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e79 	.word	0x08003e79
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e5b 	.word	0x08003e5b
 8003e30:	08003e79 	.word	0x08003e79
 8003e34:	08003e79 	.word	0x08003e79
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e6f 	.word	0x08003e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	60fb      	str	r3, [r7, #12]

      break;
 8003e58:	e00f      	b.n	8003e7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	60fb      	str	r3, [r7, #12]

      break;
 8003e62:	e00a      	b.n	8003e7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	60fb      	str	r3, [r7, #12]

      break;
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	60fb      	str	r3, [r7, #12]

      break;
 8003e76:	e000      	b.n	8003e7a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e78:	bf00      	nop
  }

  return tmpreg;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3a      	ldr	r2, [pc, #232]	; (8003fc0 <TIM_Base_SetConfig+0xfc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00f      	beq.n	8003efc <TIM_Base_SetConfig+0x38>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d00b      	beq.n	8003efc <TIM_Base_SetConfig+0x38>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a37      	ldr	r2, [pc, #220]	; (8003fc4 <TIM_Base_SetConfig+0x100>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_Base_SetConfig+0x38>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a36      	ldr	r2, [pc, #216]	; (8003fc8 <TIM_Base_SetConfig+0x104>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_Base_SetConfig+0x38>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a35      	ldr	r2, [pc, #212]	; (8003fcc <TIM_Base_SetConfig+0x108>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2b      	ldr	r2, [pc, #172]	; (8003fc0 <TIM_Base_SetConfig+0xfc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01b      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d017      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <TIM_Base_SetConfig+0x100>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <TIM_Base_SetConfig+0x104>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00f      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <TIM_Base_SetConfig+0x108>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <TIM_Base_SetConfig+0x10c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <TIM_Base_SetConfig+0x110>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_Base_SetConfig+0x8a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <TIM_Base_SetConfig+0x114>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d108      	bne.n	8003f60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <TIM_Base_SetConfig+0xfc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d103      	bne.n	8003f94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	611a      	str	r2, [r3, #16]
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40000c00 	.word	0x40000c00
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40014400 	.word	0x40014400
 8003fd8:	40014800 	.word	0x40014800

08003fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f023 0201 	bic.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0302 	bic.w	r3, r3, #2
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <TIM_OC1_SetConfig+0xc8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10c      	bne.n	8004052 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0308 	bic.w	r3, r3, #8
 800403e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <TIM_OC1_SetConfig+0xc8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d111      	bne.n	800407e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40010000 	.word	0x40010000

080040a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 0210 	bic.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0320 	bic.w	r3, r3, #32
 80040f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a1e      	ldr	r2, [pc, #120]	; (800417c <TIM_OC2_SetConfig+0xd4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10d      	bne.n	8004124 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a15      	ldr	r2, [pc, #84]	; (800417c <TIM_OC2_SetConfig+0xd4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d113      	bne.n	8004154 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000

08004180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <TIM_OC3_SetConfig+0xd0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d10d      	bne.n	80041fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a14      	ldr	r2, [pc, #80]	; (8004250 <TIM_OC3_SetConfig+0xd0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d113      	bne.n	800422a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40010000 	.word	0x40010000

08004254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	031b      	lsls	r3, r3, #12
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <TIM_OC4_SetConfig+0x9c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d109      	bne.n	80042c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	019b      	lsls	r3, r3, #6
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000

080042f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f023 0201 	bic.w	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <TIM_TI1_SetConfig+0xbc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004328:	d00f      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <TIM_TI1_SetConfig+0xc0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00b      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <TIM_TI1_SetConfig+0xc4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <TIM_TI1_SetConfig+0xc8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_TI1_SetConfig+0x56>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <TIM_TI1_SetConfig+0xcc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d101      	bne.n	800434e <TIM_TI1_SetConfig+0x5a>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <TIM_TI1_SetConfig+0x5c>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e003      	b.n	800436e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	b2db      	uxtb	r3, r3
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f023 030a 	bic.w	r3, r3, #10
 8004388:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f003 030a 	and.w	r3, r3, #10
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40014000 	.word	0x40014000

080043c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f023 0210 	bic.w	r2, r3, #16
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	031b      	lsls	r3, r3, #12
 8004408:	b29b      	uxth	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004416:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800443e:	b480      	push	{r7}
 8004440:	b087      	sub	sp, #28
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	b2db      	uxtb	r3, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800448e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004508:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	031b      	lsls	r3, r3, #12
 800450e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2201      	movs	r2, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	43db      	mvns	r3, r3
 8004552:	401a      	ands	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004590:	2302      	movs	r3, #2
 8004592:	e050      	b.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d018      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e0:	d013      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a18      	ldr	r2, [pc, #96]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00e      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a16      	ldr	r2, [pc, #88]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a15      	ldr	r2, [pc, #84]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a13      	ldr	r2, [pc, #76]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d10c      	bne.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	4313      	orrs	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00
 8004654:	40014000 	.word	0x40014000

08004658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e042      	b.n	8004718 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fd f9aa 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	; 0x24
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fa09 	bl	8004adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	; 0x28
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b20      	cmp	r3, #32
 800473e:	d175      	bne.n	800482c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Transmit+0x2c>
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e06e      	b.n	800482e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2221      	movs	r2, #33	; 0x21
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800475e:	f7fd fa27 	bl	8001bb0 <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004778:	d108      	bne.n	800478c <HAL_UART_Transmit+0x6c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d104      	bne.n	800478c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	e003      	b.n	8004794 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004794:	e02e      	b.n	80047f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2180      	movs	r1, #128	; 0x80
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f8df 	bl	8004964 <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e03a      	b.n	800482e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	3302      	adds	r3, #2
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	e007      	b.n	80047e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	3301      	adds	r3, #1
 80047e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1cb      	bne.n	8004796 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2200      	movs	r2, #0
 8004806:	2140      	movs	r1, #64	; 0x40
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f8ab 	bl	8004964 <UART_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e006      	b.n	800482e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e000      	b.n	800482e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b08a      	sub	sp, #40	; 0x28
 800483a:	af02      	add	r7, sp, #8
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b20      	cmp	r3, #32
 8004854:	f040 8081 	bne.w	800495a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_UART_Receive+0x2e>
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e079      	b.n	800495c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2222      	movs	r2, #34	; 0x22
 8004872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800487c:	f7fd f998 	bl	8001bb0 <HAL_GetTick>
 8004880:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d108      	bne.n	80048aa <HAL_UART_Receive+0x74>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e003      	b.n	80048b2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80048b2:	e047      	b.n	8004944 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2120      	movs	r1, #32
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f850 	bl	8004964 <UART_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e042      	b.n	800495c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10c      	bne.n	80048f6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	3302      	adds	r3, #2
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e01f      	b.n	8004936 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fe:	d007      	beq.n	8004910 <HAL_UART_Receive+0xda>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <HAL_UART_Receive+0xe8>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	b2da      	uxtb	r2, r3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	e008      	b.n	8004930 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800492a:	b2da      	uxtb	r2, r3
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1b2      	bne.n	80048b4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e000      	b.n	800495c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
  }
}
 800495c:	4618      	mov	r0, r3
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004974:	e03b      	b.n	80049ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d037      	beq.n	80049ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497e:	f7fd f917 	bl	8001bb0 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <UART_WaitOnFlagUntilTimeout+0x30>
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e03a      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d023      	beq.n	80049ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b80      	cmp	r3, #128	; 0x80
 80049aa:	d020      	beq.n	80049ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d01d      	beq.n	80049ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d116      	bne.n	80049ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f81d 	bl	8004a16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2208      	movs	r2, #8
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e00f      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4013      	ands	r3, r2
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d0b4      	beq.n	8004976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b095      	sub	sp, #84	; 0x54
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a3e:	643a      	str	r2, [r7, #64]	; 0x40
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e5      	bne.n	8004a1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3314      	adds	r3, #20
 8004a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3314      	adds	r3, #20
 8004a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e5      	bne.n	8004a52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d119      	bne.n	8004ac2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f023 0310 	bic.w	r3, r3, #16
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aae:	61ba      	str	r2, [r7, #24]
 8004ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6979      	ldr	r1, [r7, #20]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	613b      	str	r3, [r7, #16]
   return(result);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ad0:	bf00      	nop
 8004ad2:	3754      	adds	r7, #84	; 0x54
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae0:	b0c0      	sub	sp, #256	; 0x100
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	ea40 0301 	orr.w	r3, r0, r1
 8004b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b34:	f021 010c 	bic.w	r1, r1, #12
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b42:	430b      	orrs	r3, r1
 8004b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	6999      	ldr	r1, [r3, #24]
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	ea40 0301 	orr.w	r3, r0, r1
 8004b62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b8f      	ldr	r3, [pc, #572]	; (8004da8 <UART_SetConfig+0x2cc>)
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d005      	beq.n	8004b7c <UART_SetConfig+0xa0>
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b8d      	ldr	r3, [pc, #564]	; (8004dac <UART_SetConfig+0x2d0>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d104      	bne.n	8004b86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b7c:	f7fe faf4 	bl	8003168 <HAL_RCC_GetPCLK2Freq>
 8004b80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b84:	e003      	b.n	8004b8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7fe fadb 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8004b8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	f040 810c 	bne.w	8004db4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004baa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	1891      	adds	r1, r2, r2
 8004bb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb6:	415b      	adcs	r3, r3
 8004bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	eb12 0801 	adds.w	r8, r2, r1
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	eb43 0901 	adc.w	r9, r3, r1
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bde:	4690      	mov	r8, r2
 8004be0:	4699      	mov	r9, r3
 8004be2:	4623      	mov	r3, r4
 8004be4:	eb18 0303 	adds.w	r3, r8, r3
 8004be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bec:	462b      	mov	r3, r5
 8004bee:	eb49 0303 	adc.w	r3, r9, r3
 8004bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	18db      	adds	r3, r3, r3
 8004c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c10:	4613      	mov	r3, r2
 8004c12:	eb42 0303 	adc.w	r3, r2, r3
 8004c16:	657b      	str	r3, [r7, #84]	; 0x54
 8004c18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c20:	f7fb fde0 	bl	80007e4 <__aeabi_uldivmod>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	011c      	lsls	r4, r3, #4
 8004c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c44:	4642      	mov	r2, r8
 8004c46:	464b      	mov	r3, r9
 8004c48:	1891      	adds	r1, r2, r2
 8004c4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c4c:	415b      	adcs	r3, r3
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c54:	4641      	mov	r1, r8
 8004c56:	eb12 0a01 	adds.w	sl, r2, r1
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c74:	4692      	mov	sl, r2
 8004c76:	469b      	mov	fp, r3
 8004c78:	4643      	mov	r3, r8
 8004c7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c82:	464b      	mov	r3, r9
 8004c84:	eb4b 0303 	adc.w	r3, fp, r3
 8004c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	18db      	adds	r3, r3, r3
 8004ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	eb42 0303 	adc.w	r3, r2, r3
 8004cac:	647b      	str	r3, [r7, #68]	; 0x44
 8004cae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cb6:	f7fb fd95 	bl	80007e4 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	2264      	movs	r2, #100	; 0x64
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	1acb      	subs	r3, r1, r3
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce4:	441c      	add	r4, r3
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d00:	415b      	adcs	r3, r3
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d08:	4641      	mov	r1, r8
 8004d0a:	1851      	adds	r1, r2, r1
 8004d0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d0e:	4649      	mov	r1, r9
 8004d10:	414b      	adcs	r3, r1
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d20:	4659      	mov	r1, fp
 8004d22:	00cb      	lsls	r3, r1, #3
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	00ca      	lsls	r2, r1, #3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	4642      	mov	r2, r8
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	460a      	mov	r2, r1
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	18db      	adds	r3, r3, r3
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d62:	4613      	mov	r3, r2
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d72:	f7fb fd37 	bl	80007e4 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 0207 	and.w	r2, r3, #7
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4422      	add	r2, r4
 8004da2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da4:	e106      	b.n	8004fb4 <UART_SetConfig+0x4d8>
 8004da6:	bf00      	nop
 8004da8:	40011000 	.word	0x40011000
 8004dac:	40011400 	.word	0x40011400
 8004db0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	464b      	mov	r3, r9
 8004dca:	1891      	adds	r1, r2, r2
 8004dcc:	6239      	str	r1, [r7, #32]
 8004dce:	415b      	adcs	r3, r3
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	1854      	adds	r4, r2, r1
 8004dda:	4649      	mov	r1, r9
 8004ddc:	eb43 0501 	adc.w	r5, r3, r1
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	00eb      	lsls	r3, r5, #3
 8004dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dee:	00e2      	lsls	r2, r4, #3
 8004df0:	4614      	mov	r4, r2
 8004df2:	461d      	mov	r5, r3
 8004df4:	4643      	mov	r3, r8
 8004df6:	18e3      	adds	r3, r4, r3
 8004df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	eb45 0303 	adc.w	r3, r5, r3
 8004e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e22:	4629      	mov	r1, r5
 8004e24:	008b      	lsls	r3, r1, #2
 8004e26:	4621      	mov	r1, r4
 8004e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	008a      	lsls	r2, r1, #2
 8004e30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e34:	f7fb fcd6 	bl	80007e4 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4b60      	ldr	r3, [pc, #384]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	011c      	lsls	r4, r3, #4
 8004e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	1891      	adds	r1, r2, r2
 8004e5e:	61b9      	str	r1, [r7, #24]
 8004e60:	415b      	adcs	r3, r3
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e68:	4641      	mov	r1, r8
 8004e6a:	1851      	adds	r1, r2, r1
 8004e6c:	6139      	str	r1, [r7, #16]
 8004e6e:	4649      	mov	r1, r9
 8004e70:	414b      	adcs	r3, r1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e80:	4659      	mov	r1, fp
 8004e82:	00cb      	lsls	r3, r1, #3
 8004e84:	4651      	mov	r1, sl
 8004e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	00ca      	lsls	r2, r1, #3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	4642      	mov	r2, r8
 8004e96:	189b      	adds	r3, r3, r2
 8004e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	460a      	mov	r2, r1
 8004ea0:	eb42 0303 	adc.w	r3, r2, r3
 8004ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	008b      	lsls	r3, r1, #2
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eca:	4641      	mov	r1, r8
 8004ecc:	008a      	lsls	r2, r1, #2
 8004ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ed2:	f7fb fc87 	bl	80007e4 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	4b38      	ldr	r3, [pc, #224]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004ede:	fba3 2301 	umull	r2, r3, r3, r1
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2264      	movs	r2, #100	; 0x64
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	1acb      	subs	r3, r1, r3
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	3332      	adds	r3, #50	; 0x32
 8004ef0:	4a33      	ldr	r2, [pc, #204]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efc:	441c      	add	r4, r3
 8004efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f02:	2200      	movs	r2, #0
 8004f04:	673b      	str	r3, [r7, #112]	; 0x70
 8004f06:	677a      	str	r2, [r7, #116]	; 0x74
 8004f08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	1891      	adds	r1, r2, r2
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	415b      	adcs	r3, r3
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	1851      	adds	r1, r2, r1
 8004f20:	6039      	str	r1, [r7, #0]
 8004f22:	4649      	mov	r1, r9
 8004f24:	414b      	adcs	r3, r1
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f34:	4659      	mov	r1, fp
 8004f36:	00cb      	lsls	r3, r1, #3
 8004f38:	4651      	mov	r1, sl
 8004f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3e:	4651      	mov	r1, sl
 8004f40:	00ca      	lsls	r2, r1, #3
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	4642      	mov	r2, r8
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4e:	464b      	mov	r3, r9
 8004f50:	460a      	mov	r2, r1
 8004f52:	eb42 0303 	adc.w	r3, r2, r3
 8004f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	663b      	str	r3, [r7, #96]	; 0x60
 8004f62:	667a      	str	r2, [r7, #100]	; 0x64
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f70:	4649      	mov	r1, r9
 8004f72:	008b      	lsls	r3, r1, #2
 8004f74:	4641      	mov	r1, r8
 8004f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	008a      	lsls	r2, r1, #2
 8004f7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f82:	f7fb fc2f 	bl	80007e4 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	3332      	adds	r3, #50	; 0x32
 8004f9e:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 020f 	and.w	r2, r3, #15
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4422      	add	r2, r4
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc0:	51eb851f 	.word	0x51eb851f

08004fc4 <Rover_Initialize>:
uint8_t lastSpeed = 0;
uint8_t speed = 0;

/******************************      Software interfaces     ******************************/
void Rover_Initialize(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
	speed = 0;
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <Rover_Initialize+0x3c>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
	lastSpeed = speed;
 8004fce:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <Rover_Initialize+0x3c>)
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <Rover_Initialize+0x40>)
 8004fd4:	701a      	strb	r2, [r3, #0]
	Set_Speed();
 8004fd6:	f000 f8ad 	bl	8005134 <Set_Speed>
	HAL_TIM_PWM_Start(MOTOR_PWM_TIMER, TIM_CHANNEL_1);
 8004fda:	2100      	movs	r1, #0
 8004fdc:	480a      	ldr	r0, [pc, #40]	; (8005008 <Rover_Initialize+0x44>)
 8004fde:	f7fe faa7 	bl	8003530 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_PWM_TIMER, TIM_CHANNEL_2);
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	4808      	ldr	r0, [pc, #32]	; (8005008 <Rover_Initialize+0x44>)
 8004fe6:	f7fe faa3 	bl	8003530 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_PWM_TIMER, TIM_CHANNEL_3);
 8004fea:	2108      	movs	r1, #8
 8004fec:	4806      	ldr	r0, [pc, #24]	; (8005008 <Rover_Initialize+0x44>)
 8004fee:	f7fe fa9f 	bl	8003530 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_PWM_TIMER, TIM_CHANNEL_4);
 8004ff2:	210c      	movs	r1, #12
 8004ff4:	4804      	ldr	r0, [pc, #16]	; (8005008 <Rover_Initialize+0x44>)
 8004ff6:	f7fe fa9b 	bl	8003530 <HAL_TIM_PWM_Start>
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200001e1 	.word	0x200001e1
 8005004:	200001e0 	.word	0x200001e0
 8005008:	200000e4 	.word	0x200000e4

0800500c <Rover_Forward>:

void Rover_Forward(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_FRONT_PIN | MOTOR_RIGHT_FRONT_PIN
 8005010:	2201      	movs	r2, #1
 8005012:	210b      	movs	r1, #11
 8005014:	4803      	ldr	r0, [pc, #12]	; (8005024 <Rover_Forward+0x18>)
 8005016:	f7fd fc2f 	bl	8002878 <HAL_GPIO_WritePin>
					| MOTOR_RIGHT_FRONT_PIN | MOTOR_RIGHT_BACK_PIN, GPIO_PIN_SET);
	Set_Speed();
 800501a:	f000 f88b 	bl	8005134 <Set_Speed>
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40020000 	.word	0x40020000

08005028 <Rover_Backward>:

void Rover_Backward(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_FRONT_PIN | MOTOR_RIGHT_FRONT_PIN
 800502c:	2200      	movs	r2, #0
 800502e:	210b      	movs	r1, #11
 8005030:	4803      	ldr	r0, [pc, #12]	; (8005040 <Rover_Backward+0x18>)
 8005032:	f7fd fc21 	bl	8002878 <HAL_GPIO_WritePin>
					| MOTOR_RIGHT_FRONT_PIN | MOTOR_RIGHT_BACK_PIN, GPIO_PIN_RESET);
	Set_Speed();
 8005036:	f000 f87d 	bl	8005134 <Set_Speed>
}
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40020000 	.word	0x40020000

08005044 <Rover_Right>:

void Rover_Right(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_FRONT_PIN | MOTOR_LEFT_BACK_PIN, GPIO_PIN_SET);
 8005048:	2201      	movs	r2, #1
 800504a:	2105      	movs	r1, #5
 800504c:	4805      	ldr	r0, [pc, #20]	; (8005064 <Rover_Right+0x20>)
 800504e:	f7fd fc13 	bl	8002878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_RIGHT_FRONT_PIN | MOTOR_RIGHT_BACK_PIN, GPIO_PIN_RESET);
 8005052:	2200      	movs	r2, #0
 8005054:	210a      	movs	r1, #10
 8005056:	4803      	ldr	r0, [pc, #12]	; (8005064 <Rover_Right+0x20>)
 8005058:	f7fd fc0e 	bl	8002878 <HAL_GPIO_WritePin>
	Set_Speed();
 800505c:	f000 f86a 	bl	8005134 <Set_Speed>
}
 8005060:	bf00      	nop
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40020000 	.word	0x40020000

08005068 <Rover_Left>:

void Rover_Left(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_FRONT_PIN | MOTOR_LEFT_BACK_PIN, GPIO_PIN_RESET);
 800506c:	2200      	movs	r2, #0
 800506e:	2105      	movs	r1, #5
 8005070:	4805      	ldr	r0, [pc, #20]	; (8005088 <Rover_Left+0x20>)
 8005072:	f7fd fc01 	bl	8002878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_RIGHT_FRONT_PIN | MOTOR_RIGHT_BACK_PIN, GPIO_PIN_SET);
 8005076:	2201      	movs	r2, #1
 8005078:	210a      	movs	r1, #10
 800507a:	4803      	ldr	r0, [pc, #12]	; (8005088 <Rover_Left+0x20>)
 800507c:	f7fd fbfc 	bl	8002878 <HAL_GPIO_WritePin>
	Set_Speed();
 8005080:	f000 f858 	bl	8005134 <Set_Speed>
}
 8005084:	bf00      	nop
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40020000 	.word	0x40020000

0800508c <Rover_Stop>:

void Rover_Stop(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
	adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_1, 0);
 8005090:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80050c4 <Rover_Stop+0x38>
 8005094:	2100      	movs	r1, #0
 8005096:	480c      	ldr	r0, [pc, #48]	; (80050c8 <Rover_Stop+0x3c>)
 8005098:	f000 f88c 	bl	80051b4 <adjust_PWM_dutyCycle>
	adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_2, 0);
 800509c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80050c4 <Rover_Stop+0x38>
 80050a0:	2104      	movs	r1, #4
 80050a2:	4809      	ldr	r0, [pc, #36]	; (80050c8 <Rover_Stop+0x3c>)
 80050a4:	f000 f886 	bl	80051b4 <adjust_PWM_dutyCycle>
	adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_3, 0);
 80050a8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80050c4 <Rover_Stop+0x38>
 80050ac:	2108      	movs	r1, #8
 80050ae:	4806      	ldr	r0, [pc, #24]	; (80050c8 <Rover_Stop+0x3c>)
 80050b0:	f000 f880 	bl	80051b4 <adjust_PWM_dutyCycle>
	adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_4, 0);
 80050b4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80050c4 <Rover_Stop+0x38>
 80050b8:	210c      	movs	r1, #12
 80050ba:	4803      	ldr	r0, [pc, #12]	; (80050c8 <Rover_Stop+0x3c>)
 80050bc:	f000 f87a 	bl	80051b4 <adjust_PWM_dutyCycle>
}
 80050c0:	bf00      	nop
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	00000000 	.word	0x00000000
 80050c8:	200000e4 	.word	0x200000e4

080050cc <Rover_Change_Speed>:


void Rover_Change_Speed(float copySpeed)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	ed87 0a01 	vstr	s0, [r7, #4]
	if((uint8_t)copySpeed != speed && (uint8_t)copySpeed <= 100 && (uint8_t)copySpeed >= 0){
 80050d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80050da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050de:	edc7 7a00 	vstr	s15, [r7]
 80050e2:	783b      	ldrb	r3, [r7, #0]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <Rover_Change_Speed+0x60>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d017      	beq.n	800511e <Rover_Change_Speed+0x52>
 80050ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80050f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050f6:	edc7 7a00 	vstr	s15, [r7]
 80050fa:	783b      	ldrb	r3, [r7, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b64      	cmp	r3, #100	; 0x64
 8005100:	d80d      	bhi.n	800511e <Rover_Change_Speed+0x52>
		lastSpeed = speed;
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <Rover_Change_Speed+0x60>)
 8005104:	781a      	ldrb	r2, [r3, #0]
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <Rover_Change_Speed+0x64>)
 8005108:	701a      	strb	r2, [r3, #0]
		speed = copySpeed;
 800510a:	edd7 7a01 	vldr	s15, [r7, #4]
 800510e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005112:	edc7 7a00 	vstr	s15, [r7]
 8005116:	783b      	ldrb	r3, [r7, #0]
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b04      	ldr	r3, [pc, #16]	; (800512c <Rover_Change_Speed+0x60>)
 800511c:	701a      	strb	r2, [r3, #0]
	}
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	200001e1 	.word	0x200001e1
 8005130:	200001e0 	.word	0x200001e0

08005134 <Set_Speed>:

static void Set_Speed(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
	if(lastSpeed != speed)
 8005138:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <Set_Speed+0x74>)
 800513a:	781a      	ldrb	r2, [r3, #0]
 800513c:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <Set_Speed+0x78>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d02f      	beq.n	80051a4 <Set_Speed+0x70>
	{
		adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_1, speed);
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <Set_Speed+0x78>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005150:	eeb0 0a67 	vmov.f32	s0, s15
 8005154:	2100      	movs	r1, #0
 8005156:	4816      	ldr	r0, [pc, #88]	; (80051b0 <Set_Speed+0x7c>)
 8005158:	f000 f82c 	bl	80051b4 <adjust_PWM_dutyCycle>
		adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_2, speed);
 800515c:	4b13      	ldr	r3, [pc, #76]	; (80051ac <Set_Speed+0x78>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005168:	eeb0 0a67 	vmov.f32	s0, s15
 800516c:	2104      	movs	r1, #4
 800516e:	4810      	ldr	r0, [pc, #64]	; (80051b0 <Set_Speed+0x7c>)
 8005170:	f000 f820 	bl	80051b4 <adjust_PWM_dutyCycle>
		adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_3, speed);
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <Set_Speed+0x78>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005180:	eeb0 0a67 	vmov.f32	s0, s15
 8005184:	2108      	movs	r1, #8
 8005186:	480a      	ldr	r0, [pc, #40]	; (80051b0 <Set_Speed+0x7c>)
 8005188:	f000 f814 	bl	80051b4 <adjust_PWM_dutyCycle>
		adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_4, speed);
 800518c:	4b07      	ldr	r3, [pc, #28]	; (80051ac <Set_Speed+0x78>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	ee07 3a90 	vmov	s15, r3
 8005194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005198:	eeb0 0a67 	vmov.f32	s0, s15
 800519c:	210c      	movs	r1, #12
 800519e:	4804      	ldr	r0, [pc, #16]	; (80051b0 <Set_Speed+0x7c>)
 80051a0:	f000 f808 	bl	80051b4 <adjust_PWM_dutyCycle>
	}
}
 80051a4:	bf00      	nop
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	200001e0 	.word	0x200001e0
 80051ac:	200001e1 	.word	0x200001e1
 80051b0:	200000e4 	.word	0x200000e4

080051b4 <adjust_PWM_dutyCycle>:


static void adjust_PWM_dutyCycle(TIM_HandleTypeDef* pwmHandle, uint32_t pwmChannel, float dutyCycle)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	ed87 0a01 	vstr	s0, [r7, #4]

    // Calculate the new pulse width based on the duty cycle percentage
    uint32_t maxCCR = pwmHandle->Instance->ARR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	617b      	str	r3, [r7, #20]
    uint32_t newCCR = (uint32_t)((dutyCycle / 100.0f) * maxCCR);
 80051ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80051ce:	eddf 6a19 	vldr	s13, [pc, #100]	; 8005234 <adjust_PWM_dutyCycle+0x80>
 80051d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e8:	ee17 3a90 	vmov	r3, s15
 80051ec:	613b      	str	r3, [r7, #16]

    // Update the CCR value for the specified channel
    __HAL_TIM_SET_COMPARE(pwmHandle, pwmChannel, newCCR);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <adjust_PWM_dutyCycle+0x4a>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80051fc:	e013      	b.n	8005226 <adjust_PWM_dutyCycle+0x72>
    __HAL_TIM_SET_COMPARE(pwmHandle, pwmChannel, newCCR);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b04      	cmp	r3, #4
 8005202:	d104      	bne.n	800520e <adjust_PWM_dutyCycle+0x5a>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800520c:	e00b      	b.n	8005226 <adjust_PWM_dutyCycle+0x72>
    __HAL_TIM_SET_COMPARE(pwmHandle, pwmChannel, newCCR);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d104      	bne.n	800521e <adjust_PWM_dutyCycle+0x6a>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800521c:	e003      	b.n	8005226 <adjust_PWM_dutyCycle+0x72>
    __HAL_TIM_SET_COMPARE(pwmHandle, pwmChannel, newCCR);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	42c80000 	.word	0x42c80000

08005238 <Delay_10US>:
static volatile uint32_t IC_Difference = 0;



static void Delay_10US(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(ULTRASONIC_ECHO_PIN_IC, 0);
 800523c:	4b07      	ldr	r3, [pc, #28]	; (800525c <Delay_10US+0x24>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2200      	movs	r2, #0
 8005242:	625a      	str	r2, [r3, #36]	; 0x24
	/* TIMER Tick time = 1us */
	while(__HAL_TIM_GET_COUNTER(ULTRASONIC_ECHO_PIN_IC) < 10);
 8005244:	bf00      	nop
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <Delay_10US+0x24>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2b09      	cmp	r3, #9
 800524e:	d9fa      	bls.n	8005246 <Delay_10US+0xe>
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	2000009c 	.word	0x2000009c

08005260 <Ultrasnoic_Initialize>:

void Ultrasnoic_Initialize(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8005264:	2108      	movs	r1, #8
 8005266:	4805      	ldr	r0, [pc, #20]	; (800527c <Ultrasnoic_Initialize+0x1c>)
 8005268:	f7fe fa62 	bl	8003730 <HAL_TIM_IC_Start_IT>
	Ultrasonic_Get_Distance();
 800526c:	f000 f808 	bl	8005280 <Ultrasonic_Get_Distance>
	HAL_Delay(100);
 8005270:	2064      	movs	r0, #100	; 0x64
 8005272:	f7fc fca9 	bl	8001bc8 <HAL_Delay>
}
 8005276:	bf00      	nop
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	2000009c 	.word	0x2000009c

08005280 <Ultrasonic_Get_Distance>:

void Ultrasonic_Get_Distance(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
	/* Send Trigger Signal to the Ultrasonic Trigger Pin */
	HAL_GPIO_WritePin(ULTRASONUC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 8005284:	2201      	movs	r2, #1
 8005286:	2104      	movs	r1, #4
 8005288:	4809      	ldr	r0, [pc, #36]	; (80052b0 <Ultrasonic_Get_Distance+0x30>)
 800528a:	f7fd faf5 	bl	8002878 <HAL_GPIO_WritePin>
	Delay_10US();
 800528e:	f7ff ffd3 	bl	8005238 <Delay_10US>
	HAL_GPIO_WritePin(ULTRASONUC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 8005292:	2200      	movs	r2, #0
 8005294:	2104      	movs	r1, #4
 8005296:	4806      	ldr	r0, [pc, #24]	; (80052b0 <Ultrasonic_Get_Distance+0x30>)
 8005298:	f7fd faee 	bl	8002878 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC3);
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <Ultrasonic_Get_Distance+0x34>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	4b04      	ldr	r3, [pc, #16]	; (80052b4 <Ultrasonic_Get_Distance+0x34>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	60da      	str	r2, [r3, #12]
}
 80052ac:	bf00      	nop
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40020400 	.word	0x40020400
 80052b4:	2000009c 	.word	0x2000009c

080052b8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	/* Capture rising edge */
	if(0 == isRisingCaptured)
 80052c0:	4b43      	ldr	r3, [pc, #268]	; (80053d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d11a      	bne.n	8005300 <HAL_TIM_IC_CaptureCallback+0x48>
	{
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80052ca:	2108      	movs	r1, #8
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7fe fd97 	bl	8003e00 <HAL_TIM_ReadCapturedValue>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4a3f      	ldr	r2, [pc, #252]	; (80053d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80052d6:	6013      	str	r3, [r2, #0]
		isRisingCaptured = 1;
 80052d8:	4b3d      	ldr	r3, [pc, #244]	; (80053d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a1a      	ldr	r2, [r3, #32]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80052ec:	621a      	str	r2, [r3, #32]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fc:	621a      	str	r2, [r3, #32]
		isRisingCaptured = 0;
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
	}
	else{ /* Nothing */ }
}
 80052fe:	e05d      	b.n	80053bc <HAL_TIM_IC_CaptureCallback+0x104>
	else if(1 == isRisingCaptured)
 8005300:	4b33      	ldr	r3, [pc, #204]	; (80053d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d158      	bne.n	80053bc <HAL_TIM_IC_CaptureCallback+0x104>
		IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800530a:	2108      	movs	r1, #8
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fe fd77 	bl	8003e00 <HAL_TIM_ReadCapturedValue>
 8005312:	4603      	mov	r3, r0
 8005314:	4a30      	ldr	r2, [pc, #192]	; (80053d8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8005316:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2200      	movs	r2, #0
 800531e:	625a      	str	r2, [r3, #36]	; 0x24
		if(IC_Value2 > IC_Value1)
 8005320:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4b2b      	ldr	r3, [pc, #172]	; (80053d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d907      	bls.n	800533c <HAL_TIM_IC_CaptureCallback+0x84>
			IC_Difference = IC_Value2 - IC_Value1;
 800532c:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	4a29      	ldr	r2, [pc, #164]	; (80053dc <HAL_TIM_IC_CaptureCallback+0x124>)
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e00f      	b.n	800535c <HAL_TIM_IC_CaptureCallback+0xa4>
		else if(IC_Value1 > IC_Value2)
 800533c:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b25      	ldr	r3, [pc, #148]	; (80053d8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d909      	bls.n	800535c <HAL_TIM_IC_CaptureCallback+0xa4>
			IC_Difference = (0xFFFF - IC_Value1) + IC_Value2;
 8005348:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <HAL_TIM_IC_CaptureCallback+0x120>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005356:	33ff      	adds	r3, #255	; 0xff
 8005358:	4a20      	ldr	r2, [pc, #128]	; (80053dc <HAL_TIM_IC_CaptureCallback+0x124>)
 800535a:	6013      	str	r3, [r2, #0]
		distance = IC_Difference * 0.0173;
 800535c:	4b1f      	ldr	r3, [pc, #124]	; (80053dc <HAL_TIM_IC_CaptureCallback+0x124>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f7fb f9a5 	bl	80006b0 <__aeabi_ui2d>
 8005366:	a318      	add	r3, pc, #96	; (adr r3, 80053c8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f7fa ff34 	bl	80001d8 <__aeabi_dmul>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	f7fb fa14 	bl	80007a4 <__aeabi_d2uiz>
 800537c:	4603      	mov	r3, r0
 800537e:	b29a      	uxth	r2, r3
 8005380:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005382:	801a      	strh	r2, [r3, #0]
		isReadingFinished = 1;
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]
		isRisingCaptured = 0;
 800538a:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6a1a      	ldr	r2, [r3, #32]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800539e:	621a      	str	r2, [r3, #32]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6a12      	ldr	r2, [r2, #32]
 80053aa:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 80053ac:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0208 	bic.w	r2, r2, #8
 80053ba:	60da      	str	r2, [r3, #12]
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	f3af 8000 	nop.w
 80053c8:	58e21965 	.word	0x58e21965
 80053cc:	3f91b717 	.word	0x3f91b717
 80053d0:	200001e2 	.word	0x200001e2
 80053d4:	200001e4 	.word	0x200001e4
 80053d8:	200001e8 	.word	0x200001e8
 80053dc:	200001ec 	.word	0x200001ec
 80053e0:	20000098 	.word	0x20000098
 80053e4:	2000009a 	.word	0x2000009a
 80053e8:	2000009c 	.word	0x2000009c

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <__libc_init_array>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	4d0d      	ldr	r5, [pc, #52]	; (8005434 <__libc_init_array+0x38>)
 8005400:	4c0d      	ldr	r4, [pc, #52]	; (8005438 <__libc_init_array+0x3c>)
 8005402:	1b64      	subs	r4, r4, r5
 8005404:	10a4      	asrs	r4, r4, #2
 8005406:	2600      	movs	r6, #0
 8005408:	42a6      	cmp	r6, r4
 800540a:	d109      	bne.n	8005420 <__libc_init_array+0x24>
 800540c:	4d0b      	ldr	r5, [pc, #44]	; (800543c <__libc_init_array+0x40>)
 800540e:	4c0c      	ldr	r4, [pc, #48]	; (8005440 <__libc_init_array+0x44>)
 8005410:	f000 f818 	bl	8005444 <_init>
 8005414:	1b64      	subs	r4, r4, r5
 8005416:	10a4      	asrs	r4, r4, #2
 8005418:	2600      	movs	r6, #0
 800541a:	42a6      	cmp	r6, r4
 800541c:	d105      	bne.n	800542a <__libc_init_array+0x2e>
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	f855 3b04 	ldr.w	r3, [r5], #4
 8005424:	4798      	blx	r3
 8005426:	3601      	adds	r6, #1
 8005428:	e7ee      	b.n	8005408 <__libc_init_array+0xc>
 800542a:	f855 3b04 	ldr.w	r3, [r5], #4
 800542e:	4798      	blx	r3
 8005430:	3601      	adds	r6, #1
 8005432:	e7f2      	b.n	800541a <__libc_init_array+0x1e>
 8005434:	0800547c 	.word	0x0800547c
 8005438:	0800547c 	.word	0x0800547c
 800543c:	0800547c 	.word	0x0800547c
 8005440:	08005480 	.word	0x08005480

08005444 <_init>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	bf00      	nop
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr

08005450 <_fini>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr
