
STM32_RTOS_GP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08008d98  08008d98  00018d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e78  08008e78  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e80  08008e80  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e84  08008e84  00018e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d64  20000060  08008ee8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dc4  08008ee8  00024dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c95c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000475b  00000000  00000000  0003ca2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  00041190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001201  00000000  00000000  000428f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0c8  00000000  00000000  00043af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c1c0  00000000  00000000  0005dbc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099109  00000000  00000000  00079d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063e0  00000000  00000000  00112e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011926c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d80 	.word	0x08008d80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08008d80 	.word	0x08008d80

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2uiz>:
 80007ac:	004a      	lsls	r2, r1, #1
 80007ae:	d211      	bcs.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007b4:	d211      	bcs.n	80007da <__aeabi_d2uiz+0x2e>
 80007b6:	d50d      	bpl.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d40e      	bmi.n	80007e0 <__aeabi_d2uiz+0x34>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	fa23 f002 	lsr.w	r0, r3, r2
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d102      	bne.n	80007e6 <__aeabi_d2uiz+0x3a>
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	4770      	bx	lr
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	4770      	bx	lr

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b970 	b.w	8000ae4 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9e08      	ldr	r6, [sp, #32]
 8000822:	460d      	mov	r5, r1
 8000824:	4604      	mov	r4, r0
 8000826:	460f      	mov	r7, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d14a      	bne.n	80008c2 <__udivmoddi4+0xa6>
 800082c:	428a      	cmp	r2, r1
 800082e:	4694      	mov	ip, r2
 8000830:	d965      	bls.n	80008fe <__udivmoddi4+0xe2>
 8000832:	fab2 f382 	clz	r3, r2
 8000836:	b143      	cbz	r3, 800084a <__udivmoddi4+0x2e>
 8000838:	fa02 fc03 	lsl.w	ip, r2, r3
 800083c:	f1c3 0220 	rsb	r2, r3, #32
 8000840:	409f      	lsls	r7, r3
 8000842:	fa20 f202 	lsr.w	r2, r0, r2
 8000846:	4317      	orrs	r7, r2
 8000848:	409c      	lsls	r4, r3
 800084a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800084e:	fa1f f58c 	uxth.w	r5, ip
 8000852:	fbb7 f1fe 	udiv	r1, r7, lr
 8000856:	0c22      	lsrs	r2, r4, #16
 8000858:	fb0e 7711 	mls	r7, lr, r1, r7
 800085c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000860:	fb01 f005 	mul.w	r0, r1, r5
 8000864:	4290      	cmp	r0, r2
 8000866:	d90a      	bls.n	800087e <__udivmoddi4+0x62>
 8000868:	eb1c 0202 	adds.w	r2, ip, r2
 800086c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000870:	f080 811c 	bcs.w	8000aac <__udivmoddi4+0x290>
 8000874:	4290      	cmp	r0, r2
 8000876:	f240 8119 	bls.w	8000aac <__udivmoddi4+0x290>
 800087a:	3902      	subs	r1, #2
 800087c:	4462      	add	r2, ip
 800087e:	1a12      	subs	r2, r2, r0
 8000880:	b2a4      	uxth	r4, r4
 8000882:	fbb2 f0fe 	udiv	r0, r2, lr
 8000886:	fb0e 2210 	mls	r2, lr, r0, r2
 800088a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800088e:	fb00 f505 	mul.w	r5, r0, r5
 8000892:	42a5      	cmp	r5, r4
 8000894:	d90a      	bls.n	80008ac <__udivmoddi4+0x90>
 8000896:	eb1c 0404 	adds.w	r4, ip, r4
 800089a:	f100 32ff 	add.w	r2, r0, #4294967295
 800089e:	f080 8107 	bcs.w	8000ab0 <__udivmoddi4+0x294>
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	f240 8104 	bls.w	8000ab0 <__udivmoddi4+0x294>
 80008a8:	4464      	add	r4, ip
 80008aa:	3802      	subs	r0, #2
 80008ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008b0:	1b64      	subs	r4, r4, r5
 80008b2:	2100      	movs	r1, #0
 80008b4:	b11e      	cbz	r6, 80008be <__udivmoddi4+0xa2>
 80008b6:	40dc      	lsrs	r4, r3
 80008b8:	2300      	movs	r3, #0
 80008ba:	e9c6 4300 	strd	r4, r3, [r6]
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0xbc>
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	f000 80ed 	beq.w	8000aa6 <__udivmoddi4+0x28a>
 80008cc:	2100      	movs	r1, #0
 80008ce:	e9c6 0500 	strd	r0, r5, [r6]
 80008d2:	4608      	mov	r0, r1
 80008d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d8:	fab3 f183 	clz	r1, r3
 80008dc:	2900      	cmp	r1, #0
 80008de:	d149      	bne.n	8000974 <__udivmoddi4+0x158>
 80008e0:	42ab      	cmp	r3, r5
 80008e2:	d302      	bcc.n	80008ea <__udivmoddi4+0xce>
 80008e4:	4282      	cmp	r2, r0
 80008e6:	f200 80f8 	bhi.w	8000ada <__udivmoddi4+0x2be>
 80008ea:	1a84      	subs	r4, r0, r2
 80008ec:	eb65 0203 	sbc.w	r2, r5, r3
 80008f0:	2001      	movs	r0, #1
 80008f2:	4617      	mov	r7, r2
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d0e2      	beq.n	80008be <__udivmoddi4+0xa2>
 80008f8:	e9c6 4700 	strd	r4, r7, [r6]
 80008fc:	e7df      	b.n	80008be <__udivmoddi4+0xa2>
 80008fe:	b902      	cbnz	r2, 8000902 <__udivmoddi4+0xe6>
 8000900:	deff      	udf	#255	; 0xff
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8090 	bne.w	8000a2c <__udivmoddi4+0x210>
 800090c:	1a8a      	subs	r2, r1, r2
 800090e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000912:	fa1f fe8c 	uxth.w	lr, ip
 8000916:	2101      	movs	r1, #1
 8000918:	fbb2 f5f7 	udiv	r5, r2, r7
 800091c:	fb07 2015 	mls	r0, r7, r5, r2
 8000920:	0c22      	lsrs	r2, r4, #16
 8000922:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000926:	fb0e f005 	mul.w	r0, lr, r5
 800092a:	4290      	cmp	r0, r2
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x124>
 800092e:	eb1c 0202 	adds.w	r2, ip, r2
 8000932:	f105 38ff 	add.w	r8, r5, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x122>
 8000938:	4290      	cmp	r0, r2
 800093a:	f200 80cb 	bhi.w	8000ad4 <__udivmoddi4+0x2b8>
 800093e:	4645      	mov	r5, r8
 8000940:	1a12      	subs	r2, r2, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb2 f0f7 	udiv	r0, r2, r7
 8000948:	fb07 2210 	mls	r2, r7, r0, r2
 800094c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000950:	fb0e fe00 	mul.w	lr, lr, r0
 8000954:	45a6      	cmp	lr, r4
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x14e>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000960:	d202      	bcs.n	8000968 <__udivmoddi4+0x14c>
 8000962:	45a6      	cmp	lr, r4
 8000964:	f200 80bb 	bhi.w	8000ade <__udivmoddi4+0x2c2>
 8000968:	4610      	mov	r0, r2
 800096a:	eba4 040e 	sub.w	r4, r4, lr
 800096e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000972:	e79f      	b.n	80008b4 <__udivmoddi4+0x98>
 8000974:	f1c1 0720 	rsb	r7, r1, #32
 8000978:	408b      	lsls	r3, r1
 800097a:	fa22 fc07 	lsr.w	ip, r2, r7
 800097e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000982:	fa05 f401 	lsl.w	r4, r5, r1
 8000986:	fa20 f307 	lsr.w	r3, r0, r7
 800098a:	40fd      	lsrs	r5, r7
 800098c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000990:	4323      	orrs	r3, r4
 8000992:	fbb5 f8f9 	udiv	r8, r5, r9
 8000996:	fa1f fe8c 	uxth.w	lr, ip
 800099a:	fb09 5518 	mls	r5, r9, r8, r5
 800099e:	0c1c      	lsrs	r4, r3, #16
 80009a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009a4:	fb08 f50e 	mul.w	r5, r8, lr
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	fa02 f201 	lsl.w	r2, r2, r1
 80009ae:	fa00 f001 	lsl.w	r0, r0, r1
 80009b2:	d90b      	bls.n	80009cc <__udivmoddi4+0x1b0>
 80009b4:	eb1c 0404 	adds.w	r4, ip, r4
 80009b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009bc:	f080 8088 	bcs.w	8000ad0 <__udivmoddi4+0x2b4>
 80009c0:	42a5      	cmp	r5, r4
 80009c2:	f240 8085 	bls.w	8000ad0 <__udivmoddi4+0x2b4>
 80009c6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ca:	4464      	add	r4, ip
 80009cc:	1b64      	subs	r4, r4, r5
 80009ce:	b29d      	uxth	r5, r3
 80009d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009d4:	fb09 4413 	mls	r4, r9, r3, r4
 80009d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80009e0:	45a6      	cmp	lr, r4
 80009e2:	d908      	bls.n	80009f6 <__udivmoddi4+0x1da>
 80009e4:	eb1c 0404 	adds.w	r4, ip, r4
 80009e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009ec:	d26c      	bcs.n	8000ac8 <__udivmoddi4+0x2ac>
 80009ee:	45a6      	cmp	lr, r4
 80009f0:	d96a      	bls.n	8000ac8 <__udivmoddi4+0x2ac>
 80009f2:	3b02      	subs	r3, #2
 80009f4:	4464      	add	r4, ip
 80009f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009fa:	fba3 9502 	umull	r9, r5, r3, r2
 80009fe:	eba4 040e 	sub.w	r4, r4, lr
 8000a02:	42ac      	cmp	r4, r5
 8000a04:	46c8      	mov	r8, r9
 8000a06:	46ae      	mov	lr, r5
 8000a08:	d356      	bcc.n	8000ab8 <__udivmoddi4+0x29c>
 8000a0a:	d053      	beq.n	8000ab4 <__udivmoddi4+0x298>
 8000a0c:	b156      	cbz	r6, 8000a24 <__udivmoddi4+0x208>
 8000a0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a12:	eb64 040e 	sbc.w	r4, r4, lr
 8000a16:	fa04 f707 	lsl.w	r7, r4, r7
 8000a1a:	40ca      	lsrs	r2, r1
 8000a1c:	40cc      	lsrs	r4, r1
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	e9c6 7400 	strd	r7, r4, [r6]
 8000a24:	4618      	mov	r0, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2c:	f1c3 0120 	rsb	r1, r3, #32
 8000a30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a34:	fa20 f201 	lsr.w	r2, r0, r1
 8000a38:	fa25 f101 	lsr.w	r1, r5, r1
 8000a3c:	409d      	lsls	r5, r3
 8000a3e:	432a      	orrs	r2, r5
 8000a40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a50:	0c11      	lsrs	r1, r2, #16
 8000a52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a56:	fb00 f50e 	mul.w	r5, r0, lr
 8000a5a:	428d      	cmp	r5, r1
 8000a5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x258>
 8000a62:	eb1c 0101 	adds.w	r1, ip, r1
 8000a66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a6a:	d22f      	bcs.n	8000acc <__udivmoddi4+0x2b0>
 8000a6c:	428d      	cmp	r5, r1
 8000a6e:	d92d      	bls.n	8000acc <__udivmoddi4+0x2b0>
 8000a70:	3802      	subs	r0, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1b49      	subs	r1, r1, r5
 8000a76:	b292      	uxth	r2, r2
 8000a78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a84:	fb05 f10e 	mul.w	r1, r5, lr
 8000a88:	4291      	cmp	r1, r2
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x282>
 8000a8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000a90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a94:	d216      	bcs.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a96:	4291      	cmp	r1, r2
 8000a98:	d914      	bls.n	8000ac4 <__udivmoddi4+0x2a8>
 8000a9a:	3d02      	subs	r5, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a52      	subs	r2, r2, r1
 8000aa0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aa4:	e738      	b.n	8000918 <__udivmoddi4+0xfc>
 8000aa6:	4631      	mov	r1, r6
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	e708      	b.n	80008be <__udivmoddi4+0xa2>
 8000aac:	4639      	mov	r1, r7
 8000aae:	e6e6      	b.n	800087e <__udivmoddi4+0x62>
 8000ab0:	4610      	mov	r0, r2
 8000ab2:	e6fb      	b.n	80008ac <__udivmoddi4+0x90>
 8000ab4:	4548      	cmp	r0, r9
 8000ab6:	d2a9      	bcs.n	8000a0c <__udivmoddi4+0x1f0>
 8000ab8:	ebb9 0802 	subs.w	r8, r9, r2
 8000abc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	e7a3      	b.n	8000a0c <__udivmoddi4+0x1f0>
 8000ac4:	4645      	mov	r5, r8
 8000ac6:	e7ea      	b.n	8000a9e <__udivmoddi4+0x282>
 8000ac8:	462b      	mov	r3, r5
 8000aca:	e794      	b.n	80009f6 <__udivmoddi4+0x1da>
 8000acc:	4640      	mov	r0, r8
 8000ace:	e7d1      	b.n	8000a74 <__udivmoddi4+0x258>
 8000ad0:	46d0      	mov	r8, sl
 8000ad2:	e77b      	b.n	80009cc <__udivmoddi4+0x1b0>
 8000ad4:	3d02      	subs	r5, #2
 8000ad6:	4462      	add	r2, ip
 8000ad8:	e732      	b.n	8000940 <__udivmoddi4+0x124>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e70a      	b.n	80008f4 <__udivmoddi4+0xd8>
 8000ade:	4464      	add	r4, ip
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	e742      	b.n	800096a <__udivmoddi4+0x14e>

08000ae4 <__aeabi_idiv0>:
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000aec:	f3bf 8f4f 	dsb	sy
}
 8000af0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <__NVIC_SystemReset+0x24>)
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000afa:	4904      	ldr	r1, [pc, #16]	; (8000b0c <__NVIC_SystemReset+0x24>)
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_SystemReset+0x28>)
 8000afe:	4313      	orrs	r3, r2
 8000b00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b02:	f3bf 8f4f 	dsb	sy
}
 8000b06:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <__NVIC_SystemReset+0x20>
 8000b0c:	e000ed00 	.word	0xe000ed00
 8000b10:	05fa0004 	.word	0x05fa0004

08000b14 <Bootloader_Handle_Command>:
static uint8_t BL_Host_Buffer[BL_HOST_BUFFER_RX_LENGTH];
static uint8_t appExists = 0;

/************************************ Software Interfaces Implementations ************************************/
BL_Status Bootloader_Handle_Command(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	BL_Status Status = BL_NACK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_Length = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	717b      	strb	r3, [r7, #5]

	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 8000b26:	2264      	movs	r2, #100	; 0x64
 8000b28:	2100      	movs	r1, #0
 8000b2a:	482d      	ldr	r0, [pc, #180]	; (8000be0 <Bootloader_Handle_Command+0xcc>)
 8000b2c:	f008 f83e 	bl	8008bac <memset>

	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	2201      	movs	r2, #1
 8000b36:	492a      	ldr	r1, [pc, #168]	; (8000be0 <Bootloader_Handle_Command+0xcc>)
 8000b38:	482a      	ldr	r0, [pc, #168]	; (8000be4 <Bootloader_Handle_Command+0xd0>)
 8000b3a:	f004 f8a8 	bl	8004c8e <HAL_UART_Receive>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71bb      	strb	r3, [r7, #6]

	if(HAL_Status != HAL_OK)
 8000b42:	79bb      	ldrb	r3, [r7, #6]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <Bootloader_Handle_Command+0x3a>
	{
		Status = BL_NACK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	e042      	b.n	8000bd4 <Bootloader_Handle_Command+0xc0>
	}
	else
	{
		Data_Length = BL_Host_Buffer[0];
 8000b4e:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <Bootloader_Handle_Command+0xcc>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	717b      	strb	r3, [r7, #5]
		/* Read the command packet received from the HOST */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], Data_Length, HAL_MAX_DELAY);
 8000b54:	797b      	ldrb	r3, [r7, #5]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	4922      	ldr	r1, [pc, #136]	; (8000be8 <Bootloader_Handle_Command+0xd4>)
 8000b5e:	4821      	ldr	r0, [pc, #132]	; (8000be4 <Bootloader_Handle_Command+0xd0>)
 8000b60:	f004 f895 	bl	8004c8e <HAL_UART_Receive>
 8000b64:	4603      	mov	r3, r0
 8000b66:	71bb      	strb	r3, [r7, #6]

		if(HAL_Status != HAL_OK)
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <Bootloader_Handle_Command+0x60>
		{
			Status = BL_NACK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	e02f      	b.n	8000bd4 <Bootloader_Handle_Command+0xc0>
		}
		else
		{
			switch(BL_Host_Buffer[1]){
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <Bootloader_Handle_Command+0xcc>)
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	3b10      	subs	r3, #16
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d82a      	bhi.n	8000bd4 <Bootloader_Handle_Command+0xc0>
 8000b7e:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <Bootloader_Handle_Command+0x70>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000b99 	.word	0x08000b99
 8000b88:	08000ba5 	.word	0x08000ba5
 8000b8c:	08000bb1 	.word	0x08000bb1
 8000b90:	08000bbd 	.word	0x08000bbd
 8000b94:	08000bc9 	.word	0x08000bc9
				case CBL_GET_CID_CMD:
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <Bootloader_Handle_Command+0xcc>)
 8000b9a:	f000 f827 	bl	8000bec <Bootloader_Get_Chip_Identification_Number>
					Status = BL_OK;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
					break;
 8000ba2:	e017      	b.n	8000bd4 <Bootloader_Handle_Command+0xc0>
				case CBL_GET_RDP_STATUS_CMD:
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 8000ba4:	480e      	ldr	r0, [pc, #56]	; (8000be0 <Bootloader_Handle_Command+0xcc>)
 8000ba6:	f000 f86e 	bl	8000c86 <Bootloader_Read_Protection_Level>
					Status = BL_OK;
 8000baa:	2301      	movs	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
					break;
 8000bae:	e011      	b.n	8000bd4 <Bootloader_Handle_Command+0xc0>
				case CBL_GO_TO_ADDR_CMD:
					Bootloader_Jump_To_User_App(BL_Host_Buffer);
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <Bootloader_Handle_Command+0xcc>)
 8000bb2:	f000 f8ad 	bl	8000d10 <Bootloader_Jump_To_User_App>
					Status = BL_OK;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
					break;
 8000bba:	e00b      	b.n	8000bd4 <Bootloader_Handle_Command+0xc0>
				case CBL_FLASH_ERASE_CMD:
					Bootloader_Erase_Flash(BL_Host_Buffer);
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <Bootloader_Handle_Command+0xcc>)
 8000bbe:	f000 f956 	bl	8000e6e <Bootloader_Erase_Flash>
					Status = BL_OK;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	71fb      	strb	r3, [r7, #7]
					break;
 8000bc6:	e005      	b.n	8000bd4 <Bootloader_Handle_Command+0xc0>
				case CBL_MEM_WRITE_CMD:
					Bootloader_Memory_Write(BL_Host_Buffer);
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <Bootloader_Handle_Command+0xcc>)
 8000bca:	f000 f9eb 	bl	8000fa4 <Bootloader_Memory_Write>
					Status = BL_OK;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
					break;
 8000bd2:	bf00      	nop
			}
		}
	}

	return Status;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000007c 	.word	0x2000007c
 8000be4:	20000230 	.word	0x20000230
 8000be8:	2000007d 	.word	0x2000007d

08000bec <Bootloader_Get_Chip_Identification_Number>:

/************************************    Static Functions Implementations  ************************************/
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	81fb      	strh	r3, [r7, #14]
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	3301      	adds	r3, #1
 8000c08:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000c0a:	8afb      	ldrh	r3, [r7, #22]
 8000c0c:	3b04      	subs	r3, #4
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	613b      	str	r3, [r7, #16]
	osDelay(500);
 8000c16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c1a:	f004 fd1f 	bl	800565c <osDelay>
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000c1e:	8afb      	ldrh	r3, [r7, #22]
 8000c20:	3b04      	subs	r3, #4
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 fa4c 	bl	80010c4 <Bootloader_CRC_Verify>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d113      	bne.n	8000c5a <Bootloader_Get_Chip_Identification_Number+0x6e>
		Bootloader_Send_ACK();
 8000c32:	f000 fa85 	bl	8001140 <Bootloader_Send_ACK>
		/* Get the MCU chip identification number */
		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <Bootloader_Get_Chip_Identification_Number+0x7c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	81fb      	strh	r3, [r7, #14]
		/* Report chip identification number to HOST */
		osDelay(500);
 8000c44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c48:	f004 fd08 	bl	800565c <osDelay>
		Bootloader_Send_Data_To_Host((uint8_t *)&MCU_Identification_Number, 2);
 8000c4c:	f107 030e 	add.w	r3, r7, #14
 8000c50:	2102      	movs	r1, #2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fa98 	bl	8001188 <Bootloader_Send_Data_To_Host>
	}
	else{
		Bootloader_Send_NACK();
	}
}
 8000c58:	e001      	b.n	8000c5e <Bootloader_Get_Chip_Identification_Number+0x72>
		Bootloader_Send_NACK();
 8000c5a:	f000 fa83 	bl	8001164 <Bootloader_Send_NACK>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e0042000 	.word	0xe0042000

08000c6c <CBL_STM32F401_Get_RDP_Level>:

static uint8_t CBL_STM32F401_Get_RDP_Level(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 fe21 	bl	80028bc <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	b2db      	uxtb	r3, r3
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000ca4:	8afb      	ldrh	r3, [r7, #22]
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
	osDelay(500);
 8000cb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb4:	f004 fcd2 	bl	800565c <osDelay>
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000cb8:	8afb      	ldrh	r3, [r7, #22]
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f9ff 	bl	80010c4 <Bootloader_CRC_Verify>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d11b      	bne.n	8000d04 <Bootloader_Read_Protection_Level+0x7e>
		Bootloader_Send_ACK();
 8000ccc:	f000 fa38 	bl	8001140 <Bootloader_Send_ACK>
		osDelay(500);
 8000cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd4:	f004 fcc2 	bl	800565c <osDelay>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F401_Get_RDP_Level();
 8000cd8:	f7ff ffc8 	bl	8000c6c <CBL_STM32F401_Get_RDP_Level>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	73fb      	strb	r3, [r7, #15]
		if(0xAA == RDP_Level)		 RDP_Level = 0x00;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	2baa      	cmp	r3, #170	; 0xaa
 8000ce4:	d102      	bne.n	8000cec <Bootloader_Read_Protection_Level+0x66>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e004      	b.n	8000cf6 <Bootloader_Read_Protection_Level+0x70>
		else if(0x55 == RDP_Level)   RDP_Level = 0x01;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b55      	cmp	r3, #85	; 0x55
 8000cf0:	d101      	bne.n	8000cf6 <Bootloader_Read_Protection_Level+0x70>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
 8000cf6:	f107 030f 	add.w	r3, r7, #15
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fa43 	bl	8001188 <Bootloader_Send_Data_To_Host>
	}
	else{
		Bootloader_Send_NACK();
	}
}
 8000d02:	e001      	b.n	8000d08 <Bootloader_Read_Protection_Level+0x82>
		Bootloader_Send_NACK();
 8000d04:	f000 fa2e 	bl	8001164 <Bootloader_Send_NACK>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <Bootloader_Jump_To_User_App>:

static void Bootloader_Jump_To_User_App(uint8_t *Host_Buffer)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	3301      	adds	r3, #1
 8000d28:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	3b04      	subs	r3, #4
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60bb      	str	r3, [r7, #8]
	osDelay(500);
 8000d36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3a:	f004 fc8f 	bl	800565c <osDelay>
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	3b04      	subs	r3, #4
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	4619      	mov	r1, r3
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f9bc 	bl	80010c4 <Bootloader_CRC_Verify>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d11b      	bne.n	8000d8a <Bootloader_Jump_To_User_App+0x7a>
	{
		Bootloader_Send_ACK();
 8000d52:	f000 f9f5 	bl	8001140 <Bootloader_Send_ACK>
		osDelay(500);
 8000d56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5a:	f004 fc7f 	bl	800565c <osDelay>
		if(0xFFFFFFFF != *((volatile uint32_t *)FLASH_SECTOR3_BASE_ADDRESS))
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <Bootloader_Jump_To_User_App+0x88>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d66:	d008      	beq.n	8000d7a <Bootloader_Jump_To_User_App+0x6a>
		{
			appExists = 0x1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <Bootloader_Jump_To_User_App+0x8c>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
			Bootloader_Send_Data_To_Host((uint8_t *)&appExists, 1);
 8000d6e:	2101      	movs	r1, #1
 8000d70:	480a      	ldr	r0, [pc, #40]	; (8000d9c <Bootloader_Jump_To_User_App+0x8c>)
 8000d72:	f000 fa09 	bl	8001188 <Bootloader_Send_Data_To_Host>

			// Restart with the new app
			NVIC_SystemReset();
 8000d76:	f7ff feb7 	bl	8000ae8 <__NVIC_SystemReset>
		}
		else
		{
			appExists = 0x0;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <Bootloader_Jump_To_User_App+0x8c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
			Bootloader_Send_Data_To_Host((uint8_t *)&appExists, 1);
 8000d80:	2101      	movs	r1, #1
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <Bootloader_Jump_To_User_App+0x8c>)
 8000d84:	f000 fa00 	bl	8001188 <Bootloader_Send_Data_To_Host>
		}
	}
	else{
		Bootloader_Send_NACK();
	}
}
 8000d88:	e001      	b.n	8000d8e <Bootloader_Jump_To_User_App+0x7e>
		Bootloader_Send_NACK();
 8000d8a:	f000 f9eb 	bl	8001164 <Bootloader_Send_NACK>
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0800c000 	.word	0x0800c000
 8000d9c:	200000e0 	.word	0x200000e0

08000da0 <Perform_Flash_Erase>:

static uint8_t Perform_Flash_Erase(uint8_t Sector_Numebr, uint8_t Number_Of_Sectors)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Sectors = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t SectorError = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]

	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d903      	bls.n	8000dd4 <Perform_Flash_Erase+0x34>
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dd2:	e046      	b.n	8000e62 <Perform_Flash_Erase+0xc2>
	}
	else{
		if((Sector_Numebr <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Numebr))
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	d902      	bls.n	8000de0 <Perform_Flash_Erase+0x40>
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2bff      	cmp	r3, #255	; 0xff
 8000dde:	d13d      	bne.n	8000e5c <Perform_Flash_Erase+0xbc>
		{
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Numebr)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2bff      	cmp	r3, #255	; 0xff
 8000de4:	d102      	bne.n	8000dec <Perform_Flash_Erase+0x4c>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 8000de6:	2301      	movs	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	e012      	b.n	8000e12 <Perform_Flash_Erase+0x72>
			}
			else
			{
				/* User needs Sector erase */
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Numebr;
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f1c3 0306 	rsb	r3, r3, #6
 8000df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(Number_Of_Sectors > Remaining_Sectors)
 8000df6:	79ba      	ldrb	r2, [r7, #6]
 8000df8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d902      	bls.n	8000e06 <Perform_Flash_Erase+0x66>
				{
					Number_Of_Sectors = Remaining_Sectors;
 8000e00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e04:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Numebr;        /* Initial FLASH sector to erase when Mass erase is disabled */
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	61fb      	str	r3, [r7, #28]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 8000e16:	2302      	movs	r3, #2
 8000e18:	623b      	str	r3, [r7, #32]

			/* Unlock the FLASH control register access */
			HAL_Status = HAL_FLASH_Unlock();
 8000e1a:	f001 fb6d 	bl	80024f8 <HAL_FLASH_Unlock>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e24:	f107 020c 	add.w	r2, r7, #12
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fcd4 	bl	80027dc <HAL_FLASHEx_Erase>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if(HAL_SUCCESSFUL_ERASE == SectorError){
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d103      	bne.n	8000e4a <Perform_Flash_Erase+0xaa>
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e48:	e002      	b.n	8000e50 <Perform_Flash_Erase+0xb0>
			}
			else{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			/* Locks the FLASH control register access */
			HAL_Status = HAL_FLASH_Lock();
 8000e50:	f001 fb74 	bl	800253c <HAL_FLASH_Lock>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000e5a:	e002      	b.n	8000e62 <Perform_Flash_Erase+0xc2>
		}
		else{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
	return Sector_Validity_Status;
 8000e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	3301      	adds	r3, #1
 8000e8a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000e8c:	8afb      	ldrh	r3, [r7, #22]
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	613b      	str	r3, [r7, #16]
	osDelay(500);
 8000e98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e9c:	f004 fbde 	bl	800565c <osDelay>
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 8000ea0:	8afb      	ldrh	r3, [r7, #22]
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f90b 	bl	80010c4 <Bootloader_CRC_Verify>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d11c      	bne.n	8000eee <Bootloader_Erase_Flash+0x80>
	{
		Bootloader_Send_ACK();
 8000eb4:	f000 f944 	bl	8001140 <Bootloader_Send_ACK>
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(3, 1);  //
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2003      	movs	r0, #3
 8000ebc:	f7ff ff70 	bl	8000da0 <Perform_Flash_Erase>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73fb      	strb	r3, [r7, #15]
		osDelay(500);
 8000ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec8:	f004 fbc8 	bl	800565c <osDelay>
		if(SUCCESSFUL_ERASE == Erase_Status){
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d106      	bne.n	8000ee0 <Bootloader_Erase_Flash+0x72>
			/* Report erase Passed */
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000ed2:	f107 030f 	add.w	r3, r7, #15
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f955 	bl	8001188 <Bootloader_Send_Data_To_Host>
	}
	else{
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000ede:	e008      	b.n	8000ef2 <Bootloader_Erase_Flash+0x84>
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000ee0:	f107 030f 	add.w	r3, r7, #15
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f94e 	bl	8001188 <Bootloader_Send_Data_To_Host>
}
 8000eec:	e001      	b.n	8000ef2 <Bootloader_Erase_Flash+0x84>
		Bootloader_Send_NACK();
 8000eee:	f000 f939 	bl	8001164 <Bootloader_Send_NACK>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <Flash_Memory_Write_Payload>:

static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000efa:	b5b0      	push	{r4, r5, r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	4613      	mov	r3, r2
 8000f06:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 8000f14:	f001 faf0 	bl	80024f8 <HAL_FLASH_Unlock>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <Flash_Memory_Write_Payload+0x2e>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000f22:	2300      	movs	r3, #0
 8000f24:	75bb      	strb	r3, [r7, #22]
 8000f26:	e023      	b.n	8000f70 <Flash_Memory_Write_Payload+0x76>
	}
	else{
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 8000f28:	2300      	movs	r3, #0
 8000f2a:	82bb      	strh	r3, [r7, #20]
 8000f2c:	e01c      	b.n	8000f68 <Flash_Memory_Write_Payload+0x6e>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 8000f2e:	8aba      	ldrh	r2, [r7, #20]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	18d1      	adds	r1, r2, r3
 8000f34:	8abb      	ldrh	r3, [r7, #20]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2200      	movs	r2, #0
 8000f40:	461c      	mov	r4, r3
 8000f42:	4615      	mov	r5, r2
 8000f44:	4622      	mov	r2, r4
 8000f46:	462b      	mov	r3, r5
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f001 fa81 	bl	8002450 <HAL_FLASH_Program>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <Flash_Memory_Write_Payload+0x64>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	75bb      	strb	r3, [r7, #22]
				break;
 8000f5c:	e008      	b.n	8000f70 <Flash_Memory_Write_Payload+0x76>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 8000f62:	8abb      	ldrh	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	82bb      	strh	r3, [r7, #20]
 8000f68:	8aba      	ldrh	r2, [r7, #20]
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3de      	bcc.n	8000f2e <Flash_Memory_Write_Payload+0x34>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000f70:	7dbb      	ldrb	r3, [r7, #22]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d10f      	bne.n	8000f96 <Flash_Memory_Write_Payload+0x9c>
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10c      	bne.n	8000f96 <Flash_Memory_Write_Payload+0x9c>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000f7c:	f001 fade 	bl	800253c <HAL_FLASH_Lock>
 8000f80:	4603      	mov	r3, r0
 8000f82:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <Flash_Memory_Write_Payload+0x96>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000f8e:	e004      	b.n	8000f9a <Flash_Memory_Write_Payload+0xa0>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000f90:	2301      	movs	r3, #1
 8000f92:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000f94:	e001      	b.n	8000f9a <Flash_Memory_Write_Payload+0xa0>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bdb0      	pop	{r4, r5, r7, pc}

08000fa4 <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	727b      	strb	r3, [r7, #9]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000fce:	8afb      	ldrh	r3, [r7, #22]
 8000fd0:	3b04      	subs	r3, #4
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	613b      	str	r3, [r7, #16]
	osDelay(500);
 8000fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fde:	f004 fb3d 	bl	800565c <osDelay>
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000fe2:	8afb      	ldrh	r3, [r7, #22]
 8000fe4:	3b04      	subs	r3, #4
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f86a 	bl	80010c4 <Bootloader_CRC_Verify>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d138      	bne.n	8001068 <Bootloader_Memory_Write+0xc4>
		Bootloader_Send_ACK();
 8000ff6:	f000 f8a3 	bl	8001140 <Bootloader_Send_ACK>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001000:	60fb      	str	r3, [r7, #12]
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	799b      	ldrb	r3, [r3, #6]
 8001006:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f833 	bl	8001074 <Host_Address_Verification>
 800100e:	4603      	mov	r3, r0
 8001010:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 8001012:	7abb      	ldrb	r3, [r7, #10]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d11e      	bne.n	8001056 <Bootloader_Memory_Write+0xb2>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3307      	adds	r3, #7
 800101c:	7afa      	ldrb	r2, [r7, #11]
 800101e:	b292      	uxth	r2, r2
 8001020:	68f9      	ldr	r1, [r7, #12]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff69 	bl	8000efa <Flash_Memory_Write_Payload>
 8001028:	4603      	mov	r3, r0
 800102a:	727b      	strb	r3, [r7, #9]
			osDelay(500);
 800102c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001030:	f004 fb14 	bl	800565c <osDelay>
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 8001034:	7a7b      	ldrb	r3, [r7, #9]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d106      	bne.n	8001048 <Bootloader_Memory_Write+0xa4>
				/* Report payload write passed */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 800103a:	f107 0309 	add.w	r3, r7, #9
 800103e:	2101      	movs	r1, #1
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f8a1 	bl	8001188 <Bootloader_Send_Data_To_Host>
	}
	else{
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8001046:	e011      	b.n	800106c <Bootloader_Memory_Write+0xc8>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8001048:	f107 0309 	add.w	r3, r7, #9
 800104c:	2101      	movs	r1, #1
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f89a 	bl	8001188 <Bootloader_Send_Data_To_Host>
}
 8001054:	e00a      	b.n	800106c <Bootloader_Memory_Write+0xc8>
			Address_Verification = ADDRESS_IS_INVALID;
 8001056:	2300      	movs	r3, #0
 8001058:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 800105a:	f107 030a 	add.w	r3, r7, #10
 800105e:	2101      	movs	r1, #1
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f891 	bl	8001188 <Bootloader_Send_Data_To_Host>
}
 8001066:	e001      	b.n	800106c <Bootloader_Memory_Write+0xc8>
		Bootloader_Send_NACK();
 8001068:	f000 f87c 	bl	8001164 <Bootloader_Send_NACK>
}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <Host_Address_Verification>:

static uint8_t Host_Address_Verification(uint32_t Jump_Address)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F401_SRAM1_END))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001086:	d306      	bcc.n	8001096 <Host_Address_Verification+0x22>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <Host_Address_Verification+0x4c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d802      	bhi.n	8001096 <Host_Address_Verification+0x22>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e00c      	b.n	80010b0 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401_FLASH_END))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800109c:	d306      	bcc.n	80010ac <Host_Address_Verification+0x38>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80010a4:	d802      	bhi.n	80010ac <Host_Address_Verification+0x38>
	{
		Address_Verification = ADDRESS_IS_VALID;
 80010a6:	2301      	movs	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e001      	b.n	80010b0 <Host_Address_Verification+0x3c>
	}
	else
	{
		Address_Verification = ADDRESS_IS_INVALID;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20010000 	.word	0x20010000

080010c4 <Bootloader_CRC_Verify>:

static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 80010d0:	2300      	movs	r3, #0
 80010d2:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 80010e0:	2300      	movs	r3, #0
 80010e2:	75fb      	strb	r3, [r7, #23]
 80010e4:	e00f      	b.n	8001106 <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2201      	movs	r2, #1
 80010f6:	4619      	mov	r1, r3
 80010f8:	4810      	ldr	r0, [pc, #64]	; (800113c <Bootloader_CRC_Verify+0x78>)
 80010fa:	f001 f97d 	bl	80023f8 <HAL_CRC_Accumulate>
 80010fe:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	3301      	adds	r3, #1
 8001104:	75fb      	strb	r3, [r7, #23]
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	429a      	cmp	r2, r3
 800110c:	d8eb      	bhi.n	80010e6 <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
  __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <Bootloader_CRC_Verify+0x78>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <Bootloader_CRC_Verify+0x78>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	429a      	cmp	r2, r3
 8001124:	d102      	bne.n	800112c <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 8001126:	2301      	movs	r3, #1
 8001128:	77fb      	strb	r3, [r7, #31]
 800112a:	e001      	b.n	8001130 <Bootloader_CRC_Verify+0x6c>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 800112c:	2300      	movs	r3, #0
 800112e:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 8001130:	7ffb      	ldrb	r3, [r7, #31]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000e4 	.word	0x200000e4

08001140 <Bootloader_Send_ACK>:

static void Bootloader_Send_ACK(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_ACK;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 800114a:	1df9      	adds	r1, r7, #7
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	2201      	movs	r2, #1
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <Bootloader_Send_ACK+0x20>)
 8001154:	f003 fd10 	bl	8004b78 <HAL_UART_Transmit>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000230 	.word	0x20000230

08001164 <Bootloader_Send_NACK>:

static void Bootloader_Send_NACK(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 800116e:	1df9      	adds	r1, r7, #7
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	2201      	movs	r2, #1
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <Bootloader_Send_NACK+0x20>)
 8001178:	f003 fcfe 	bl	8004b78 <HAL_UART_Transmit>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000230 	.word	0x20000230

08001188 <Bootloader_Send_Data_To_Host>:

static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b29a      	uxth	r2, r3
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <Bootloader_Send_Data_To_Host+0x24>)
 800119e:	f003 fceb 	bl	8004b78 <HAL_UART_Transmit>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000230 	.word	0x20000230

080011b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_CRC_Init+0x20>)
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <MX_CRC_Init+0x24>)
 80011b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_CRC_Init+0x20>)
 80011bc:	f001 f900 	bl	80023c0 <HAL_CRC_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011c6:	f000 fa89 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200000e4 	.word	0x200000e4
 80011d4:	40023000 	.word	0x40023000

080011d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_CRC_MspInit+0x3c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10d      	bne.n	8001206 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_CRC_MspInit+0x40>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_CRC_MspInit+0x40>)
 80011f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_CRC_MspInit+0x40>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023000 	.word	0x40023000
 8001218:	40023800 	.word	0x40023800

0800121c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of USReading */
  USReadingHandle = osSemaphoreNew(1, 1, &USReading_attributes);
 8001220:	4a10      	ldr	r2, [pc, #64]	; (8001264 <MX_FREERTOS_Init+0x48>)
 8001222:	2101      	movs	r1, #1
 8001224:	2001      	movs	r0, #1
 8001226:	f004 fa34 	bl	8005692 <osSemaphoreNew>
 800122a:	4603      	mov	r3, r0
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <MX_FREERTOS_Init+0x4c>)
 800122e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UltrasonicDistance */
  UltrasonicDistanceHandle = osMessageQueueNew (1, sizeof(uint16_t), &UltrasonicDistance_attributes);
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <MX_FREERTOS_Init+0x50>)
 8001232:	2102      	movs	r1, #2
 8001234:	2001      	movs	r0, #1
 8001236:	f004 fb4b 	bl	80058d0 <osMessageQueueNew>
 800123a:	4603      	mov	r3, r0
 800123c:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <MX_FREERTOS_Init+0x54>)
 800123e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Ultrasonic_Task */
  Ultrasonic_TaskHandle = osThreadNew(UltrasonicTask, NULL, &Ultrasonic_Task_attributes);
 8001240:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <MX_FREERTOS_Init+0x58>)
 8001242:	2100      	movs	r1, #0
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <MX_FREERTOS_Init+0x5c>)
 8001246:	f004 f977 	bl	8005538 <osThreadNew>
 800124a:	4603      	mov	r3, r0
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <MX_FREERTOS_Init+0x60>)
 800124e:	6013      	str	r3, [r2, #0]

  /* creation of Rover_Commands */
  Rover_CommandsHandle = osThreadNew(RoverCommands, NULL, &Rover_Commands_attributes);
 8001250:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <MX_FREERTOS_Init+0x64>)
 8001252:	2100      	movs	r1, #0
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <MX_FREERTOS_Init+0x68>)
 8001256:	f004 f96f 	bl	8005538 <osThreadNew>
 800125a:	4603      	mov	r3, r0
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <MX_FREERTOS_Init+0x6c>)
 800125e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	08008e50 	.word	0x08008e50
 8001268:	200000f8 	.word	0x200000f8
 800126c:	08008e38 	.word	0x08008e38
 8001270:	200000f4 	.word	0x200000f4
 8001274:	08008df0 	.word	0x08008df0
 8001278:	0800128d 	.word	0x0800128d
 800127c:	200000ec 	.word	0x200000ec
 8001280:	08008e14 	.word	0x08008e14
 8001284:	08001309 	.word	0x08001309
 8001288:	200000f0 	.word	0x200000f0

0800128c <UltrasonicTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UltrasonicTask */
void UltrasonicTask(void *argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasonicTask */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001294:	2108      	movs	r1, #8
 8001296:	4818      	ldr	r0, [pc, #96]	; (80012f8 <UltrasonicTask+0x6c>)
 8001298:	f002 fc76 	bl	8003b88 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  for(;;)
  {
	if(osOK == osSemaphoreAcquire(USReadingHandle, 0))
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <UltrasonicTask+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fa7e 	bl	80057a4 <osSemaphoreAcquire>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d120      	bne.n	80012f0 <UltrasonicTask+0x64>
	{
		// Send Trigger
		HAL_GPIO_WritePin(ULTRASONUC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2104      	movs	r1, #4
 80012b2:	4813      	ldr	r0, [pc, #76]	; (8001300 <UltrasonicTask+0x74>)
 80012b4:	f001 fda8 	bl	8002e08 <HAL_GPIO_WritePin>
		// 10us delay
		__HAL_TIM_SET_COUNTER(ULTRASONIC_ECHO_PIN_IC, 0);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <UltrasonicTask+0x6c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(ULTRASONIC_ECHO_PIN_IC) < 10); /* TIMER Tick time = 1us */
 80012c0:	bf00      	nop
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <UltrasonicTask+0x6c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	2b09      	cmp	r3, #9
 80012ca:	d9fa      	bls.n	80012c2 <UltrasonicTask+0x36>
		HAL_GPIO_WritePin(ULTRASONUC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2104      	movs	r1, #4
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <UltrasonicTask+0x74>)
 80012d2:	f001 fd99 	bl	8002e08 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC3);
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <UltrasonicTask+0x6c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <UltrasonicTask+0x6c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f042 0208 	orr.w	r2, r2, #8
 80012e4:	60da      	str	r2, [r3, #12]

		// toggle at start of new reading
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <UltrasonicTask+0x78>)
 80012ec:	f001 fda5 	bl	8002e3a <HAL_GPIO_TogglePin>
	}

    osDelay(60);
 80012f0:	203c      	movs	r0, #60	; 0x3c
 80012f2:	f004 f9b3 	bl	800565c <osDelay>
	if(osOK == osSemaphoreAcquire(USReadingHandle, 0))
 80012f6:	e7d1      	b.n	800129c <UltrasonicTask+0x10>
 80012f8:	20000148 	.word	0x20000148
 80012fc:	200000f8 	.word	0x200000f8
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800

08001308 <RoverCommands>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RoverCommands */
void RoverCommands(void *argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RoverCommands */
  uint16_t distance = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	81bb      	strh	r3, [r7, #12]
  uint8_t bt_value = 0, last_bt_value = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	72fb      	strb	r3, [r7, #11]
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
  Rover_Initialize();
 800131c:	f000 f9e4 	bl	80016e8 <Rover_Initialize>

  //test
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Receive(&huart1, (uint8_t*)&bt_value, 1, 0);
 8001320:	f107 010b 	add.w	r1, r7, #11
 8001324:	2300      	movs	r3, #0
 8001326:	2201      	movs	r2, #1
 8001328:	4854      	ldr	r0, [pc, #336]	; (800147c <RoverCommands+0x174>)
 800132a:	f003 fcb0 	bl	8004c8e <HAL_UART_Receive>

	if(bt_value && 'K' != bt_value) // ignore keep alive command
 800132e:	7afb      	ldrb	r3, [r7, #11]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d01c      	beq.n	800136e <RoverCommands+0x66>
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	2b4b      	cmp	r3, #75	; 0x4b
 8001338:	d019      	beq.n	800136e <RoverCommands+0x66>
	{
	  if('U' == bt_value){
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	2b55      	cmp	r3, #85	; 0x55
 800133e:	d104      	bne.n	800134a <RoverCommands+0x42>
		  bt_value = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	72fb      	strb	r3, [r7, #11]
		  Bootloader_Handle_Command();
 8001344:	f7ff fbe6 	bl	8000b14 <Bootloader_Handle_Command>
	  if('U' == bt_value){
 8001348:	e013      	b.n	8001372 <RoverCommands+0x6a>
	  }
	  else if('F' == bt_value || 'B' == bt_value || 'R' == bt_value || 'L' == bt_value)
 800134a:	7afb      	ldrb	r3, [r7, #11]
 800134c:	2b46      	cmp	r3, #70	; 0x46
 800134e:	d008      	beq.n	8001362 <RoverCommands+0x5a>
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	2b42      	cmp	r3, #66	; 0x42
 8001354:	d005      	beq.n	8001362 <RoverCommands+0x5a>
 8001356:	7afb      	ldrb	r3, [r7, #11]
 8001358:	2b52      	cmp	r3, #82	; 0x52
 800135a:	d002      	beq.n	8001362 <RoverCommands+0x5a>
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	2b4c      	cmp	r3, #76	; 0x4c
 8001360:	d102      	bne.n	8001368 <RoverCommands+0x60>
		  last_bt_value = bt_value;
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	73fb      	strb	r3, [r7, #15]
	  if('U' == bt_value){
 8001366:	e004      	b.n	8001372 <RoverCommands+0x6a>
	  else
		  last_bt_value = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
	  if('U' == bt_value){
 800136c:	e001      	b.n	8001372 <RoverCommands+0x6a>
	}
	else{ bt_value = last_bt_value; }
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	72fb      	strb	r3, [r7, #11]

	switch(bt_value)
 8001372:	7afb      	ldrb	r3, [r7, #11]
 8001374:	3b30      	subs	r3, #48	; 0x30
 8001376:	2b23      	cmp	r3, #35	; 0x23
 8001378:	d87c      	bhi.n	8001474 <RoverCommands+0x16c>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <RoverCommands+0x78>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	08001451 	.word	0x08001451
 8001384:	08001451 	.word	0x08001451
 8001388:	08001451 	.word	0x08001451
 800138c:	08001451 	.word	0x08001451
 8001390:	08001451 	.word	0x08001451
 8001394:	08001451 	.word	0x08001451
 8001398:	08001475 	.word	0x08001475
 800139c:	08001475 	.word	0x08001475
 80013a0:	08001475 	.word	0x08001475
 80013a4:	08001475 	.word	0x08001475
 80013a8:	08001475 	.word	0x08001475
 80013ac:	08001475 	.word	0x08001475
 80013b0:	08001475 	.word	0x08001475
 80013b4:	08001475 	.word	0x08001475
 80013b8:	08001475 	.word	0x08001475
 80013bc:	08001475 	.word	0x08001475
 80013c0:	08001475 	.word	0x08001475
 80013c4:	08001475 	.word	0x08001475
 80013c8:	08001439 	.word	0x08001439
 80013cc:	08001475 	.word	0x08001475
 80013d0:	08001475 	.word	0x08001475
 80013d4:	08001475 	.word	0x08001475
 80013d8:	08001411 	.word	0x08001411
 80013dc:	08001475 	.word	0x08001475
 80013e0:	08001475 	.word	0x08001475
 80013e4:	08001475 	.word	0x08001475
 80013e8:	08001475 	.word	0x08001475
 80013ec:	08001475 	.word	0x08001475
 80013f0:	08001445 	.word	0x08001445
 80013f4:	08001475 	.word	0x08001475
 80013f8:	08001475 	.word	0x08001475
 80013fc:	08001475 	.word	0x08001475
 8001400:	08001475 	.word	0x08001475
 8001404:	08001475 	.word	0x08001475
 8001408:	0800143f 	.word	0x0800143f
 800140c:	0800144b 	.word	0x0800144b
	{
	  case 'F':
		  osMessageQueueGet(UltrasonicDistanceHandle, &distance, (uint8_t*)1, 0);
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <RoverCommands+0x178>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	f107 010c 	add.w	r1, r7, #12
 8001418:	2300      	movs	r3, #0
 800141a:	2201      	movs	r2, #1
 800141c:	f004 fb2c 	bl	8005a78 <osMessageQueueGet>
		  if(20 > distance && 0 < distance)
 8001420:	89bb      	ldrh	r3, [r7, #12]
 8001422:	2b13      	cmp	r3, #19
 8001424:	d805      	bhi.n	8001432 <RoverCommands+0x12a>
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <RoverCommands+0x12a>
			  Rover_Stop();
 800142c:	f000 f9c8 	bl	80017c0 <Rover_Stop>
		  else
			  Rover_Forward();
		  break;
 8001430:	e020      	b.n	8001474 <RoverCommands+0x16c>
			  Rover_Forward();
 8001432:	f000 f97d 	bl	8001730 <Rover_Forward>
		  break;
 8001436:	e01d      	b.n	8001474 <RoverCommands+0x16c>

	  case 'B':
		  Rover_Backward();
 8001438:	f000 f98c 	bl	8001754 <Rover_Backward>
		  break;
 800143c:	e01a      	b.n	8001474 <RoverCommands+0x16c>

	  case 'R':
		  Rover_Right();
 800143e:	f000 f99b 	bl	8001778 <Rover_Right>
		  break;
 8001442:	e017      	b.n	8001474 <RoverCommands+0x16c>

	  case 'L':
		  Rover_Left();
 8001444:	f000 f9aa 	bl	800179c <Rover_Left>
		  break;
 8001448:	e014      	b.n	8001474 <RoverCommands+0x16c>

	  case 'S':
		  Rover_Stop();
 800144a:	f000 f9b9 	bl	80017c0 <Rover_Stop>
		  break;
 800144e:	e011      	b.n	8001474 <RoverCommands+0x16c>

	  case '0': case '1': case '2': case '3': case '4': case '5':
		  Rover_Change_Speed((bt_value - '0') * 20);
 8001450:	7afb      	ldrb	r3, [r7, #11]
 8001452:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	f000 f9c9 	bl	8001800 <Rover_Change_Speed>
		  bt_value = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	72fb      	strb	r3, [r7, #11]
		  break;
 8001472:	bf00      	nop
	}

    osDelay(40);
 8001474:	2028      	movs	r0, #40	; 0x28
 8001476:	f004 f8f1 	bl	800565c <osDelay>
	HAL_UART_Receive(&huart1, (uint8_t*)&bt_value, 1, 0);
 800147a:	e751      	b.n	8001320 <RoverCommands+0x18>
 800147c:	20000230 	.word	0x20000230
 8001480:	200000f4 	.word	0x200000f4

08001484 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b33      	ldr	r3, [pc, #204]	; (800156c <MX_GPIO_Init+0xe8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a32      	ldr	r2, [pc, #200]	; (800156c <MX_GPIO_Init+0xe8>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <MX_GPIO_Init+0xe8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <MX_GPIO_Init+0xe8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a2b      	ldr	r2, [pc, #172]	; (800156c <MX_GPIO_Init+0xe8>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <MX_GPIO_Init+0xe8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <MX_GPIO_Init+0xe8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a24      	ldr	r2, [pc, #144]	; (800156c <MX_GPIO_Init+0xe8>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_GPIO_Init+0xe8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f4:	481e      	ldr	r0, [pc, #120]	; (8001570 <MX_GPIO_Init+0xec>)
 80014f6:	f001 fc87 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	210f      	movs	r1, #15
 80014fe:	481d      	ldr	r0, [pc, #116]	; (8001574 <MX_GPIO_Init+0xf0>)
 8001500:	f001 fc82 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2104      	movs	r1, #4
 8001508:	481b      	ldr	r0, [pc, #108]	; (8001578 <MX_GPIO_Init+0xf4>)
 800150a:	f001 fc7d 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	4812      	ldr	r0, [pc, #72]	; (8001570 <MX_GPIO_Init+0xec>)
 8001528:	f001 faea 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800152c:	230f      	movs	r3, #15
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_GPIO_Init+0xf0>)
 8001544:	f001 fadc 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001548:	2304      	movs	r3, #4
 800154a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_GPIO_Init+0xf4>)
 8001560:	f001 face 	bl	8002b00 <HAL_GPIO_Init>

}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020800 	.word	0x40020800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020400 	.word	0x40020400

0800157c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Jump to new app if there is any
	if(0xFFFFFFFF != *((volatile uint32_t *)FLASH_SECTOR3_BASE_ADDRESS))
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <main+0x60>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158a:	d00f      	beq.n	80015ac <main+0x30>
	{
		/* Value of the main stack pointer of our main application */
		uint32_t MSP_Value = *((volatile uint32_t *)FLASH_SECTOR3_BASE_ADDRESS);
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <main+0x60>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]

		/* Reset Handler definition function of our main application */
		uint32_t MainAppAddr = *((volatile uint32_t *)(FLASH_SECTOR3_BASE_ADDRESS + 4));
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <main+0x64>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60bb      	str	r3, [r7, #8]

		/* Fetch the reset handler address of the user application */
		pMainApp ResetHandler_Address = (pMainApp)MainAppAddr;
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f383 8808 	msr	MSP, r3
}
 80015a6:	bf00      	nop

		/* Set Main Stack Pointer */
		__set_MSP(MSP_Value);

		/* Jump to Application Reset Handler */
		ResetHandler_Address();
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4798      	blx	r3
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ac:	f000 fde4 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b0:	f000 f818 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b4:	f7ff ff66 	bl	8001484 <MX_GPIO_Init>
  MX_TIM3_Init();
 80015b8:	f000 fb08 	bl	8001bcc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80015bc:	f000 fd40 	bl	8002040 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 80015c0:	f000 fb7e 	bl	8001cc0 <MX_TIM10_Init>
  MX_TIM2_Init();
 80015c4:	f000 fab0 	bl	8001b28 <MX_TIM2_Init>
  MX_CRC_Init();
 80015c8:	f7ff fdf2 	bl	80011b0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015cc:	f003 ff6a 	bl	80054a4 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80015d0:	f7ff fe24 	bl	800121c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015d4:	f003 ff8a 	bl	80054ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <main+0x5c>
 80015da:	bf00      	nop
 80015dc:	0800c000 	.word	0x0800c000
 80015e0:	0800c004 	.word	0x0800c004

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	; 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	2230      	movs	r2, #48	; 0x30
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 fada 	bl	8008bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <SystemClock_Config+0xcc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <SystemClock_Config+0xcc>)
 8001612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <SystemClock_Config+0xcc>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <SystemClock_Config+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001630:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <SystemClock_Config+0xd0>)
 8001632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <SystemClock_Config+0xd0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	2301      	movs	r3, #1
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164c:	2310      	movs	r3, #16
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001650:	2302      	movs	r3, #2
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001658:	2308      	movs	r3, #8
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800165c:	2354      	movs	r3, #84	; 0x54
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001660:	2302      	movs	r3, #2
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001664:	2304      	movs	r3, #4
 8001666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	4618      	mov	r0, r3
 800166e:	f001 fbff 	bl	8002e70 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001678:	f000 f830 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167c:	230f      	movs	r3, #15
 800167e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001680:	2302      	movs	r3, #2
 8001682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2102      	movs	r1, #2
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fe61 	bl	8003360 <HAL_RCC_ClockConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016a4:	f000 f81a 	bl	80016dc <Error_Handler>
  }
}
 80016a8:	bf00      	nop
 80016aa:	3750      	adds	r7, #80	; 0x50
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000

080016b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ca:	f000 fd77 	bl	80021bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40010000 	.word	0x40010000

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <Error_Handler+0x8>
	...

080016e8 <Rover_Initialize>:
uint8_t lastSpeed = 0;
uint8_t speed = 0;

/******************************      Software interfaces     ******************************/
void Rover_Initialize(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	speed = 0;
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <Rover_Initialize+0x3c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
	lastSpeed = speed;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <Rover_Initialize+0x3c>)
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <Rover_Initialize+0x40>)
 80016f8:	701a      	strb	r2, [r3, #0]
	Set_Speed();
 80016fa:	f000 f8b5 	bl	8001868 <Set_Speed>
	HAL_TIM_PWM_Start(MOTOR_PWM_TIMER, TIM_CHANNEL_1);
 80016fe:	2100      	movs	r1, #0
 8001700:	480a      	ldr	r0, [pc, #40]	; (800172c <Rover_Initialize+0x44>)
 8001702:	f002 f941 	bl	8003988 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_PWM_TIMER, TIM_CHANNEL_2);
 8001706:	2104      	movs	r1, #4
 8001708:	4808      	ldr	r0, [pc, #32]	; (800172c <Rover_Initialize+0x44>)
 800170a:	f002 f93d 	bl	8003988 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_PWM_TIMER, TIM_CHANNEL_3);
 800170e:	2108      	movs	r1, #8
 8001710:	4806      	ldr	r0, [pc, #24]	; (800172c <Rover_Initialize+0x44>)
 8001712:	f002 f939 	bl	8003988 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_PWM_TIMER, TIM_CHANNEL_4);
 8001716:	210c      	movs	r1, #12
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <Rover_Initialize+0x44>)
 800171a:	f002 f935 	bl	8003988 <HAL_TIM_PWM_Start>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200000fd 	.word	0x200000fd
 8001728:	200000fc 	.word	0x200000fc
 800172c:	20000190 	.word	0x20000190

08001730 <Rover_Forward>:

void Rover_Forward(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_FRONT_PIN | MOTOR_RIGHT_FRONT_PIN, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	2103      	movs	r1, #3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <Rover_Forward+0x20>)
 800173a:	f001 fb65 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_BACK_PIN | MOTOR_RIGHT_BACK_PIN, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	210c      	movs	r1, #12
 8001742:	4803      	ldr	r0, [pc, #12]	; (8001750 <Rover_Forward+0x20>)
 8001744:	f001 fb60 	bl	8002e08 <HAL_GPIO_WritePin>
	Set_Speed();
 8001748:	f000 f88e 	bl	8001868 <Set_Speed>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40020000 	.word	0x40020000

08001754 <Rover_Backward>:

void Rover_Backward(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_FRONT_PIN | MOTOR_RIGHT_FRONT_PIN, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2103      	movs	r1, #3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <Rover_Backward+0x20>)
 800175e:	f001 fb53 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_BACK_PIN | MOTOR_RIGHT_BACK_PIN, GPIO_PIN_SET);
 8001762:	2201      	movs	r2, #1
 8001764:	210c      	movs	r1, #12
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <Rover_Backward+0x20>)
 8001768:	f001 fb4e 	bl	8002e08 <HAL_GPIO_WritePin>
	Set_Speed();
 800176c:	f000 f87c 	bl	8001868 <Set_Speed>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40020000 	.word	0x40020000

08001778 <Rover_Right>:

void Rover_Right(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_FRONT_PIN | MOTOR_LEFT_BACK_PIN, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2105      	movs	r1, #5
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <Rover_Right+0x20>)
 8001782:	f001 fb41 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_RIGHT_FRONT_PIN | MOTOR_RIGHT_BACK_PIN, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	210a      	movs	r1, #10
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <Rover_Right+0x20>)
 800178c:	f001 fb3c 	bl	8002e08 <HAL_GPIO_WritePin>
	Set_Speed();
 8001790:	f000 f86a 	bl	8001868 <Set_Speed>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40020000 	.word	0x40020000

0800179c <Rover_Left>:

void Rover_Left(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_LEFT_FRONT_PIN | MOTOR_LEFT_BACK_PIN, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2105      	movs	r1, #5
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <Rover_Left+0x20>)
 80017a6:	f001 fb2f 	bl	8002e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_RIGHT_FRONT_PIN | MOTOR_RIGHT_BACK_PIN, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	210a      	movs	r1, #10
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <Rover_Left+0x20>)
 80017b0:	f001 fb2a 	bl	8002e08 <HAL_GPIO_WritePin>
	Set_Speed();
 80017b4:	f000 f858 	bl	8001868 <Set_Speed>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40020000 	.word	0x40020000

080017c0 <Rover_Stop>:

void Rover_Stop(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_1, 0);
 80017c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80017f8 <Rover_Stop+0x38>
 80017c8:	2100      	movs	r1, #0
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <Rover_Stop+0x3c>)
 80017cc:	f000 f88c 	bl	80018e8 <adjust_PWM_dutyCycle>
	adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_2, 0);
 80017d0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80017f8 <Rover_Stop+0x38>
 80017d4:	2104      	movs	r1, #4
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <Rover_Stop+0x3c>)
 80017d8:	f000 f886 	bl	80018e8 <adjust_PWM_dutyCycle>
	adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_3, 0);
 80017dc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80017f8 <Rover_Stop+0x38>
 80017e0:	2108      	movs	r1, #8
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <Rover_Stop+0x3c>)
 80017e4:	f000 f880 	bl	80018e8 <adjust_PWM_dutyCycle>
	adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_4, 0);
 80017e8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80017f8 <Rover_Stop+0x38>
 80017ec:	210c      	movs	r1, #12
 80017ee:	4803      	ldr	r0, [pc, #12]	; (80017fc <Rover_Stop+0x3c>)
 80017f0:	f000 f87a 	bl	80018e8 <adjust_PWM_dutyCycle>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	00000000 	.word	0x00000000
 80017fc:	20000190 	.word	0x20000190

08001800 <Rover_Change_Speed>:


void Rover_Change_Speed(float copySpeed)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	ed87 0a01 	vstr	s0, [r7, #4]
	if((uint8_t)copySpeed != speed && (uint8_t)copySpeed <= 100 && (uint8_t)copySpeed >= 0){
 800180a:	edd7 7a01 	vldr	s15, [r7, #4]
 800180e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001812:	edc7 7a00 	vstr	s15, [r7]
 8001816:	783b      	ldrb	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <Rover_Change_Speed+0x60>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d017      	beq.n	8001852 <Rover_Change_Speed+0x52>
 8001822:	edd7 7a01 	vldr	s15, [r7, #4]
 8001826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800182a:	edc7 7a00 	vstr	s15, [r7]
 800182e:	783b      	ldrb	r3, [r7, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d80d      	bhi.n	8001852 <Rover_Change_Speed+0x52>
		lastSpeed = speed;
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <Rover_Change_Speed+0x60>)
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <Rover_Change_Speed+0x64>)
 800183c:	701a      	strb	r2, [r3, #0]
		speed = copySpeed;
 800183e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001846:	edc7 7a00 	vstr	s15, [r7]
 800184a:	783b      	ldrb	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <Rover_Change_Speed+0x60>)
 8001850:	701a      	strb	r2, [r3, #0]
	}
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200000fd 	.word	0x200000fd
 8001864:	200000fc 	.word	0x200000fc

08001868 <Set_Speed>:

static void Set_Speed(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	if(lastSpeed != speed)
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <Set_Speed+0x74>)
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <Set_Speed+0x78>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d02f      	beq.n	80018d8 <Set_Speed+0x70>
	{
		adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_1, speed);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <Set_Speed+0x78>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	2100      	movs	r1, #0
 800188a:	4816      	ldr	r0, [pc, #88]	; (80018e4 <Set_Speed+0x7c>)
 800188c:	f000 f82c 	bl	80018e8 <adjust_PWM_dutyCycle>
		adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_2, speed);
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <Set_Speed+0x78>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	2104      	movs	r1, #4
 80018a2:	4810      	ldr	r0, [pc, #64]	; (80018e4 <Set_Speed+0x7c>)
 80018a4:	f000 f820 	bl	80018e8 <adjust_PWM_dutyCycle>
		adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_3, speed);
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <Set_Speed+0x78>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	2108      	movs	r1, #8
 80018ba:	480a      	ldr	r0, [pc, #40]	; (80018e4 <Set_Speed+0x7c>)
 80018bc:	f000 f814 	bl	80018e8 <adjust_PWM_dutyCycle>
		adjust_PWM_dutyCycle(MOTOR_PWM_TIMER, TIM_CHANNEL_4, speed);
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <Set_Speed+0x78>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	210c      	movs	r1, #12
 80018d2:	4804      	ldr	r0, [pc, #16]	; (80018e4 <Set_Speed+0x7c>)
 80018d4:	f000 f808 	bl	80018e8 <adjust_PWM_dutyCycle>
	}
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200000fc 	.word	0x200000fc
 80018e0:	200000fd 	.word	0x200000fd
 80018e4:	20000190 	.word	0x20000190

080018e8 <adjust_PWM_dutyCycle>:


static void adjust_PWM_dutyCycle(TIM_HandleTypeDef* pwmHandle, uint32_t pwmChannel, float dutyCycle)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calculate the new pulse width based on the duty cycle percentage
    uint32_t maxCCR = pwmHandle->Instance->ARR;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	617b      	str	r3, [r7, #20]
    uint32_t newCCR = (uint32_t)((dutyCycle / 100.0f) * maxCCR);
 80018fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001902:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001968 <adjust_PWM_dutyCycle+0x80>
 8001906:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191c:	ee17 3a90 	vmov	r3, s15
 8001920:	613b      	str	r3, [r7, #16]

    // Update the CCR value for the specified channel
    __HAL_TIM_SET_COMPARE(pwmHandle, pwmChannel, newCCR);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d104      	bne.n	8001932 <adjust_PWM_dutyCycle+0x4a>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001930:	e013      	b.n	800195a <adjust_PWM_dutyCycle+0x72>
    __HAL_TIM_SET_COMPARE(pwmHandle, pwmChannel, newCCR);
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b04      	cmp	r3, #4
 8001936:	d104      	bne.n	8001942 <adjust_PWM_dutyCycle+0x5a>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001940:	e00b      	b.n	800195a <adjust_PWM_dutyCycle+0x72>
    __HAL_TIM_SET_COMPARE(pwmHandle, pwmChannel, newCCR);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d104      	bne.n	8001952 <adjust_PWM_dutyCycle+0x6a>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001950:	e003      	b.n	800195a <adjust_PWM_dutyCycle+0x72>
    __HAL_TIM_SET_COMPARE(pwmHandle, pwmChannel, newCCR);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
}
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	42c80000 	.word	0x42c80000

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_MspInit+0x54>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <HAL_MspInit+0x54>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001980:	6453      	str	r3, [r2, #68]	; 0x44
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x54>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_MspInit+0x54>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_MspInit+0x54>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_MspInit+0x54>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	210f      	movs	r1, #15
 80019ae:	f06f 0001 	mvn.w	r0, #1
 80019b2:	f000 fcdb 	bl	800236c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <HAL_InitTick+0xd0>)
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <HAL_InitTick+0xd0>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6453      	str	r3, [r2, #68]	; 0x44
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_InitTick+0xd0>)
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019f0:	f107 020c 	add.w	r2, r7, #12
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fe90 	bl	8003720 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a00:	f001 fe7a 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 8001a04:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <HAL_InitTick+0xd4>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0c9b      	lsrs	r3, r3, #18
 8001a10:	3b01      	subs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_InitTick+0xd8>)
 8001a16:	4a22      	ldr	r2, [pc, #136]	; (8001aa0 <HAL_InitTick+0xdc>)
 8001a18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_InitTick+0xd8>)
 8001a1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <HAL_InitTick+0xd8>)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_InitTick+0xd8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_InitTick+0xd8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_InitTick+0xd8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a3a:	4818      	ldr	r0, [pc, #96]	; (8001a9c <HAL_InitTick+0xd8>)
 8001a3c:	f001 fea2 	bl	8003784 <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d11b      	bne.n	8001a86 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a4e:	4813      	ldr	r0, [pc, #76]	; (8001a9c <HAL_InitTick+0xd8>)
 8001a50:	f001 fee8 	bl	8003824 <HAL_TIM_Base_Start_IT>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d111      	bne.n	8001a86 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a62:	2019      	movs	r0, #25
 8001a64:	f000 fc9e 	bl	80023a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	d808      	bhi.n	8001a80 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	2019      	movs	r0, #25
 8001a74:	f000 fc7a 	bl	800236c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_InitTick+0xe0>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e002      	b.n	8001a86 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3730      	adds	r7, #48	; 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	431bde83 	.word	0x431bde83
 8001a9c:	20000100 	.word	0x20000100
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aac:	e7fe      	b.n	8001aac <NMI_Handler+0x4>

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001ada:	f002 f96f 	bl	8003dbc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001ae0:	f002 f96c 	bl	8003dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000100 	.word	0x20000100
 8001aec:	200001d8 	.word	0x200001d8

08001af0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <TIM2_IRQHandler+0x10>)
 8001af6:	f002 f961 	bl	8003dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000148 	.word	0x20000148

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <SystemInit+0x20>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <SystemInit+0x20>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <MX_TIM2_Init+0xa0>)
 8001b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <MX_TIM2_Init+0xa0>)
 8001b4e:	2253      	movs	r2, #83	; 0x53
 8001b50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <MX_TIM2_Init+0xa0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_TIM2_Init+0xa0>)
 8001b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <MX_TIM2_Init+0xa0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_TIM2_Init+0xa0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b6c:	4816      	ldr	r0, [pc, #88]	; (8001bc8 <MX_TIM2_Init+0xa0>)
 8001b6e:	f001 ffbb 	bl	8003ae8 <HAL_TIM_IC_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b78:	f7ff fdb0 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <MX_TIM2_Init+0xa0>)
 8001b8c:	f002 ff22 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b96:	f7ff fda1 	bl	80016dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001baa:	463b      	mov	r3, r7
 8001bac:	2208      	movs	r2, #8
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_TIM2_Init+0xa0>)
 8001bb2:	f002 f9f3 	bl	8003f9c <HAL_TIM_IC_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001bbc:	f7ff fd8e 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000148 	.word	0x20000148

08001bcc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd2:	f107 0320 	add.w	r3, r7, #32
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001bf0:	4a32      	ldr	r2, [pc, #200]	; (8001cbc <MX_TIM3_Init+0xf0>)
 8001bf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c14:	4828      	ldr	r0, [pc, #160]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c16:	f001 fe67 	bl	80038e8 <HAL_TIM_PWM_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c20:	f7ff fd5c 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4619      	mov	r1, r3
 8001c32:	4821      	ldr	r0, [pc, #132]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c34:	f002 fece 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c3e:	f7ff fd4d 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c42:	2360      	movs	r3, #96	; 0x60
 8001c44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	4817      	ldr	r0, [pc, #92]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c5a:	f002 fa3b 	bl	80040d4 <HAL_TIM_PWM_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c64:	f7ff fd3a 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c70:	f002 fa30 	bl	80040d4 <HAL_TIM_PWM_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c7a:	f7ff fd2f 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2208      	movs	r2, #8
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c86:	f002 fa25 	bl	80040d4 <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001c90:	f7ff fd24 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	220c      	movs	r2, #12
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001c9c:	f002 fa1a 	bl	80040d4 <HAL_TIM_PWM_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001ca6:	f7ff fd19 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <MX_TIM3_Init+0xec>)
 8001cac:	f000 f8c4 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000190 	.word	0x20000190
 8001cbc:	40000400 	.word	0x40000400

08001cc0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_TIM10_Init+0x40>)
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <MX_TIM10_Init+0x44>)
 8001cc8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MX_TIM10_Init+0x40>)
 8001ccc:	2253      	movs	r2, #83	; 0x53
 8001cce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_TIM10_Init+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <MX_TIM10_Init+0x40>)
 8001cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cdc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_TIM10_Init+0x40>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_TIM10_Init+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_TIM10_Init+0x40>)
 8001cec:	f001 fd4a 	bl	8003784 <HAL_TIM_Base_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001cf6:	f7ff fcf1 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200001d8 	.word	0x200001d8
 8001d04:	40014400 	.word	0x40014400

08001d08 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d134      	bne.n	8001d94 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_TIM_IC_MspInit+0x94>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d74:	2301      	movs	r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4808      	ldr	r0, [pc, #32]	; (8001da0 <HAL_TIM_IC_MspInit+0x98>)
 8001d80:	f000 febe 	bl	8002b00 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2105      	movs	r1, #5
 8001d88:	201c      	movs	r0, #28
 8001d8a:	f000 faef 	bl	800236c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d8e:	201c      	movs	r0, #28
 8001d90:	f000 fb08 	bl	80023a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020400 	.word	0x40020400

08001da4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10d      	bne.n	8001dd2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_TIM_PWM_MspInit+0x40>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_TIM_PWM_MspInit+0x40>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_TIM_PWM_MspInit+0x40>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_TIM_Base_MspInit+0x48>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d115      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_TIM_Base_MspInit+0x4c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <HAL_TIM_Base_MspInit+0x4c>)
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_TIM_Base_MspInit+0x4c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	210f      	movs	r1, #15
 8001e1a:	2019      	movs	r0, #25
 8001e1c:	f000 faa6 	bl	800236c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e20:	2019      	movs	r0, #25
 8001e22:	f000 fabf 	bl	80023a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40014400 	.word	0x40014400
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a21      	ldr	r2, [pc, #132]	; (8001edc <HAL_TIM_MspPostInit+0xa4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d13b      	bne.n	8001ed2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_TIM_MspPostInit+0xa8>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_TIM_MspPostInit+0xa8>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_TIM_MspPostInit+0xa8>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_TIM_MspPostInit+0xa8>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <HAL_TIM_MspPostInit+0xa8>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_TIM_MspPostInit+0xa8>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e92:	23c0      	movs	r3, #192	; 0xc0
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <HAL_TIM_MspPostInit+0xac>)
 8001eae:	f000 fe27 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <HAL_TIM_MspPostInit+0xb0>)
 8001ece:	f000 fe17 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	00000000 	.word	0x00000000

08001ef0 <HAL_TIM_IC_CaptureCallback>:
static volatile uint32_t IC_Difference = 0;



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	/* Capture rising edge */
	if(0 == isRisingCaptured)
 8001ef8:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d11a      	bne.n	8001f38 <HAL_TIM_IC_CaptureCallback+0x48>
	{
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001f02:	2108      	movs	r1, #8
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f002 f9a7 	bl	8004258 <HAL_TIM_ReadCapturedValue>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4a45      	ldr	r2, [pc, #276]	; (8002024 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f0e:	6013      	str	r3, [r2, #0]
		isRisingCaptured = 1;
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001f24:	621a      	str	r2, [r3, #32]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f34:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);

		osSemaphoreRelease(USReadingHandle);
	}
	else{ /* Nothing */ }
}
 8001f36:	e06b      	b.n	8002010 <HAL_TIM_IC_CaptureCallback+0x120>
	else if(1 == isRisingCaptured)
 8001f38:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d166      	bne.n	8002010 <HAL_TIM_IC_CaptureCallback+0x120>
		IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001f42:	2108      	movs	r1, #8
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f002 f987 	bl	8004258 <HAL_TIM_ReadCapturedValue>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a36      	ldr	r2, [pc, #216]	; (8002028 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f4e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
		if(IC_Value2 > IC_Value1)
 8001f58:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d907      	bls.n	8001f74 <HAL_TIM_IC_CaptureCallback+0x84>
			IC_Difference = IC_Value2 - IC_Value1;
 8001f64:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	4a2f      	ldr	r2, [pc, #188]	; (800202c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00f      	b.n	8001f94 <HAL_TIM_IC_CaptureCallback+0xa4>
		else if(IC_Value1 > IC_Value2)
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d909      	bls.n	8001f94 <HAL_TIM_IC_CaptureCallback+0xa4>
			IC_Difference = (0xFFFF - IC_Value1) + IC_Value2;
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001f8e:	33ff      	adds	r3, #255	; 0xff
 8001f90:	4a26      	ldr	r2, [pc, #152]	; (800202c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001f92:	6013      	str	r3, [r2, #0]
		distance = IC_Difference * 0.0173;
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fb8d 	bl	80006b8 <__aeabi_ui2d>
 8001f9e:	a31e      	add	r3, pc, #120	; (adr r3, 8002018 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe f91c 	bl	80001e0 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f7fe fbfc 	bl	80007ac <__aeabi_d2uiz>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001fba:	801a      	strh	r2, [r3, #0]
		osMessageQueueReset(UltrasonicDistanceHandle);
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fdb7 	bl	8005b34 <osMessageQueueReset>
		osMessageQueuePut(UltrasonicDistanceHandle, &distance, 1, 0);
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4918      	ldr	r1, [pc, #96]	; (8002030 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001fd0:	f003 fcf2 	bl	80059b8 <osMessageQueuePut>
		isRisingCaptured = 0;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a1a      	ldr	r2, [r3, #32]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001fe8:	621a      	str	r2, [r3, #32]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a12      	ldr	r2, [r2, #32]
 8001ff4:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0208 	bic.w	r2, r2, #8
 8002004:	60da      	str	r2, [r3, #12]
		osSemaphoreRelease(USReadingHandle);
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fc1c 	bl	8005848 <osSemaphoreRelease>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	58e21965 	.word	0x58e21965
 800201c:	3f91b717 	.word	0x3f91b717
 8002020:	20000222 	.word	0x20000222
 8002024:	20000224 	.word	0x20000224
 8002028:	20000228 	.word	0x20000228
 800202c:	2000022c 	.word	0x2000022c
 8002030:	20000220 	.word	0x20000220
 8002034:	200000f4 	.word	0x200000f4
 8002038:	20000148 	.word	0x20000148
 800203c:	200000f8 	.word	0x200000f8

08002040 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <MX_USART1_UART_Init+0x50>)
 8002048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <MX_USART1_UART_Init+0x4c>)
 800204c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_USART1_UART_Init+0x4c>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002066:	220c      	movs	r2, #12
 8002068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <MX_USART1_UART_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002078:	f002 fd2e 	bl	8004ad8 <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002082:	f7ff fb2b 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000230 	.word	0x20000230
 8002090:	40011000 	.word	0x40011000

08002094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_UART_MspInit+0x84>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d12c      	bne.n	8002110 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_UART_MspInit+0x88>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_UART_MspInit+0x88>)
 80020c0:	f043 0310 	orr.w	r3, r3, #16
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_UART_MspInit+0x88>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_UART_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_UART_MspInit+0x88>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_UART_MspInit+0x88>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002100:	2307      	movs	r3, #7
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <HAL_UART_MspInit+0x8c>)
 800210c:	f000 fcf8 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002110:	bf00      	nop
 8002112:	3728      	adds	r7, #40	; 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40011000 	.word	0x40011000
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000

08002124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800215c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002128:	f7ff fcec 	bl	8001b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800212c:	480c      	ldr	r0, [pc, #48]	; (8002160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800212e:	490d      	ldr	r1, [pc, #52]	; (8002164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002134:	e002      	b.n	800213c <LoopCopyDataInit>

08002136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213a:	3304      	adds	r3, #4

0800213c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800213c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002140:	d3f9      	bcc.n	8002136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002144:	4c0a      	ldr	r4, [pc, #40]	; (8002170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002148:	e001      	b.n	800214e <LoopFillZerobss>

0800214a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800214c:	3204      	adds	r2, #4

0800214e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002150:	d3fb      	bcc.n	800214a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002152:	f006 fd89 	bl	8008c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002156:	f7ff fa11 	bl	800157c <main>
  bx  lr    
 800215a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800215c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002164:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002168:	08008e88 	.word	0x08008e88
  ldr r2, =_sbss
 800216c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002170:	20004dc4 	.word	0x20004dc4

08002174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 f8d8 	bl	8002356 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	200f      	movs	r0, #15
 80021a8:	f7ff fc0c 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff fbde 	bl	800196c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_IncTick+0x20>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_IncTick+0x24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_IncTick+0x24>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000278 	.word	0x20000278

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_GetTick+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000278 	.word	0x20000278

080021fc <__NVIC_SetPriorityGrouping>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4907      	ldr	r1, [pc, #28]	; (8002298 <__NVIC_EnableIRQ+0x38>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ff4c 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800237e:	f7ff ff61 	bl	8002244 <__NVIC_GetPriorityGrouping>
 8002382:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	6978      	ldr	r0, [r7, #20]
 800238a:	f7ff ffb1 	bl	80022f0 <NVIC_EncodePriority>
 800238e:	4602      	mov	r2, r0
 8002390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff80 	bl	800229c <__NVIC_SetPriority>
}
 800239c:	bf00      	nop
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff54 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00e      	b.n	80023f0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	795b      	ldrb	r3, [r3, #5]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe fef8 	bl	80011d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2202      	movs	r2, #2
 800240c:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e00a      	b.n	800242a <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	441a      	add	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3301      	adds	r3, #1
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3f0      	bcc.n	8002414 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002440:	693b      	ldr	r3, [r7, #16]
}
 8002442:	4618      	mov	r0, r3
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002462:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <HAL_FLASH_Program+0xa0>)
 8002464:	7e1b      	ldrb	r3, [r3, #24]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_FLASH_Program+0x1e>
 800246a:	2302      	movs	r3, #2
 800246c:	e03b      	b.n	80024e6 <HAL_FLASH_Program+0x96>
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_FLASH_Program+0xa0>)
 8002470:	2201      	movs	r2, #1
 8002472:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002474:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002478:	f000 f870 	bl	800255c <FLASH_WaitForLastOperation>
 800247c:	4603      	mov	r3, r0
 800247e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d12b      	bne.n	80024de <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d105      	bne.n	8002498 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800248c:	783b      	ldrb	r3, [r7, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	68b8      	ldr	r0, [r7, #8]
 8002492:	f000 f91b 	bl	80026cc <FLASH_Program_Byte>
 8002496:	e016      	b.n	80024c6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800249e:	883b      	ldrh	r3, [r7, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	68b8      	ldr	r0, [r7, #8]
 80024a4:	f000 f8ee 	bl	8002684 <FLASH_Program_HalfWord>
 80024a8:	e00d      	b.n	80024c6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d105      	bne.n	80024bc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	68b8      	ldr	r0, [r7, #8]
 80024b6:	f000 f8c3 	bl	8002640 <FLASH_Program_Word>
 80024ba:	e004      	b.n	80024c6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80024bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c0:	68b8      	ldr	r0, [r7, #8]
 80024c2:	f000 f88b 	bl	80025dc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024ca:	f000 f847 	bl	800255c <FLASH_WaitForLastOperation>
 80024ce:	4603      	mov	r3, r0
 80024d0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_FLASH_Program+0xa4>)
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <HAL_FLASH_Program+0xa4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <HAL_FLASH_Program+0xa0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	761a      	strb	r2, [r3, #24]

  return status;
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000027c 	.word	0x2000027c
 80024f4:	40023c00 	.word	0x40023c00

080024f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_FLASH_Unlock+0x38>)
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	da0b      	bge.n	8002522 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_FLASH_Unlock+0x38>)
 800250c:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_FLASH_Unlock+0x3c>)
 800250e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_FLASH_Unlock+0x38>)
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_FLASH_Unlock+0x40>)
 8002514:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_FLASH_Unlock+0x38>)
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	da01      	bge.n	8002522 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002522:	79fb      	ldrb	r3, [r7, #7]
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40023c00 	.word	0x40023c00
 8002534:	45670123 	.word	0x45670123
 8002538:	cdef89ab 	.word	0xcdef89ab

0800253c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_FLASH_Lock+0x1c>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_FLASH_Lock+0x1c>)
 8002546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800254a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40023c00 	.word	0x40023c00

0800255c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <FLASH_WaitForLastOperation+0x78>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800256e:	f7ff fe39 	bl	80021e4 <HAL_GetTick>
 8002572:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002574:	e010      	b.n	8002598 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d00c      	beq.n	8002598 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <FLASH_WaitForLastOperation+0x38>
 8002584:	f7ff fe2e 	bl	80021e4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d201      	bcs.n	8002598 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e019      	b.n	80025cc <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <FLASH_WaitForLastOperation+0x7c>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e8      	bne.n	8002576 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <FLASH_WaitForLastOperation+0x7c>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <FLASH_WaitForLastOperation+0x7c>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <FLASH_WaitForLastOperation+0x7c>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025c2:	f000 f8a5 	bl	8002710 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0

}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	2000027c 	.word	0x2000027c
 80025d8:	40023c00 	.word	0x40023c00

080025dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <FLASH_Program_DoubleWord+0x60>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4a13      	ldr	r2, [pc, #76]	; (800263c <FLASH_Program_DoubleWord+0x60>)
 80025ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <FLASH_Program_DoubleWord+0x60>)
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	4a10      	ldr	r2, [pc, #64]	; (800263c <FLASH_Program_DoubleWord+0x60>)
 80025fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <FLASH_Program_DoubleWord+0x60>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <FLASH_Program_DoubleWord+0x60>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002612:	f3bf 8f6f 	isb	sy
}
 8002616:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	000a      	movs	r2, r1
 8002626:	2300      	movs	r3, #0
 8002628:	68f9      	ldr	r1, [r7, #12]
 800262a:	3104      	adds	r1, #4
 800262c:	4613      	mov	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40023c00 	.word	0x40023c00

08002640 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <FLASH_Program_Word+0x40>)
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <FLASH_Program_Word+0x40>)
 8002650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002654:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <FLASH_Program_Word+0x40>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <FLASH_Program_Word+0x40>)
 800265c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002660:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <FLASH_Program_Word+0x40>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	4a06      	ldr	r2, [pc, #24]	; (8002680 <FLASH_Program_Word+0x40>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	601a      	str	r2, [r3, #0]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40023c00 	.word	0x40023c00

08002684 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <FLASH_Program_HalfWord+0x44>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <FLASH_Program_HalfWord+0x44>)
 8002696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <FLASH_Program_HalfWord+0x44>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <FLASH_Program_HalfWord+0x44>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <FLASH_Program_HalfWord+0x44>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4a06      	ldr	r2, [pc, #24]	; (80026c8 <FLASH_Program_HalfWord+0x44>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	801a      	strh	r2, [r3, #0]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00

080026cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <FLASH_Program_Byte+0x40>)
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	4a0b      	ldr	r2, [pc, #44]	; (800270c <FLASH_Program_Byte+0x40>)
 80026de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <FLASH_Program_Byte+0x40>)
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <FLASH_Program_Byte+0x40>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <FLASH_Program_Byte+0x40>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <FLASH_Program_Byte+0x40>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	701a      	strb	r2, [r3, #0]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40023c00 	.word	0x40023c00

08002710 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002714:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f043 0310 	orr.w	r3, r3, #16
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 800272a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 800272e:	2210      	movs	r2, #16
 8002730:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f043 0308 	orr.w	r3, r3, #8
 8002746:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 8002748:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 800274c:	2220      	movs	r2, #32
 800274e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 8002766:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002768:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800276e:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	4a15      	ldr	r2, [pc, #84]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 8002784:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 8002788:	2280      	movs	r2, #128	; 0x80
 800278a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d009      	beq.n	80027ac <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 80027a2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 80027a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027aa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f043 0320 	orr.w	r3, r3, #32
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <FLASH_SetErrorCode+0xc8>)
 80027c2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <FLASH_SetErrorCode+0xc4>)
 80027c6:	2202      	movs	r2, #2
 80027c8:	60da      	str	r2, [r3, #12]
  }
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	2000027c 	.word	0x2000027c

080027dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_FLASHEx_Erase+0xd8>)
 80027f0:	7e1b      	ldrb	r3, [r3, #24]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_FLASHEx_Erase+0x1e>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e058      	b.n	80028ac <HAL_FLASHEx_Erase+0xd0>
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_FLASHEx_Erase+0xd8>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002800:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002804:	f7ff feaa 	bl	800255c <FLASH_WaitForLastOperation>
 8002808:	4603      	mov	r3, r0
 800280a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d148      	bne.n	80028a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d115      	bne.n	800284e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f000 f868 	bl	8002904 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002834:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002838:	f7ff fe90 	bl	800255c <FLASH_WaitForLastOperation>
 800283c:	4603      	mov	r3, r0
 800283e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_FLASHEx_Erase+0xdc>)
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_FLASHEx_Erase+0xdc>)
 8002846:	f023 0304 	bic.w	r3, r3, #4
 800284a:	6113      	str	r3, [r2, #16]
 800284c:	e028      	b.n	80028a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	e01c      	b.n	8002890 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4619      	mov	r1, r3
 800285e:	68b8      	ldr	r0, [r7, #8]
 8002860:	f000 f874 	bl	800294c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002864:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002868:	f7ff fe78 	bl	800255c <FLASH_WaitForLastOperation>
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_FLASHEx_Erase+0xdc>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_FLASHEx_Erase+0xdc>)
 8002876:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800287a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	601a      	str	r2, [r3, #0]
          break;
 8002888:	e00a      	b.n	80028a0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3301      	adds	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4413      	add	r3, r2
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d3da      	bcc.n	8002856 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80028a0:	f000 f8e8 	bl	8002a74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_FLASHEx_Erase+0xd8>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	761a      	strb	r2, [r3, #24]

  return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	2000027c 	.word	0x2000027c
 80028b8:	40023c00 	.word	0x40023c00

080028bc <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	220f      	movs	r2, #15
 80028c8:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80028ca:	f000 f897 	bl	80029fc <FLASH_OB_GetWRP>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461a      	mov	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80028d6:	f000 f89d 	bl	8002a14 <FLASH_OB_GetRDP>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80028e2:	f000 f87b 	bl	80029dc <FLASH_OB_GetUser>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80028ee:	f000 f8b1 	bl	8002a54 <FLASH_OB_GetBOR>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	615a      	str	r2, [r3, #20]
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002910:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <FLASH_MassErase+0x44>)
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <FLASH_MassErase+0x44>)
 8002916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <FLASH_MassErase+0x44>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	4a09      	ldr	r2, [pc, #36]	; (8002948 <FLASH_MassErase+0x44>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <FLASH_MassErase+0x44>)
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	4313      	orrs	r3, r2
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <FLASH_MassErase+0x44>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6113      	str	r3, [r2, #16]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00

0800294c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e010      	b.n	800298a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d103      	bne.n	8002976 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800296e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e009      	b.n	800298a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d103      	bne.n	8002984 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800297c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e002      	b.n	800298a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002984:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002988:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	490f      	ldr	r1, [pc, #60]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 80029a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <FLASH_Erase_Sector+0x8c>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	6113      	str	r3, [r2, #16]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40023c00 	.word	0x40023c00

080029dc <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <FLASH_OB_GetUser+0x1c>)
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f023 031f 	bic.w	r3, r3, #31
 80029ea:	b2db      	uxtb	r3, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023c00 	.word	0x40023c00

080029fc <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <FLASH_OB_GetWRP+0x14>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40023c16 	.word	0x40023c16

08002a14 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002a1a:	23aa      	movs	r3, #170	; 0xaa
 8002a1c:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <FLASH_OB_GetRDP+0x3c>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2bcc      	cmp	r3, #204	; 0xcc
 8002a26:	d102      	bne.n	8002a2e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002a28:	23cc      	movs	r3, #204	; 0xcc
 8002a2a:	71fb      	strb	r3, [r7, #7]
 8002a2c:	e009      	b.n	8002a42 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <FLASH_OB_GetRDP+0x3c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2baa      	cmp	r3, #170	; 0xaa
 8002a36:	d102      	bne.n	8002a3e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002a38:	23aa      	movs	r3, #170	; 0xaa
 8002a3a:	71fb      	strb	r3, [r7, #7]
 8002a3c:	e001      	b.n	8002a42 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8002a3e:	2355      	movs	r3, #85	; 0x55
 8002a40:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002a42:	79fb      	ldrb	r3, [r7, #7]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40023c15 	.word	0x40023c15

08002a54 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <FLASH_OB_GetBOR+0x1c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	b2db      	uxtb	r3, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40023c14 	.word	0x40023c14

08002a74 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002a78:	4b20      	ldr	r3, [pc, #128]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d017      	beq.n	8002ab4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002a8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a8e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a19      	ldr	r2, [pc, #100]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002a96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a16      	ldr	r2, [pc, #88]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a13      	ldr	r2, [pc, #76]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d017      	beq.n	8002af0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002ad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a07      	ldr	r2, [pc, #28]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ae2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <FLASH_FlushCaches+0x88>)
 8002aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aee:	6013      	str	r3, [r2, #0]
  }
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e159      	b.n	8002dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8148 	bne.w	8002dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a2 	beq.w	8002dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a56      	ldr	r2, [pc, #344]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca2:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_GPIO_Init+0x2ec>)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a49      	ldr	r2, [pc, #292]	; (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x202>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_GPIO_Init+0x2f4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x1fe>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a47      	ldr	r2, [pc, #284]	; (8002df8 <HAL_GPIO_Init+0x2f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x1fa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <HAL_GPIO_Init+0x2fc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x1f6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a45      	ldr	r2, [pc, #276]	; (8002e00 <HAL_GPIO_Init+0x300>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x1f2>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	; (8002dec <HAL_GPIO_Init+0x2ec>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc4:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f aea2 	bls.w	8002b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e24:	e003      	b.n	8002e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	041a      	lsls	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	619a      	str	r2, [r3, #24]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	041a      	lsls	r2, r3, #16
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e267      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d075      	beq.n	8002f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e8e:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d00c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4b85      	ldr	r3, [pc, #532]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b82      	ldr	r3, [pc, #520]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4b7e      	ldr	r3, [pc, #504]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x108>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d157      	bne.n	8002f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e242      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x74>
 8002ed6:	4b76      	ldr	r3, [pc, #472]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a75      	ldr	r2, [pc, #468]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b70      	ldr	r3, [pc, #448]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6f      	ldr	r2, [pc, #444]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6c      	ldr	r2, [pc, #432]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xb0>
 8002f08:	4b69      	ldr	r3, [pc, #420]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a68      	ldr	r2, [pc, #416]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b66      	ldr	r3, [pc, #408]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a65      	ldr	r2, [pc, #404]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7ff f95c 	bl	80021e4 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7ff f958 	bl	80021e4 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e207      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b5b      	ldr	r3, [pc, #364]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xc0>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7ff f948 	bl	80021e4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7ff f944 	bl	80021e4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e1f3      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0xe8>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f86:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b44      	ldr	r3, [pc, #272]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1c7      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4937      	ldr	r1, [pc, #220]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	e03a      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe0:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCC_OscConfig+0x244>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7ff f8fd 	bl	80021e4 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fee:	f7ff f8f9 	bl	80021e4 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1a8      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4925      	ldr	r1, [pc, #148]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_OscConfig+0x244>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7ff f8dc 	bl	80021e4 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7ff f8d8 	bl	80021e4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e187      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d036      	beq.n	80030c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7ff f8bc 	bl	80021e4 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7ff f8b8 	bl	80021e4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e167      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_OscConfig+0x240>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x200>
 800308e:	e01b      	b.n	80030c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_OscConfig+0x248>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7ff f8a5 	bl	80021e4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	e00e      	b.n	80030bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7ff f8a1 	bl	80021e4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d907      	bls.n	80030bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e150      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	42470000 	.word	0x42470000
 80030b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030bc:	4b88      	ldr	r3, [pc, #544]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ea      	bne.n	800309e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8097 	beq.w	8003204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b81      	ldr	r3, [pc, #516]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b7d      	ldr	r3, [pc, #500]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a7c      	ldr	r2, [pc, #496]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b7a      	ldr	r3, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003102:	2301      	movs	r3, #1
 8003104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b77      	ldr	r3, [pc, #476]	; (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d118      	bne.n	8003144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003112:	4b74      	ldr	r3, [pc, #464]	; (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a73      	ldr	r2, [pc, #460]	; (80032e4 <HAL_RCC_OscConfig+0x474>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311e:	f7ff f861 	bl	80021e4 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003126:	f7ff f85d 	bl	80021e4 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e10c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_OscConfig+0x474>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x2ea>
 800314c:	4b64      	ldr	r3, [pc, #400]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a63      	ldr	r2, [pc, #396]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x30c>
 8003162:	4b5f      	ldr	r3, [pc, #380]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a5e      	ldr	r2, [pc, #376]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	4b5c      	ldr	r3, [pc, #368]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a5b      	ldr	r2, [pc, #364]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0x324>
 800317c:	4b58      	ldr	r3, [pc, #352]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a57      	ldr	r2, [pc, #348]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
 8003188:	4b55      	ldr	r3, [pc, #340]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a54      	ldr	r2, [pc, #336]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0304 	bic.w	r3, r3, #4
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7ff f822 	bl	80021e4 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7ff f81e 	bl	80021e4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0cb      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	4b49      	ldr	r3, [pc, #292]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ee      	beq.n	80031a4 <HAL_RCC_OscConfig+0x334>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7ff f80c 	bl	80021e4 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7ff f808 	bl	80021e4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0b5      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e6:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ee      	bne.n	80031d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f8:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	4a38      	ldr	r2, [pc, #224]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80031fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80a1 	beq.w	8003350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320e:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b08      	cmp	r3, #8
 8003218:	d05c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d141      	bne.n	80032a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_RCC_OscConfig+0x478>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe ffdc 	bl	80021e4 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe ffd8 	bl	80021e4 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e087      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	019b      	lsls	r3, r3, #6
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	3b01      	subs	r3, #1
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	491b      	ldr	r1, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCC_OscConfig+0x478>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe ffb1 	bl	80021e4 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe ffad 	bl	80021e4 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e05c      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x416>
 80032a4:	e054      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_RCC_OscConfig+0x478>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe ff9a 	bl	80021e4 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe ff96 	bl	80021e4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e045      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
 80032d2:	e03d      	b.n	8003350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e038      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_RCC_OscConfig+0x4ec>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d028      	beq.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d121      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d11a      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003324:	4293      	cmp	r3, r2
 8003326:	d111      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	3b01      	subs	r3, #1
 8003336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cc      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b68      	ldr	r3, [pc, #416]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d90c      	bls.n	800339c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d044      	beq.n	8003480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d119      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	2b03      	cmp	r3, #3
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e067      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343e:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 0203 	bic.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4934      	ldr	r1, [pc, #208]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003450:	f7fe fec8 	bl	80021e4 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	e00a      	b.n	800346e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fe fec4 	bl	80021e4 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e04f      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 020c 	and.w	r2, r3, #12
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d1eb      	bne.n	8003458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003480:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d20c      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	490a      	ldr	r1, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fa5c 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023c00 	.word	0x40023c00
 800351c:	40023800 	.word	0x40023800
 8003520:	08008e60 	.word	0x08008e60
 8003524:	20000000 	.word	0x20000000
 8003528:	20000004 	.word	0x20000004

0800352c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b090      	sub	sp, #64	; 0x40
 8003532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b08      	cmp	r3, #8
 800354e:	d00d      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x40>
 8003550:	2b08      	cmp	r3, #8
 8003552:	f200 80a1 	bhi.w	8003698 <HAL_RCC_GetSysClockFreq+0x16c>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x34>
 800355a:	2b04      	cmp	r3, #4
 800355c:	d003      	beq.n	8003566 <HAL_RCC_GetSysClockFreq+0x3a>
 800355e:	e09b      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003564:	e09b      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003566:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800356a:	e098      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800356c:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003576:	4b4d      	ldr	r3, [pc, #308]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003582:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	099b      	lsrs	r3, r3, #6
 8003588:	2200      	movs	r2, #0
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	627a      	str	r2, [r7, #36]	; 0x24
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003594:	2100      	movs	r1, #0
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003598:	fb03 f201 	mul.w	r2, r3, r1
 800359c:	2300      	movs	r3, #0
 800359e:	fb00 f303 	mul.w	r3, r0, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	4a43      	ldr	r2, [pc, #268]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035a6:	fba0 1202 	umull	r1, r2, r0, r2
 80035aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ac:	460a      	mov	r2, r1
 80035ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80035b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b2:	4413      	add	r3, r2
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b8:	2200      	movs	r2, #0
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	61fa      	str	r2, [r7, #28]
 80035be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035c6:	f7fd f911 	bl	80007ec <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4613      	mov	r3, r2
 80035d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d2:	e053      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d4:	4b35      	ldr	r3, [pc, #212]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	099b      	lsrs	r3, r3, #6
 80035da:	2200      	movs	r2, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	617a      	str	r2, [r7, #20]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035e6:	f04f 0b00 	mov.w	fp, #0
 80035ea:	4652      	mov	r2, sl
 80035ec:	465b      	mov	r3, fp
 80035ee:	f04f 0000 	mov.w	r0, #0
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	0159      	lsls	r1, r3, #5
 80035f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fc:	0150      	lsls	r0, r2, #5
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	ebb2 080a 	subs.w	r8, r2, sl
 8003606:	eb63 090b 	sbc.w	r9, r3, fp
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003616:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800361a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800361e:	ebb2 0408 	subs.w	r4, r2, r8
 8003622:	eb63 0509 	sbc.w	r5, r3, r9
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	00eb      	lsls	r3, r5, #3
 8003630:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003634:	00e2      	lsls	r2, r4, #3
 8003636:	4614      	mov	r4, r2
 8003638:	461d      	mov	r5, r3
 800363a:	eb14 030a 	adds.w	r3, r4, sl
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	eb45 030b 	adc.w	r3, r5, fp
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003652:	4629      	mov	r1, r5
 8003654:	028b      	lsls	r3, r1, #10
 8003656:	4621      	mov	r1, r4
 8003658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800365c:	4621      	mov	r1, r4
 800365e:	028a      	lsls	r2, r1, #10
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	2200      	movs	r2, #0
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	60fa      	str	r2, [r7, #12]
 800366c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003670:	f7fd f8bc 	bl	80007ec <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4613      	mov	r3, r2
 800367a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_GetSysClockFreq+0x180>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	3301      	adds	r3, #1
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800368c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003696:	e002      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800369c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3740      	adds	r7, #64	; 0x40
 80036a4:	46bd      	mov	sp, r7
 80036a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	00f42400 	.word	0x00f42400
 80036b4:	017d7840 	.word	0x017d7840

080036b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_GetHCLKFreq+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000000 	.word	0x20000000

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036d4:	f7ff fff0 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0a9b      	lsrs	r3, r3, #10
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4903      	ldr	r1, [pc, #12]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	08008e70 	.word	0x08008e70

080036f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036fc:	f7ff ffdc 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 8003700:	4602      	mov	r2, r0
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	0b5b      	lsrs	r3, r3, #13
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	4903      	ldr	r1, [pc, #12]	; (800371c <HAL_RCC_GetPCLK2Freq+0x24>)
 800370e:	5ccb      	ldrb	r3, [r1, r3]
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	08008e70 	.word	0x08008e70

08003720 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	220f      	movs	r2, #15
 800372e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003730:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_RCC_GetClockConfig+0x5c>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0203 	and.w	r2, r3, #3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <HAL_RCC_GetClockConfig+0x5c>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <HAL_RCC_GetClockConfig+0x5c>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_GetClockConfig+0x5c>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	08db      	lsrs	r3, r3, #3
 800375a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_RCC_GetClockConfig+0x60>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0207 	and.w	r2, r3, #7
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	601a      	str	r2, [r3, #0]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	40023c00 	.word	0x40023c00

08003784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e041      	b.n	800381a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe fb1c 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f000 fdaa 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d001      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e044      	b.n	80038c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d018      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x6c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003866:	d013      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x6c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1a      	ldr	r2, [pc, #104]	; (80038d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00e      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x6c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_TIM_Base_Start_IT+0xb8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d009      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x6c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d004      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x6c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d111      	bne.n	80038b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d010      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	e007      	b.n	80038c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40014000 	.word	0x40014000

080038e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e041      	b.n	800397e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fe fa48 	bl	8001da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 fcf8 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_TIM_PWM_Start+0x24>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e022      	b.n	80039f2 <HAL_TIM_PWM_Start+0x6a>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d109      	bne.n	80039c6 <HAL_TIM_PWM_Start+0x3e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	e015      	b.n	80039f2 <HAL_TIM_PWM_Start+0x6a>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d109      	bne.n	80039e0 <HAL_TIM_PWM_Start+0x58>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e008      	b.n	80039f2 <HAL_TIM_PWM_Start+0x6a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e068      	b.n	8003acc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_PWM_Start+0x82>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a08:	e013      	b.n	8003a32 <HAL_TIM_PWM_Start+0xaa>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x92>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a18:	e00b      	b.n	8003a32 <HAL_TIM_PWM_Start+0xaa>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_PWM_Start+0xa2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	e003      	b.n	8003a32 <HAL_TIM_PWM_Start+0xaa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 ffa4 	bl	8004988 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <HAL_TIM_PWM_Start+0x14c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d107      	bne.n	8003a5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <HAL_TIM_PWM_Start+0x14c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d018      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x10e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d013      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x10e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a19      	ldr	r2, [pc, #100]	; (8003ad8 <HAL_TIM_PWM_Start+0x150>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00e      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x10e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a17      	ldr	r2, [pc, #92]	; (8003adc <HAL_TIM_PWM_Start+0x154>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d009      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x10e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a16      	ldr	r2, [pc, #88]	; (8003ae0 <HAL_TIM_PWM_Start+0x158>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d004      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x10e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <HAL_TIM_PWM_Start+0x15c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d111      	bne.n	8003aba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b06      	cmp	r3, #6
 8003aa6:	d010      	beq.n	8003aca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab8:	e007      	b.n	8003aca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40010000 	.word	0x40010000
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800
 8003ae0:	40000c00 	.word	0x40000c00
 8003ae4:	40014000 	.word	0x40014000

08003ae8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e041      	b.n	8003b7e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fe f8fa 	bl	8001d08 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f000 fbf8 	bl	800431c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_IC_Start_IT+0x1e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e013      	b.n	8003bce <HAL_TIM_IC_Start_IT+0x46>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_IC_Start_IT+0x2e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e00b      	b.n	8003bce <HAL_TIM_IC_Start_IT+0x46>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d104      	bne.n	8003bc6 <HAL_TIM_IC_Start_IT+0x3e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	e003      	b.n	8003bce <HAL_TIM_IC_Start_IT+0x46>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d104      	bne.n	8003be0 <HAL_TIM_IC_Start_IT+0x58>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e013      	b.n	8003c08 <HAL_TIM_IC_Start_IT+0x80>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d104      	bne.n	8003bf0 <HAL_TIM_IC_Start_IT+0x68>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e00b      	b.n	8003c08 <HAL_TIM_IC_Start_IT+0x80>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d104      	bne.n	8003c00 <HAL_TIM_IC_Start_IT+0x78>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e003      	b.n	8003c08 <HAL_TIM_IC_Start_IT+0x80>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c0a:	7bbb      	ldrb	r3, [r7, #14]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d102      	bne.n	8003c16 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c10:	7b7b      	ldrb	r3, [r7, #13]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d001      	beq.n	8003c1a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0c2      	b.n	8003da0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_IC_Start_IT+0xa2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c28:	e013      	b.n	8003c52 <HAL_TIM_IC_Start_IT+0xca>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_IC_Start_IT+0xb2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c38:	e00b      	b.n	8003c52 <HAL_TIM_IC_Start_IT+0xca>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_IC_Start_IT+0xc2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c48:	e003      	b.n	8003c52 <HAL_TIM_IC_Start_IT+0xca>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_IC_Start_IT+0xda>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c60:	e013      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x102>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_IC_Start_IT+0xea>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c70:	e00b      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x102>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_IC_Start_IT+0xfa>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c80:	e003      	b.n	8003c8a <HAL_TIM_IC_Start_IT+0x102>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b0c      	cmp	r3, #12
 8003c8e:	d841      	bhi.n	8003d14 <HAL_TIM_IC_Start_IT+0x18c>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <HAL_TIM_IC_Start_IT+0x110>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003ccd 	.word	0x08003ccd
 8003c9c:	08003d15 	.word	0x08003d15
 8003ca0:	08003d15 	.word	0x08003d15
 8003ca4:	08003d15 	.word	0x08003d15
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003d15 	.word	0x08003d15
 8003cb0:	08003d15 	.word	0x08003d15
 8003cb4:	08003d15 	.word	0x08003d15
 8003cb8:	08003cf1 	.word	0x08003cf1
 8003cbc:	08003d15 	.word	0x08003d15
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003d03 	.word	0x08003d03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0202 	orr.w	r2, r2, #2
 8003cda:	60da      	str	r2, [r3, #12]
      break;
 8003cdc:	e01d      	b.n	8003d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0204 	orr.w	r2, r2, #4
 8003cec:	60da      	str	r2, [r3, #12]
      break;
 8003cee:	e014      	b.n	8003d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0208 	orr.w	r2, r2, #8
 8003cfe:	60da      	str	r2, [r3, #12]
      break;
 8003d00:	e00b      	b.n	8003d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0210 	orr.w	r2, r2, #16
 8003d10:	60da      	str	r2, [r3, #12]
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      break;
 8003d18:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d13e      	bne.n	8003d9e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2201      	movs	r2, #1
 8003d26:	6839      	ldr	r1, [r7, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fe2d 	bl	8004988 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_TIM_IC_Start_IT+0x220>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_TIM_IC_Start_IT+0x1e2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d40:	d013      	beq.n	8003d6a <HAL_TIM_IC_Start_IT+0x1e2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_TIM_IC_Start_IT+0x224>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_TIM_IC_Start_IT+0x1e2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <HAL_TIM_IC_Start_IT+0x228>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_TIM_IC_Start_IT+0x1e2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <HAL_TIM_IC_Start_IT+0x22c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_TIM_IC_Start_IT+0x1e2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <HAL_TIM_IC_Start_IT+0x230>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d111      	bne.n	8003d8e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b06      	cmp	r3, #6
 8003d7a:	d010      	beq.n	8003d9e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8c:	e007      	b.n	8003d9e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40000c00 	.word	0x40000c00
 8003db8:	40014000 	.word	0x40014000

08003dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d020      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01b      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0202 	mvn.w	r2, #2
 8003df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fe f872 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa66 	bl	80042e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fa6d 	bl	80042f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d020      	beq.n	8003e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01b      	beq.n	8003e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0204 	mvn.w	r2, #4
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fe f84c 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fa40 	bl	80042e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fa47 	bl	80042f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d020      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01b      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0208 	mvn.w	r2, #8
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe f826 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa1a 	bl	80042e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fa21 	bl	80042f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d020      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01b      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0210 	mvn.w	r2, #16
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fe f800 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9f4 	bl	80042e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f9fb 	bl	80042f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0201 	mvn.w	r2, #1
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd fbc8 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fdbc 	bl	8004ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00c      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f9cc 	bl	8004308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0220 	mvn.w	r2, #32
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fd8e 	bl	8004ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e088      	b.n	80040cc <HAL_TIM_IC_ConfigChannel+0x130>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003fd8:	f000 fbb8 	bl	800474c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 020c 	bic.w	r2, r2, #12
 8003fea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6999      	ldr	r1, [r3, #24]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	619a      	str	r2, [r3, #24]
 8003ffe:	e060      	b.n	80040c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b04      	cmp	r3, #4
 8004004:	d11c      	bne.n	8004040 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004016:	f000 fc01 	bl	800481c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004028:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6999      	ldr	r1, [r3, #24]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	021a      	lsls	r2, r3, #8
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	619a      	str	r2, [r3, #24]
 800403e:	e040      	b.n	80040c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b08      	cmp	r3, #8
 8004044:	d11b      	bne.n	800407e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004056:	f000 fc1e 	bl	8004896 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 020c 	bic.w	r2, r2, #12
 8004068:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69d9      	ldr	r1, [r3, #28]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	61da      	str	r2, [r3, #28]
 800407c:	e021      	b.n	80040c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d11c      	bne.n	80040be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004094:	f000 fc3b 	bl	800490e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69d9      	ldr	r1, [r3, #28]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	021a      	lsls	r2, r3, #8
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	61da      	str	r2, [r3, #28]
 80040bc:	e001      	b.n	80040c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e0ae      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b0c      	cmp	r3, #12
 80040fe:	f200 809f 	bhi.w	8004240 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004102:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	0800413d 	.word	0x0800413d
 800410c:	08004241 	.word	0x08004241
 8004110:	08004241 	.word	0x08004241
 8004114:	08004241 	.word	0x08004241
 8004118:	0800417d 	.word	0x0800417d
 800411c:	08004241 	.word	0x08004241
 8004120:	08004241 	.word	0x08004241
 8004124:	08004241 	.word	0x08004241
 8004128:	080041bf 	.word	0x080041bf
 800412c:	08004241 	.word	0x08004241
 8004130:	08004241 	.word	0x08004241
 8004134:	08004241 	.word	0x08004241
 8004138:	080041ff 	.word	0x080041ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f976 	bl	8004434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0208 	orr.w	r2, r2, #8
 8004156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0204 	bic.w	r2, r2, #4
 8004166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6999      	ldr	r1, [r3, #24]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	619a      	str	r2, [r3, #24]
      break;
 800417a:	e064      	b.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f9bc 	bl	8004500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6999      	ldr	r1, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	021a      	lsls	r2, r3, #8
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	619a      	str	r2, [r3, #24]
      break;
 80041bc:	e043      	b.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fa07 	bl	80045d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0208 	orr.w	r2, r2, #8
 80041d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0204 	bic.w	r2, r2, #4
 80041e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69d9      	ldr	r1, [r3, #28]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	61da      	str	r2, [r3, #28]
      break;
 80041fc:	e023      	b.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fa51 	bl	80046ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69d9      	ldr	r1, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	021a      	lsls	r2, r3, #8
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	61da      	str	r2, [r3, #28]
      break;
 800423e:	e002      	b.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d831      	bhi.n	80042d0 <HAL_TIM_ReadCapturedValue+0x78>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <HAL_TIM_ReadCapturedValue+0x1c>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	080042a9 	.word	0x080042a9
 8004278:	080042d1 	.word	0x080042d1
 800427c:	080042d1 	.word	0x080042d1
 8004280:	080042d1 	.word	0x080042d1
 8004284:	080042b3 	.word	0x080042b3
 8004288:	080042d1 	.word	0x080042d1
 800428c:	080042d1 	.word	0x080042d1
 8004290:	080042d1 	.word	0x080042d1
 8004294:	080042bd 	.word	0x080042bd
 8004298:	080042d1 	.word	0x080042d1
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080042d1 	.word	0x080042d1
 80042a4:	080042c7 	.word	0x080042c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	60fb      	str	r3, [r7, #12]

      break;
 80042b0:	e00f      	b.n	80042d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	60fb      	str	r3, [r7, #12]

      break;
 80042ba:	e00a      	b.n	80042d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	60fb      	str	r3, [r7, #12]

      break;
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	60fb      	str	r3, [r7, #12]

      break;
 80042ce:	e000      	b.n	80042d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80042d0:	bf00      	nop
  }

  return tmpreg;
 80042d2:	68fb      	ldr	r3, [r7, #12]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a3a      	ldr	r2, [pc, #232]	; (8004418 <TIM_Base_SetConfig+0xfc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00f      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433a:	d00b      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a37      	ldr	r2, [pc, #220]	; (800441c <TIM_Base_SetConfig+0x100>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a36      	ldr	r2, [pc, #216]	; (8004420 <TIM_Base_SetConfig+0x104>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0x38>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a35      	ldr	r2, [pc, #212]	; (8004424 <TIM_Base_SetConfig+0x108>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2b      	ldr	r2, [pc, #172]	; (8004418 <TIM_Base_SetConfig+0xfc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01b      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d017      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <TIM_Base_SetConfig+0x100>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a27      	ldr	r2, [pc, #156]	; (8004420 <TIM_Base_SetConfig+0x104>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00f      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a26      	ldr	r2, [pc, #152]	; (8004424 <TIM_Base_SetConfig+0x108>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <TIM_Base_SetConfig+0x10c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a24      	ldr	r2, [pc, #144]	; (800442c <TIM_Base_SetConfig+0x110>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a23      	ldr	r2, [pc, #140]	; (8004430 <TIM_Base_SetConfig+0x114>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <TIM_Base_SetConfig+0xfc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d103      	bne.n	80043ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d105      	bne.n	800440a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f023 0201 	bic.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	611a      	str	r2, [r3, #16]
  }
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800

08004434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	f023 0201 	bic.w	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f023 0302 	bic.w	r3, r3, #2
 800447c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <TIM_OC1_SetConfig+0xc8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10c      	bne.n	80044aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0308 	bic.w	r3, r3, #8
 8004496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a13      	ldr	r2, [pc, #76]	; (80044fc <TIM_OC1_SetConfig+0xc8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40010000 	.word	0x40010000

08004500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f023 0210 	bic.w	r2, r3, #16
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0320 	bic.w	r3, r3, #32
 800454a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <TIM_OC2_SetConfig+0xd4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d10d      	bne.n	800457c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <TIM_OC2_SetConfig+0xd4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d113      	bne.n	80045ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800458a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000

080045d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <TIM_OC3_SetConfig+0xd0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10d      	bne.n	8004652 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800463c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <TIM_OC3_SetConfig+0xd0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d113      	bne.n	8004682 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	621a      	str	r2, [r3, #32]
}
 800469c:	bf00      	nop
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40010000 	.word	0x40010000

080046ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	031b      	lsls	r3, r3, #12
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a10      	ldr	r2, [pc, #64]	; (8004748 <TIM_OC4_SetConfig+0x9c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d109      	bne.n	8004720 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	019b      	lsls	r3, r3, #6
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000

0800474c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f023 0201 	bic.w	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a24      	ldr	r2, [pc, #144]	; (8004808 <TIM_TI1_SetConfig+0xbc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <TIM_TI1_SetConfig+0x56>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004780:	d00f      	beq.n	80047a2 <TIM_TI1_SetConfig+0x56>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a21      	ldr	r2, [pc, #132]	; (800480c <TIM_TI1_SetConfig+0xc0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_TI1_SetConfig+0x56>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4a20      	ldr	r2, [pc, #128]	; (8004810 <TIM_TI1_SetConfig+0xc4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d007      	beq.n	80047a2 <TIM_TI1_SetConfig+0x56>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <TIM_TI1_SetConfig+0xc8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_TI1_SetConfig+0x56>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <TIM_TI1_SetConfig+0xcc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <TIM_TI1_SetConfig+0x5a>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <TIM_TI1_SetConfig+0x5c>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e003      	b.n	80047c6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f023 030a 	bic.w	r3, r3, #10
 80047e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 030a 	and.w	r3, r3, #10
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40010000 	.word	0x40010000
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40014000 	.word	0x40014000

0800481c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f023 0210 	bic.w	r2, r3, #16
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800485a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	031b      	lsls	r3, r3, #12
 8004860:	b29b      	uxth	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800486e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004896:	b480      	push	{r7}
 8004898:	b087      	sub	sp, #28
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80048e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	621a      	str	r2, [r3, #32]
}
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800490e:	b480      	push	{r7}
 8004910:	b087      	sub	sp, #28
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800494c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	031b      	lsls	r3, r3, #12
 8004952:	b29b      	uxth	r3, r3
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004960:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	031b      	lsls	r3, r3, #12
 8004966:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	621a      	str	r2, [r3, #32]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	2201      	movs	r2, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1a      	ldr	r2, [r3, #32]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	401a      	ands	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	fa01 f303 	lsl.w	r3, r1, r3
 80049c0:	431a      	orrs	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e050      	b.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d013      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a16      	ldr	r2, [pc, #88]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a13      	ldr	r2, [pc, #76]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10c      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40014000 	.word	0x40014000

08004ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e042      	b.n	8004b70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd fac8 	bl	8002094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2224      	movs	r2, #36	; 0x24
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fa09 	bl	8004f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d175      	bne.n	8004c84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_UART_Transmit+0x2c>
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e06e      	b.n	8004c86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2221      	movs	r2, #33	; 0x21
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bb6:	f7fd fb15 	bl	80021e4 <HAL_GetTick>
 8004bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd0:	d108      	bne.n	8004be4 <HAL_UART_Transmit+0x6c>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d104      	bne.n	8004be4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e003      	b.n	8004bec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bec:	e02e      	b.n	8004c4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f8df 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e03a      	b.n	8004c86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	3302      	adds	r3, #2
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	e007      	b.n	8004c3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1cb      	bne.n	8004bee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2140      	movs	r1, #64	; 0x40
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f8ab 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e006      	b.n	8004c86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b08a      	sub	sp, #40	; 0x28
 8004c92:	af02      	add	r7, sp, #8
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	f040 8081 	bne.w	8004db2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_UART_Receive+0x2e>
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e079      	b.n	8004db4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2222      	movs	r2, #34	; 0x22
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd4:	f7fd fa86 	bl	80021e4 <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cee:	d108      	bne.n	8004d02 <HAL_UART_Receive+0x74>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	e003      	b.n	8004d0a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d0a:	e047      	b.n	8004d9c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2200      	movs	r2, #0
 8004d14:	2120      	movs	r1, #32
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f850 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e042      	b.n	8004db4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10c      	bne.n	8004d4e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3302      	adds	r3, #2
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	e01f      	b.n	8004d8e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d56:	d007      	beq.n	8004d68 <HAL_UART_Receive+0xda>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_UART_Receive+0xe8>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e008      	b.n	8004d88 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1b2      	bne.n	8004d0c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e000      	b.n	8004db4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	e03b      	b.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d037      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd6:	f7fd fa05 	bl	80021e4 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d302      	bcc.n	8004dec <UART_WaitOnFlagUntilTimeout+0x30>
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e03a      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d023      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b80      	cmp	r3, #128	; 0x80
 8004e02:	d020      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d01d      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d116      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f81d 	bl	8004e6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2208      	movs	r2, #8
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e00f      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d0b4      	beq.n	8004dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b095      	sub	sp, #84	; 0x54
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e96:	643a      	str	r2, [r7, #64]	; 0x40
 8004e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e5      	bne.n	8004e76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3314      	adds	r3, #20
 8004eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3314      	adds	r3, #20
 8004ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e5      	bne.n	8004eaa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d119      	bne.n	8004f1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f023 0310 	bic.w	r3, r3, #16
 8004efc:	647b      	str	r3, [r7, #68]	; 0x44
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f06:	61ba      	str	r2, [r7, #24]
 8004f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	613b      	str	r3, [r7, #16]
   return(result);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e5      	bne.n	8004ee6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f28:	bf00      	nop
 8004f2a:	3754      	adds	r7, #84	; 0x54
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f38:	b0c0      	sub	sp, #256	; 0x100
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f50:	68d9      	ldr	r1, [r3, #12]
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	ea40 0301 	orr.w	r3, r0, r1
 8004f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f8c:	f021 010c 	bic.w	r1, r1, #12
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	6999      	ldr	r1, [r3, #24]
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	ea40 0301 	orr.w	r3, r0, r1
 8004fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b8f      	ldr	r3, [pc, #572]	; (8005200 <UART_SetConfig+0x2cc>)
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d005      	beq.n	8004fd4 <UART_SetConfig+0xa0>
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b8d      	ldr	r3, [pc, #564]	; (8005204 <UART_SetConfig+0x2d0>)
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d104      	bne.n	8004fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fd4:	f7fe fb90 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 8004fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fdc:	e003      	b.n	8004fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fde:	f7fe fb77 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8004fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff0:	f040 810c 	bne.w	800520c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005006:	4622      	mov	r2, r4
 8005008:	462b      	mov	r3, r5
 800500a:	1891      	adds	r1, r2, r2
 800500c:	65b9      	str	r1, [r7, #88]	; 0x58
 800500e:	415b      	adcs	r3, r3
 8005010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005016:	4621      	mov	r1, r4
 8005018:	eb12 0801 	adds.w	r8, r2, r1
 800501c:	4629      	mov	r1, r5
 800501e:	eb43 0901 	adc.w	r9, r3, r1
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800502e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005036:	4690      	mov	r8, r2
 8005038:	4699      	mov	r9, r3
 800503a:	4623      	mov	r3, r4
 800503c:	eb18 0303 	adds.w	r3, r8, r3
 8005040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005044:	462b      	mov	r3, r5
 8005046:	eb49 0303 	adc.w	r3, r9, r3
 800504a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800505a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800505e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005062:	460b      	mov	r3, r1
 8005064:	18db      	adds	r3, r3, r3
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
 8005068:	4613      	mov	r3, r2
 800506a:	eb42 0303 	adc.w	r3, r2, r3
 800506e:	657b      	str	r3, [r7, #84]	; 0x54
 8005070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005078:	f7fb fbb8 	bl	80007ec <__aeabi_uldivmod>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4b61      	ldr	r3, [pc, #388]	; (8005208 <UART_SetConfig+0x2d4>)
 8005082:	fba3 2302 	umull	r2, r3, r3, r2
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	011c      	lsls	r4, r3, #4
 800508a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005094:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	1891      	adds	r1, r2, r2
 80050a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80050a4:	415b      	adcs	r3, r3
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050ac:	4641      	mov	r1, r8
 80050ae:	eb12 0a01 	adds.w	sl, r2, r1
 80050b2:	4649      	mov	r1, r9
 80050b4:	eb43 0b01 	adc.w	fp, r3, r1
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050cc:	4692      	mov	sl, r2
 80050ce:	469b      	mov	fp, r3
 80050d0:	4643      	mov	r3, r8
 80050d2:	eb1a 0303 	adds.w	r3, sl, r3
 80050d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050da:	464b      	mov	r3, r9
 80050dc:	eb4b 0303 	adc.w	r3, fp, r3
 80050e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050f8:	460b      	mov	r3, r1
 80050fa:	18db      	adds	r3, r3, r3
 80050fc:	643b      	str	r3, [r7, #64]	; 0x40
 80050fe:	4613      	mov	r3, r2
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	647b      	str	r3, [r7, #68]	; 0x44
 8005106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800510a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800510e:	f7fb fb6d 	bl	80007ec <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4611      	mov	r1, r2
 8005118:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <UART_SetConfig+0x2d4>)
 800511a:	fba3 2301 	umull	r2, r3, r3, r1
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	2264      	movs	r2, #100	; 0x64
 8005122:	fb02 f303 	mul.w	r3, r2, r3
 8005126:	1acb      	subs	r3, r1, r3
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800512e:	4b36      	ldr	r3, [pc, #216]	; (8005208 <UART_SetConfig+0x2d4>)
 8005130:	fba3 2302 	umull	r2, r3, r3, r2
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800513c:	441c      	add	r4, r3
 800513e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005142:	2200      	movs	r2, #0
 8005144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005148:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800514c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	1891      	adds	r1, r2, r2
 8005156:	63b9      	str	r1, [r7, #56]	; 0x38
 8005158:	415b      	adcs	r3, r3
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800515c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005160:	4641      	mov	r1, r8
 8005162:	1851      	adds	r1, r2, r1
 8005164:	6339      	str	r1, [r7, #48]	; 0x30
 8005166:	4649      	mov	r1, r9
 8005168:	414b      	adcs	r3, r1
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005178:	4659      	mov	r1, fp
 800517a:	00cb      	lsls	r3, r1, #3
 800517c:	4651      	mov	r1, sl
 800517e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005182:	4651      	mov	r1, sl
 8005184:	00ca      	lsls	r2, r1, #3
 8005186:	4610      	mov	r0, r2
 8005188:	4619      	mov	r1, r3
 800518a:	4603      	mov	r3, r0
 800518c:	4642      	mov	r2, r8
 800518e:	189b      	adds	r3, r3, r2
 8005190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005194:	464b      	mov	r3, r9
 8005196:	460a      	mov	r2, r1
 8005198:	eb42 0303 	adc.w	r3, r2, r3
 800519c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051b4:	460b      	mov	r3, r1
 80051b6:	18db      	adds	r3, r3, r3
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ba:	4613      	mov	r3, r2
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051ca:	f7fb fb0f 	bl	80007ec <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <UART_SetConfig+0x2d4>)
 80051d4:	fba3 1302 	umull	r1, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	2164      	movs	r1, #100	; 0x64
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	3332      	adds	r3, #50	; 0x32
 80051e6:	4a08      	ldr	r2, [pc, #32]	; (8005208 <UART_SetConfig+0x2d4>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 0207 	and.w	r2, r3, #7
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4422      	add	r2, r4
 80051fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051fc:	e106      	b.n	800540c <UART_SetConfig+0x4d8>
 80051fe:	bf00      	nop
 8005200:	40011000 	.word	0x40011000
 8005204:	40011400 	.word	0x40011400
 8005208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800520c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005210:	2200      	movs	r2, #0
 8005212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005216:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800521a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800521e:	4642      	mov	r2, r8
 8005220:	464b      	mov	r3, r9
 8005222:	1891      	adds	r1, r2, r2
 8005224:	6239      	str	r1, [r7, #32]
 8005226:	415b      	adcs	r3, r3
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800522e:	4641      	mov	r1, r8
 8005230:	1854      	adds	r4, r2, r1
 8005232:	4649      	mov	r1, r9
 8005234:	eb43 0501 	adc.w	r5, r3, r1
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	00eb      	lsls	r3, r5, #3
 8005242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005246:	00e2      	lsls	r2, r4, #3
 8005248:	4614      	mov	r4, r2
 800524a:	461d      	mov	r5, r3
 800524c:	4643      	mov	r3, r8
 800524e:	18e3      	adds	r3, r4, r3
 8005250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005254:	464b      	mov	r3, r9
 8005256:	eb45 0303 	adc.w	r3, r5, r3
 800525a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800526a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800527a:	4629      	mov	r1, r5
 800527c:	008b      	lsls	r3, r1, #2
 800527e:	4621      	mov	r1, r4
 8005280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005284:	4621      	mov	r1, r4
 8005286:	008a      	lsls	r2, r1, #2
 8005288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800528c:	f7fb faae 	bl	80007ec <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4b60      	ldr	r3, [pc, #384]	; (8005418 <UART_SetConfig+0x4e4>)
 8005296:	fba3 2302 	umull	r2, r3, r3, r2
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	011c      	lsls	r4, r3, #4
 800529e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	1891      	adds	r1, r2, r2
 80052b6:	61b9      	str	r1, [r7, #24]
 80052b8:	415b      	adcs	r3, r3
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c0:	4641      	mov	r1, r8
 80052c2:	1851      	adds	r1, r2, r1
 80052c4:	6139      	str	r1, [r7, #16]
 80052c6:	4649      	mov	r1, r9
 80052c8:	414b      	adcs	r3, r1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052d8:	4659      	mov	r1, fp
 80052da:	00cb      	lsls	r3, r1, #3
 80052dc:	4651      	mov	r1, sl
 80052de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e2:	4651      	mov	r1, sl
 80052e4:	00ca      	lsls	r2, r1, #3
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	4642      	mov	r2, r8
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052f4:	464b      	mov	r3, r9
 80052f6:	460a      	mov	r2, r1
 80052f8:	eb42 0303 	adc.w	r3, r2, r3
 80052fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	67bb      	str	r3, [r7, #120]	; 0x78
 800530a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005318:	4649      	mov	r1, r9
 800531a:	008b      	lsls	r3, r1, #2
 800531c:	4641      	mov	r1, r8
 800531e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005322:	4641      	mov	r1, r8
 8005324:	008a      	lsls	r2, r1, #2
 8005326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800532a:	f7fb fa5f 	bl	80007ec <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4611      	mov	r1, r2
 8005334:	4b38      	ldr	r3, [pc, #224]	; (8005418 <UART_SetConfig+0x4e4>)
 8005336:	fba3 2301 	umull	r2, r3, r3, r1
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	2264      	movs	r2, #100	; 0x64
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	1acb      	subs	r3, r1, r3
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	3332      	adds	r3, #50	; 0x32
 8005348:	4a33      	ldr	r2, [pc, #204]	; (8005418 <UART_SetConfig+0x4e4>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005354:	441c      	add	r4, r3
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	2200      	movs	r2, #0
 800535c:	673b      	str	r3, [r7, #112]	; 0x70
 800535e:	677a      	str	r2, [r7, #116]	; 0x74
 8005360:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005364:	4642      	mov	r2, r8
 8005366:	464b      	mov	r3, r9
 8005368:	1891      	adds	r1, r2, r2
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	415b      	adcs	r3, r3
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005374:	4641      	mov	r1, r8
 8005376:	1851      	adds	r1, r2, r1
 8005378:	6039      	str	r1, [r7, #0]
 800537a:	4649      	mov	r1, r9
 800537c:	414b      	adcs	r3, r1
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800538c:	4659      	mov	r1, fp
 800538e:	00cb      	lsls	r3, r1, #3
 8005390:	4651      	mov	r1, sl
 8005392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005396:	4651      	mov	r1, sl
 8005398:	00ca      	lsls	r2, r1, #3
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	4642      	mov	r2, r8
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053a6:	464b      	mov	r3, r9
 80053a8:	460a      	mov	r2, r1
 80053aa:	eb42 0303 	adc.w	r3, r2, r3
 80053ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ba:	667a      	str	r2, [r7, #100]	; 0x64
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053c8:	4649      	mov	r1, r9
 80053ca:	008b      	lsls	r3, r1, #2
 80053cc:	4641      	mov	r1, r8
 80053ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d2:	4641      	mov	r1, r8
 80053d4:	008a      	lsls	r2, r1, #2
 80053d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053da:	f7fb fa07 	bl	80007ec <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <UART_SetConfig+0x4e4>)
 80053e4:	fba3 1302 	umull	r1, r3, r3, r2
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	2164      	movs	r1, #100	; 0x64
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	3332      	adds	r3, #50	; 0x32
 80053f6:	4a08      	ldr	r2, [pc, #32]	; (8005418 <UART_SetConfig+0x4e4>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4422      	add	r2, r4
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005412:	46bd      	mov	sp, r7
 8005414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005418:	51eb851f 	.word	0x51eb851f

0800541c <__NVIC_SetPriority>:
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542c:	2b00      	cmp	r3, #0
 800542e:	db0a      	blt.n	8005446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	490c      	ldr	r1, [pc, #48]	; (8005468 <__NVIC_SetPriority+0x4c>)
 8005436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	440b      	add	r3, r1
 8005440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005444:	e00a      	b.n	800545c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4908      	ldr	r1, [pc, #32]	; (800546c <__NVIC_SetPriority+0x50>)
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	3b04      	subs	r3, #4
 8005454:	0112      	lsls	r2, r2, #4
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	440b      	add	r3, r1
 800545a:	761a      	strb	r2, [r3, #24]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	e000e100 	.word	0xe000e100
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <SysTick_Handler+0x1c>)
 8005476:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005478:	f002 fa36 	bl	80078e8 <xTaskGetSchedulerState>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d001      	beq.n	8005486 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005482:	f003 f919 	bl	80086b8 <xPortSysTickHandler>
  }
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	e000e010 	.word	0xe000e010

08005490 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005494:	2100      	movs	r1, #0
 8005496:	f06f 0004 	mvn.w	r0, #4
 800549a:	f7ff ffbf 	bl	800541c <__NVIC_SetPriority>
#endif
}
 800549e:	bf00      	nop
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054aa:	f3ef 8305 	mrs	r3, IPSR
 80054ae:	603b      	str	r3, [r7, #0]
  return(result);
 80054b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054b6:	f06f 0305 	mvn.w	r3, #5
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	e00c      	b.n	80054d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <osKernelInitialize+0x44>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d105      	bne.n	80054d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054c6:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <osKernelInitialize+0x44>)
 80054c8:	2201      	movs	r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	e002      	b.n	80054d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295
 80054d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054d8:	687b      	ldr	r3, [r7, #4]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	2000029c 	.word	0x2000029c

080054ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f2:	f3ef 8305 	mrs	r3, IPSR
 80054f6:	603b      	str	r3, [r7, #0]
  return(result);
 80054f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <osKernelStart+0x1a>
    stat = osErrorISR;
 80054fe:	f06f 0305 	mvn.w	r3, #5
 8005502:	607b      	str	r3, [r7, #4]
 8005504:	e010      	b.n	8005528 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <osKernelStart+0x48>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d109      	bne.n	8005522 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800550e:	f7ff ffbf 	bl	8005490 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <osKernelStart+0x48>)
 8005514:	2202      	movs	r2, #2
 8005516:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005518:	f001 fdc2 	bl	80070a0 <vTaskStartScheduler>
      stat = osOK;
 800551c:	2300      	movs	r3, #0
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	e002      	b.n	8005528 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005522:	f04f 33ff 	mov.w	r3, #4294967295
 8005526:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005528:	687b      	ldr	r3, [r7, #4]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	2000029c 	.word	0x2000029c

08005538 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b08e      	sub	sp, #56	; 0x38
 800553c:	af04      	add	r7, sp, #16
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005548:	f3ef 8305 	mrs	r3, IPSR
 800554c:	617b      	str	r3, [r7, #20]
  return(result);
 800554e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005550:	2b00      	cmp	r3, #0
 8005552:	d17e      	bne.n	8005652 <osThreadNew+0x11a>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d07b      	beq.n	8005652 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800555e:	2318      	movs	r3, #24
 8005560:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005566:	f04f 33ff 	mov.w	r3, #4294967295
 800556a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d045      	beq.n	80055fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <osThreadNew+0x48>
        name = attr->name;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d008      	beq.n	80055a6 <osThreadNew+0x6e>
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b38      	cmp	r3, #56	; 0x38
 8005598:	d805      	bhi.n	80055a6 <osThreadNew+0x6e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <osThreadNew+0x72>
        return (NULL);
 80055a6:	2300      	movs	r3, #0
 80055a8:	e054      	b.n	8005654 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00e      	beq.n	80055e0 <osThreadNew+0xa8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2ba7      	cmp	r3, #167	; 0xa7
 80055c8:	d90a      	bls.n	80055e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d006      	beq.n	80055e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <osThreadNew+0xa8>
        mem = 1;
 80055da:	2301      	movs	r3, #1
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e010      	b.n	8005602 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10c      	bne.n	8005602 <osThreadNew+0xca>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d108      	bne.n	8005602 <osThreadNew+0xca>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <osThreadNew+0xca>
          mem = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e001      	b.n	8005602 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d110      	bne.n	800562a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005610:	9202      	str	r2, [sp, #8]
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6a3a      	ldr	r2, [r7, #32]
 800561c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f001 fb62 	bl	8006ce8 <xTaskCreateStatic>
 8005624:	4603      	mov	r3, r0
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	e013      	b.n	8005652 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d110      	bne.n	8005652 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	b29a      	uxth	r2, r3
 8005634:	f107 0310 	add.w	r3, r7, #16
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f001 fbad 	bl	8006da2 <xTaskCreate>
 8005648:	4603      	mov	r3, r0
 800564a:	2b01      	cmp	r3, #1
 800564c:	d001      	beq.n	8005652 <osThreadNew+0x11a>
            hTask = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005652:	693b      	ldr	r3, [r7, #16]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3728      	adds	r7, #40	; 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005664:	f3ef 8305 	mrs	r3, IPSR
 8005668:	60bb      	str	r3, [r7, #8]
  return(result);
 800566a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <osDelay+0x1c>
    stat = osErrorISR;
 8005670:	f06f 0305 	mvn.w	r3, #5
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e007      	b.n	8005688 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 fcd8 	bl	8007038 <vTaskDelay>
    }
  }

  return (stat);
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005692:	b580      	push	{r7, lr}
 8005694:	b08a      	sub	sp, #40	; 0x28
 8005696:	af02      	add	r7, sp, #8
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056a2:	f3ef 8305 	mrs	r3, IPSR
 80056a6:	613b      	str	r3, [r7, #16]
  return(result);
 80056a8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d175      	bne.n	800579a <osSemaphoreNew+0x108>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d072      	beq.n	800579a <osSemaphoreNew+0x108>
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d86e      	bhi.n	800579a <osSemaphoreNew+0x108>
    mem = -1;
 80056bc:	f04f 33ff 	mov.w	r3, #4294967295
 80056c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d015      	beq.n	80056f4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d006      	beq.n	80056de <osSemaphoreNew+0x4c>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b4f      	cmp	r3, #79	; 0x4f
 80056d6:	d902      	bls.n	80056de <osSemaphoreNew+0x4c>
        mem = 1;
 80056d8:	2301      	movs	r3, #1
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	e00c      	b.n	80056f8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d108      	bne.n	80056f8 <osSemaphoreNew+0x66>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <osSemaphoreNew+0x66>
          mem = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	e001      	b.n	80056f8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d04c      	beq.n	800579a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d128      	bne.n	8005758 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d10a      	bne.n	8005722 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2203      	movs	r2, #3
 8005712:	9200      	str	r2, [sp, #0]
 8005714:	2200      	movs	r2, #0
 8005716:	2100      	movs	r1, #0
 8005718:	2001      	movs	r0, #1
 800571a:	f000 fb70 	bl	8005dfe <xQueueGenericCreateStatic>
 800571e:	61f8      	str	r0, [r7, #28]
 8005720:	e005      	b.n	800572e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005722:	2203      	movs	r2, #3
 8005724:	2100      	movs	r1, #0
 8005726:	2001      	movs	r0, #1
 8005728:	f000 fbe1 	bl	8005eee <xQueueGenericCreate>
 800572c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d022      	beq.n	800577a <osSemaphoreNew+0xe8>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01f      	beq.n	800577a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800573a:	2300      	movs	r3, #0
 800573c:	2200      	movs	r2, #0
 800573e:	2100      	movs	r1, #0
 8005740:	69f8      	ldr	r0, [r7, #28]
 8005742:	f000 fc9b 	bl	800607c <xQueueGenericSend>
 8005746:	4603      	mov	r3, r0
 8005748:	2b01      	cmp	r3, #1
 800574a:	d016      	beq.n	800577a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800574c:	69f8      	ldr	r0, [r7, #28]
 800574e:	f001 f8f7 	bl	8006940 <vQueueDelete>
            hSemaphore = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e010      	b.n	800577a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d108      	bne.n	8005770 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	461a      	mov	r2, r3
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fc1e 	bl	8005fa8 <xQueueCreateCountingSemaphoreStatic>
 800576c:	61f8      	str	r0, [r7, #28]
 800576e:	e004      	b.n	800577a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fc4f 	bl	8006016 <xQueueCreateCountingSemaphore>
 8005778:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00c      	beq.n	800579a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e001      	b.n	8005792 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005792:	6979      	ldr	r1, [r7, #20]
 8005794:	69f8      	ldr	r0, [r7, #28]
 8005796:	f001 fa1f 	bl	8006bd8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800579a:	69fb      	ldr	r3, [r7, #28]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3720      	adds	r7, #32
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80057bc:	f06f 0303 	mvn.w	r3, #3
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	e039      	b.n	8005838 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c4:	f3ef 8305 	mrs	r3, IPSR
 80057c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d022      	beq.n	8005816 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80057d6:	f06f 0303 	mvn.w	r3, #3
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e02c      	b.n	8005838 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80057e2:	f107 0308 	add.w	r3, r7, #8
 80057e6:	461a      	mov	r2, r3
 80057e8:	2100      	movs	r1, #0
 80057ea:	6938      	ldr	r0, [r7, #16]
 80057ec:	f001 f828 	bl	8006840 <xQueueReceiveFromISR>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d003      	beq.n	80057fe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80057f6:	f06f 0302 	mvn.w	r3, #2
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e01c      	b.n	8005838 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d019      	beq.n	8005838 <osSemaphoreAcquire+0x94>
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <osSemaphoreAcquire+0xa0>)
 8005806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	e010      	b.n	8005838 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6938      	ldr	r0, [r7, #16]
 800581a:	f000 ff11 	bl	8006640 <xQueueSemaphoreTake>
 800581e:	4603      	mov	r3, r0
 8005820:	2b01      	cmp	r3, #1
 8005822:	d009      	beq.n	8005838 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800582a:	f06f 0301 	mvn.w	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e002      	b.n	8005838 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005832:	f06f 0302 	mvn.w	r3, #2
 8005836:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005838:	697b      	ldr	r3, [r7, #20]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800585e:	f06f 0303 	mvn.w	r3, #3
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e02c      	b.n	80058c0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005866:	f3ef 8305 	mrs	r3, IPSR
 800586a:	60fb      	str	r3, [r7, #12]
  return(result);
 800586c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01a      	beq.n	80058a8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005872:	2300      	movs	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4619      	mov	r1, r3
 800587c:	6938      	ldr	r0, [r7, #16]
 800587e:	f000 fd7e 	bl	800637e <xQueueGiveFromISR>
 8005882:	4603      	mov	r3, r0
 8005884:	2b01      	cmp	r3, #1
 8005886:	d003      	beq.n	8005890 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005888:	f06f 0302 	mvn.w	r3, #2
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e017      	b.n	80058c0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d014      	beq.n	80058c0 <osSemaphoreRelease+0x78>
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <osSemaphoreRelease+0x84>)
 8005898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	e00b      	b.n	80058c0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80058a8:	2300      	movs	r3, #0
 80058aa:	2200      	movs	r2, #0
 80058ac:	2100      	movs	r1, #0
 80058ae:	6938      	ldr	r0, [r7, #16]
 80058b0:	f000 fbe4 	bl	800607c <xQueueGenericSend>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d002      	beq.n	80058c0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80058ba:	f06f 0302 	mvn.w	r3, #2
 80058be:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80058c0:	697b      	ldr	r3, [r7, #20]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e0:	f3ef 8305 	mrs	r3, IPSR
 80058e4:	613b      	str	r3, [r7, #16]
  return(result);
 80058e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d15f      	bne.n	80059ac <osMessageQueueNew+0xdc>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d05c      	beq.n	80059ac <osMessageQueueNew+0xdc>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d059      	beq.n	80059ac <osMessageQueueNew+0xdc>
    mem = -1;
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295
 80058fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d029      	beq.n	8005958 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d012      	beq.n	8005932 <osMessageQueueNew+0x62>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b4f      	cmp	r3, #79	; 0x4f
 8005912:	d90e      	bls.n	8005932 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <osMessageQueueNew+0x62>
        mem = 1;
 800592c:	2301      	movs	r3, #1
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	e014      	b.n	800595c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d110      	bne.n	800595c <osMessageQueueNew+0x8c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10c      	bne.n	800595c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005946:	2b00      	cmp	r3, #0
 8005948:	d108      	bne.n	800595c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <osMessageQueueNew+0x8c>
          mem = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	e001      	b.n	800595c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10b      	bne.n	800597a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2100      	movs	r1, #0
 800596c:	9100      	str	r1, [sp, #0]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fa44 	bl	8005dfe <xQueueGenericCreateStatic>
 8005976:	61f8      	str	r0, [r7, #28]
 8005978:	e008      	b.n	800598c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d105      	bne.n	800598c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005980:	2200      	movs	r2, #0
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fab2 	bl	8005eee <xQueueGenericCreate>
 800598a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00c      	beq.n	80059ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e001      	b.n	80059a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80059a4:	6979      	ldr	r1, [r7, #20]
 80059a6:	69f8      	ldr	r0, [r7, #28]
 80059a8:	f001 f916 	bl	8006bd8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80059ac:	69fb      	ldr	r3, [r7, #28]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d0:	f3ef 8305 	mrs	r3, IPSR
 80059d4:	617b      	str	r3, [r7, #20]
  return(result);
 80059d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d028      	beq.n	8005a2e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <osMessageQueuePut+0x36>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <osMessageQueuePut+0x36>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80059ee:	f06f 0303 	mvn.w	r3, #3
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	e038      	b.n	8005a68 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80059fa:	f107 0210 	add.w	r2, r7, #16
 80059fe:	2300      	movs	r3, #0
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	69b8      	ldr	r0, [r7, #24]
 8005a04:	f000 fc20 	bl	8006248 <xQueueGenericSendFromISR>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d003      	beq.n	8005a16 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005a0e:	f06f 0302 	mvn.w	r3, #2
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	e028      	b.n	8005a68 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d025      	beq.n	8005a68 <osMessageQueuePut+0xb0>
 8005a1c:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <osMessageQueuePut+0xbc>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	e01c      	b.n	8005a68 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <osMessageQueuePut+0x82>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005a3a:	f06f 0303 	mvn.w	r3, #3
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e012      	b.n	8005a68 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005a42:	2300      	movs	r3, #0
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	69b8      	ldr	r0, [r7, #24]
 8005a4a:	f000 fb17 	bl	800607c <xQueueGenericSend>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d009      	beq.n	8005a68 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005a5a:	f06f 0301 	mvn.w	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	e002      	b.n	8005a68 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005a62:	f06f 0302 	mvn.w	r3, #2
 8005a66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005a68:	69fb      	ldr	r3, [r7, #28]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a8e:	f3ef 8305 	mrs	r3, IPSR
 8005a92:	617b      	str	r3, [r7, #20]
  return(result);
 8005a94:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d028      	beq.n	8005aec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <osMessageQueueGet+0x34>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <osMessageQueueGet+0x34>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005aac:	f06f 0303 	mvn.w	r3, #3
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	e037      	b.n	8005b24 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005ab8:	f107 0310 	add.w	r3, r7, #16
 8005abc:	461a      	mov	r2, r3
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	69b8      	ldr	r0, [r7, #24]
 8005ac2:	f000 febd 	bl	8006840 <xQueueReceiveFromISR>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d003      	beq.n	8005ad4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005acc:	f06f 0302 	mvn.w	r3, #2
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e027      	b.n	8005b24 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d024      	beq.n	8005b24 <osMessageQueueGet+0xac>
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <osMessageQueueGet+0xb8>)
 8005adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	e01b      	b.n	8005b24 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <osMessageQueueGet+0x80>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d103      	bne.n	8005b00 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005af8:	f06f 0303 	mvn.w	r3, #3
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	e011      	b.n	8005b24 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	69b8      	ldr	r0, [r7, #24]
 8005b06:	f000 fcc7 	bl	8006498 <xQueueReceive>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d009      	beq.n	8005b24 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005b16:	f06f 0301 	mvn.w	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e002      	b.n	8005b24 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005b1e:	f06f 0302 	mvn.w	r3, #2
 8005b22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b24:	69fb      	ldr	r3, [r7, #28]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b40:	f3ef 8305 	mrs	r3, IPSR
 8005b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b46:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 8005b4c:	f06f 0305 	mvn.w	r3, #5
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	e00c      	b.n	8005b6e <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 8005b5a:	f06f 0303 	mvn.w	r3, #3
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e005      	b.n	8005b6e <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8005b66:	2100      	movs	r1, #0
 8005b68:	6938      	ldr	r0, [r7, #16]
 8005b6a:	f000 f8ed 	bl	8005d48 <xQueueGenericReset>
  }

  return (stat);
 8005b6e:	697b      	ldr	r3, [r7, #20]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a07      	ldr	r2, [pc, #28]	; (8005ba4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <vApplicationGetIdleTaskMemory+0x30>)
 8005b8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	601a      	str	r2, [r3, #0]
}
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	200002a0 	.word	0x200002a0
 8005ba8:	20000348 	.word	0x20000348

08005bac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a07      	ldr	r2, [pc, #28]	; (8005bd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005bbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4a06      	ldr	r2, [pc, #24]	; (8005bdc <vApplicationGetTimerTaskMemory+0x30>)
 8005bc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bca:	601a      	str	r2, [r3, #0]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	20000548 	.word	0x20000548
 8005bdc:	200005f0 	.word	0x200005f0

08005be0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f103 0208 	add.w	r2, r3, #8
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f103 0208 	add.w	r2, r3, #8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f103 0208 	add.w	r2, r3, #8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
}
 8005c76:	bf00      	nop
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c82:	b480      	push	{r7}
 8005c84:	b085      	sub	sp, #20
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d103      	bne.n	8005ca2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e00c      	b.n	8005cbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e002      	b.n	8005cb0 <vListInsert+0x2e>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d2f6      	bcs.n	8005caa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	601a      	str	r2, [r3, #0]
}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6892      	ldr	r2, [r2, #8]
 8005d0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6852      	ldr	r2, [r2, #4]
 8005d14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d103      	bne.n	8005d28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	1e5a      	subs	r2, r3, #1
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10a      	bne.n	8005d72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d72:	f002 fc0f 	bl	8008594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	441a      	add	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	3b01      	subs	r3, #1
 8005da4:	68f9      	ldr	r1, [r7, #12]
 8005da6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	441a      	add	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	22ff      	movs	r2, #255	; 0xff
 8005db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	22ff      	movs	r2, #255	; 0xff
 8005dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00f      	beq.n	8005df0 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3310      	adds	r3, #16
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fbcb 	bl	8007570 <xTaskRemoveFromEventList>
 8005dda:	e009      	b.n	8005df0 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3310      	adds	r3, #16
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fefd 	bl	8005be0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3324      	adds	r3, #36	; 0x24
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fef8 	bl	8005be0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005df0:	f002 fc00 	bl	80085f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005df4:	2301      	movs	r3, #1
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b08e      	sub	sp, #56	; 0x38
 8005e02:	af02      	add	r7, sp, #8
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <xQueueGenericCreateStatic+0x52>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <xQueueGenericCreateStatic+0x56>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <xQueueGenericCreateStatic+0x58>
 8005e54:	2300      	movs	r3, #0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	623b      	str	r3, [r7, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <xQueueGenericCreateStatic+0x7e>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <xQueueGenericCreateStatic+0x82>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <xQueueGenericCreateStatic+0x84>
 8005e80:	2300      	movs	r3, #0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	61fb      	str	r3, [r7, #28]
}
 8005e98:	bf00      	nop
 8005e9a:	e7fe      	b.n	8005e9a <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e9c:	2350      	movs	r3, #80	; 0x50
 8005e9e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b50      	cmp	r3, #80	; 0x50
 8005ea4:	d00a      	beq.n	8005ebc <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	61bb      	str	r3, [r7, #24]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ebc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00d      	beq.n	8005ee4 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ed0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f83f 	bl	8005f62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3730      	adds	r7, #48	; 0x30
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b08a      	sub	sp, #40	; 0x28
 8005ef2:	af02      	add	r7, sp, #8
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	613b      	str	r3, [r7, #16]
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
 8005f20:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	3350      	adds	r3, #80	; 0x50
 8005f26:	4618      	mov	r0, r3
 8005f28:	f002 fc56 	bl	80087d8 <pvPortMalloc>
 8005f2c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d011      	beq.n	8005f58 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	3350      	adds	r3, #80	; 0x50
 8005f3c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f46:	79fa      	ldrb	r2, [r7, #7]
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 f805 	bl	8005f62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f58:	69bb      	ldr	r3, [r7, #24]
	}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d103      	bne.n	8005f7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e002      	b.n	8005f84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f90:	2101      	movs	r1, #1
 8005f92:	69b8      	ldr	r0, [r7, #24]
 8005f94:	f7ff fed8 	bl	8005d48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61bb      	str	r3, [r7, #24]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d90a      	bls.n	8005fee <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	617b      	str	r3, [r7, #20]
}
 8005fea:	bf00      	nop
 8005fec:	e7fe      	b.n	8005fec <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005fee:	2302      	movs	r3, #2
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff ff00 	bl	8005dfe <xQueueGenericCreateStatic>
 8005ffe:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800600c:	69fb      	ldr	r3, [r7, #28]
	}
 800600e:	4618      	mov	r0, r3
 8006010:	3720      	adds	r7, #32
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	613b      	str	r3, [r7, #16]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d90a      	bls.n	800605a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60fb      	str	r3, [r7, #12]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800605a:	2202      	movs	r2, #2
 800605c:	2100      	movs	r1, #0
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ff45 	bl	8005eee <xQueueGenericCreate>
 8006064:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006072:	697b      	ldr	r3, [r7, #20]
	}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08e      	sub	sp, #56	; 0x38
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xQueueGenericSend+0x32>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <xQueueGenericSend+0x40>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <xQueueGenericSend+0x44>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <xQueueGenericSend+0x46>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <xQueueGenericSend+0x60>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d103      	bne.n	80060ea <xQueueGenericSend+0x6e>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <xQueueGenericSend+0x72>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueGenericSend+0x74>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xQueueGenericSend+0x8e>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	623b      	str	r3, [r7, #32]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800610a:	f001 fbed 	bl	80078e8 <xTaskGetSchedulerState>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <xQueueGenericSend+0x9e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <xQueueGenericSend+0xa2>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <xQueueGenericSend+0xa4>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueGenericSend+0xbe>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	61fb      	str	r3, [r7, #28]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800613a:	f002 fa2b 	bl	8008594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <xQueueGenericSend+0xd4>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d112      	bne.n	8006176 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006156:	f000 fc2e 	bl	80069b6 <prvCopyDataToQueue>
 800615a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	4618      	mov	r0, r3
 800616a:	f001 fa01 	bl	8007570 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800616e:	f002 fa41 	bl	80085f4 <vPortExitCritical>
				return pdPASS;
 8006172:	2301      	movs	r3, #1
 8006174:	e062      	b.n	800623c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800617c:	f002 fa3a 	bl	80085f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006180:	2300      	movs	r3, #0
 8006182:	e05b      	b.n	800623c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800618a:	f107 0314 	add.w	r3, r7, #20
 800618e:	4618      	mov	r0, r3
 8006190:	f001 fa52 	bl	8007638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006194:	2301      	movs	r3, #1
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006198:	f002 fa2c 	bl	80085f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800619c:	f000 fff0 	bl	8007180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061a0:	f002 f9f8 	bl	8008594 <vPortEnterCritical>
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061aa:	b25b      	sxtb	r3, r3
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d103      	bne.n	80061ba <xQueueGenericSend+0x13e>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061c0:	b25b      	sxtb	r3, r3
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d103      	bne.n	80061d0 <xQueueGenericSend+0x154>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061d0:	f002 fa10 	bl	80085f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061d4:	1d3a      	adds	r2, r7, #4
 80061d6:	f107 0314 	add.w	r3, r7, #20
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 fa41 	bl	8007664 <xTaskCheckForTimeOut>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d123      	bne.n	8006230 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ea:	f000 fcdc 	bl	8006ba6 <prvIsQueueFull>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d017      	beq.n	8006224 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	3310      	adds	r3, #16
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4611      	mov	r1, r2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 f967 	bl	80074d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006204:	f000 fc67 	bl	8006ad6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006208:	f000 ffc8 	bl	800719c <xTaskResumeAll>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d193      	bne.n	800613a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006212:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <xQueueGenericSend+0x1c8>)
 8006214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	e78a      	b.n	800613a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006226:	f000 fc56 	bl	8006ad6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800622a:	f000 ffb7 	bl	800719c <xTaskResumeAll>
 800622e:	e784      	b.n	800613a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006232:	f000 fc50 	bl	8006ad6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006236:	f000 ffb1 	bl	800719c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800623a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800623c:	4618      	mov	r0, r3
 800623e:	3738      	adds	r7, #56	; 0x38
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b090      	sub	sp, #64	; 0x40
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d103      	bne.n	8006284 <xQueueGenericSendFromISR+0x3c>
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <xQueueGenericSendFromISR+0x40>
 8006284:	2301      	movs	r3, #1
 8006286:	e000      	b.n	800628a <xQueueGenericSendFromISR+0x42>
 8006288:	2300      	movs	r3, #0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d103      	bne.n	80062b2 <xQueueGenericSendFromISR+0x6a>
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <xQueueGenericSendFromISR+0x6e>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <xQueueGenericSendFromISR+0x70>
 80062b6:	2300      	movs	r3, #0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	623b      	str	r3, [r7, #32]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062d2:	f002 fa41 	bl	8008758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062d6:	f3ef 8211 	mrs	r2, BASEPRI
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	61fa      	str	r2, [r7, #28]
 80062ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d302      	bcc.n	8006304 <xQueueGenericSendFromISR+0xbc>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b02      	cmp	r3, #2
 8006302:	d12f      	bne.n	8006364 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800630a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800631a:	f000 fb4c 	bl	80069b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800631e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d112      	bne.n	800634e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d016      	beq.n	800635e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	3324      	adds	r3, #36	; 0x24
 8006334:	4618      	mov	r0, r3
 8006336:	f001 f91b 	bl	8007570 <xTaskRemoveFromEventList>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00e      	beq.n	800635e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e007      	b.n	800635e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800634e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006352:	3301      	adds	r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	b25a      	sxtb	r2, r3
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800635e:	2301      	movs	r3, #1
 8006360:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006362:	e001      	b.n	8006368 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006364:	2300      	movs	r3, #0
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006372:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006376:	4618      	mov	r0, r3
 8006378:	3740      	adds	r7, #64	; 0x40
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b08e      	sub	sp, #56	; 0x38
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	623b      	str	r3, [r7, #32]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	61fb      	str	r3, [r7, #28]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <xQueueGiveFromISR+0x58>
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <xQueueGiveFromISR+0x5c>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <xQueueGiveFromISR+0x5e>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	61bb      	str	r3, [r7, #24]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063f6:	f002 f9af 	bl	8008758 <vPortValidateInterruptPriority>
	__asm volatile
 80063fa:	f3ef 8211 	mrs	r2, BASEPRI
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	617a      	str	r2, [r7, #20]
 8006410:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006412:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006422:	429a      	cmp	r2, r3
 8006424:	d22b      	bcs.n	800647e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800642c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006438:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d112      	bne.n	8006468 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	3324      	adds	r3, #36	; 0x24
 800644e:	4618      	mov	r0, r3
 8006450:	f001 f88e 	bl	8007570 <xTaskRemoveFromEventList>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00e      	beq.n	8006478 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2201      	movs	r2, #1
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	e007      	b.n	8006478 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800646c:	3301      	adds	r3, #1
 800646e:	b2db      	uxtb	r3, r3
 8006470:	b25a      	sxtb	r2, r3
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006478:	2301      	movs	r3, #1
 800647a:	637b      	str	r3, [r7, #52]	; 0x34
 800647c:	e001      	b.n	8006482 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800647e:	2300      	movs	r3, #0
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f383 8811 	msr	BASEPRI, r3
}
 800648c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006490:	4618      	mov	r0, r3
 8006492:	3738      	adds	r7, #56	; 0x38
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08c      	sub	sp, #48	; 0x30
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064a4:	2300      	movs	r3, #0
 80064a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <xQueueReceive+0x30>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	623b      	str	r3, [r7, #32]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <xQueueReceive+0x3e>
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <xQueueReceive+0x42>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueReceive+0x44>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueReceive+0x5e>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	61fb      	str	r3, [r7, #28]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064f6:	f001 f9f7 	bl	80078e8 <xTaskGetSchedulerState>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <xQueueReceive+0x6e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <xQueueReceive+0x72>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <xQueueReceive+0x74>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <xQueueReceive+0x8e>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	61bb      	str	r3, [r7, #24]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006526:	f002 f835 	bl	8008594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d014      	beq.n	8006560 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800653a:	f000 faa6 	bl	8006a8a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	1e5a      	subs	r2, r3, #1
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	3310      	adds	r3, #16
 8006552:	4618      	mov	r0, r3
 8006554:	f001 f80c 	bl	8007570 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006558:	f002 f84c 	bl	80085f4 <vPortExitCritical>
				return pdPASS;
 800655c:	2301      	movs	r3, #1
 800655e:	e069      	b.n	8006634 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006566:	f002 f845 	bl	80085f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800656a:	2300      	movs	r3, #0
 800656c:	e062      	b.n	8006634 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006574:	f107 0310 	add.w	r3, r7, #16
 8006578:	4618      	mov	r0, r3
 800657a:	f001 f85d 	bl	8007638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800657e:	2301      	movs	r3, #1
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006582:	f002 f837 	bl	80085f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006586:	f000 fdfb 	bl	8007180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800658a:	f002 f803 	bl	8008594 <vPortEnterCritical>
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006594:	b25b      	sxtb	r3, r3
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d103      	bne.n	80065a4 <xQueueReceive+0x10c>
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065aa:	b25b      	sxtb	r3, r3
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d103      	bne.n	80065ba <xQueueReceive+0x122>
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ba:	f002 f81b 	bl	80085f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065be:	1d3a      	adds	r2, r7, #4
 80065c0:	f107 0310 	add.w	r3, r7, #16
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f001 f84c 	bl	8007664 <xTaskCheckForTimeOut>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d123      	bne.n	800661a <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d4:	f000 fad1 	bl	8006b7a <prvIsQueueEmpty>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d017      	beq.n	800660e <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	3324      	adds	r3, #36	; 0x24
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 ff72 	bl	80074d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ee:	f000 fa72 	bl	8006ad6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065f2:	f000 fdd3 	bl	800719c <xTaskResumeAll>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d194      	bne.n	8006526 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <xQueueReceive+0x1a4>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	e78b      	b.n	8006526 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800660e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006610:	f000 fa61 	bl	8006ad6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006614:	f000 fdc2 	bl	800719c <xTaskResumeAll>
 8006618:	e785      	b.n	8006526 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800661a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661c:	f000 fa5b 	bl	8006ad6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006620:	f000 fdbc 	bl	800719c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006626:	f000 faa8 	bl	8006b7a <prvIsQueueEmpty>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	f43f af7a 	beq.w	8006526 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006632:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006634:	4618      	mov	r0, r3
 8006636:	3730      	adds	r7, #48	; 0x30
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08e      	sub	sp, #56	; 0x38
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800664a:	2300      	movs	r3, #0
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006652:	2300      	movs	r3, #0
 8006654:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	623b      	str	r3, [r7, #32]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	61fb      	str	r3, [r7, #28]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006690:	f001 f92a 	bl	80078e8 <xTaskGetSchedulerState>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <xQueueSemaphoreTake+0x60>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <xQueueSemaphoreTake+0x64>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <xQueueSemaphoreTake+0x66>
 80066a4:	2300      	movs	r3, #0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	61bb      	str	r3, [r7, #24]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066c0:	f001 ff68 	bl	8008594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d019      	beq.n	8006704 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	1e5a      	subs	r2, r3, #1
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80066e0:	f001 fa78 	bl	8007bd4 <pvTaskIncrementMutexHeldCount>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d004      	beq.n	80066fc <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	3310      	adds	r3, #16
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 ff3a 	bl	8007570 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066fc:	f001 ff7a 	bl	80085f4 <vPortExitCritical>
				return pdPASS;
 8006700:	2301      	movs	r3, #1
 8006702:	e097      	b.n	8006834 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d111      	bne.n	800672e <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	617b      	str	r3, [r7, #20]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006726:	f001 ff65 	bl	80085f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800672a:	2300      	movs	r3, #0
 800672c:	e082      	b.n	8006834 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800672e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006734:	f107 030c 	add.w	r3, r7, #12
 8006738:	4618      	mov	r0, r3
 800673a:	f000 ff7d 	bl	8007638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800673e:	2301      	movs	r3, #1
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006742:	f001 ff57 	bl	80085f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006746:	f000 fd1b 	bl	8007180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800674a:	f001 ff23 	bl	8008594 <vPortEnterCritical>
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006754:	b25b      	sxtb	r3, r3
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675a:	d103      	bne.n	8006764 <xQueueSemaphoreTake+0x124>
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800676a:	b25b      	sxtb	r3, r3
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d103      	bne.n	800677a <xQueueSemaphoreTake+0x13a>
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800677a:	f001 ff3b 	bl	80085f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800677e:	463a      	mov	r2, r7
 8006780:	f107 030c 	add.w	r3, r7, #12
 8006784:	4611      	mov	r1, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ff6c 	bl	8007664 <xTaskCheckForTimeOut>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d132      	bne.n	80067f8 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006794:	f000 f9f1 	bl	8006b7a <prvIsQueueEmpty>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d026      	beq.n	80067ec <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 80067a6:	f001 fef5 	bl	8008594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 f8b8 	bl	8007924 <xTaskPriorityInherit>
 80067b4:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80067b6:	f001 ff1d 	bl	80085f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	3324      	adds	r3, #36	; 0x24
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	4611      	mov	r1, r2
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fe84 	bl	80074d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ca:	f000 f984 	bl	8006ad6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067ce:	f000 fce5 	bl	800719c <xTaskResumeAll>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f47f af73 	bne.w	80066c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80067da:	4b18      	ldr	r3, [pc, #96]	; (800683c <xQueueSemaphoreTake+0x1fc>)
 80067dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	e769      	b.n	80066c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80067ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ee:	f000 f972 	bl	8006ad6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067f2:	f000 fcd3 	bl	800719c <xTaskResumeAll>
 80067f6:	e763      	b.n	80066c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80067f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067fa:	f000 f96c 	bl	8006ad6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067fe:	f000 fccd 	bl	800719c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006804:	f000 f9b9 	bl	8006b7a <prvIsQueueEmpty>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	f43f af58 	beq.w	80066c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00d      	beq.n	8006832 <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 8006816:	f001 febd 	bl	8008594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800681a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800681c:	f000 f8b3 	bl	8006986 <prvGetDisinheritPriorityAfterTimeout>
 8006820:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006828:	4618      	mov	r0, r3
 800682a:	f001 f951 	bl	8007ad0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800682e:	f001 fee1 	bl	80085f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006832:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006834:	4618      	mov	r0, r3
 8006836:	3738      	adds	r7, #56	; 0x38
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08e      	sub	sp, #56	; 0x38
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	623b      	str	r3, [r7, #32]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <xQueueReceiveFromISR+0x3a>
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <xQueueReceiveFromISR+0x3e>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <xQueueReceiveFromISR+0x40>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10a      	bne.n	800689a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	61fb      	str	r3, [r7, #28]
}
 8006896:	bf00      	nop
 8006898:	e7fe      	b.n	8006898 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800689a:	f001 ff5d 	bl	8008758 <vPortValidateInterruptPriority>
	__asm volatile
 800689e:	f3ef 8211 	mrs	r2, BASEPRI
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	61ba      	str	r2, [r7, #24]
 80068b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80068b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d02f      	beq.n	8006926 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068d4:	f000 f8d9 	bl	8006a8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	1e5a      	subs	r2, r3, #1
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80068e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d112      	bne.n	8006910 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d016      	beq.n	8006920 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	3310      	adds	r3, #16
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fe3a 	bl	8007570 <xTaskRemoveFromEventList>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00e      	beq.n	8006920 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e007      	b.n	8006920 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006914:	3301      	adds	r3, #1
 8006916:	b2db      	uxtb	r3, r3
 8006918:	b25a      	sxtb	r2, r3
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006920:	2301      	movs	r3, #1
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
 8006924:	e001      	b.n	800692a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006926:	2300      	movs	r3, #0
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f383 8811 	msr	BASEPRI, r3
}
 8006934:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006938:	4618      	mov	r0, r3
 800693a:	3738      	adds	r7, #56	; 0x38
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <vQueueDelete+0x28>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60bb      	str	r3, [r7, #8]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f95f 	bl	8006c2c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006974:	2b00      	cmp	r3, #0
 8006976:	d102      	bne.n	800697e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f001 fff9 	bl	8008970 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	d006      	beq.n	80069a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e001      	b.n	80069a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80069a8:	68fb      	ldr	r3, [r7, #12]
	}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b086      	sub	sp, #24
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10d      	bne.n	80069f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d14d      	bne.n	8006a78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 f807 	bl	80079f4 <xTaskPriorityDisinherit>
 80069e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	609a      	str	r2, [r3, #8]
 80069ee:	e043      	b.n	8006a78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d119      	bne.n	8006a2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6858      	ldr	r0, [r3, #4]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	461a      	mov	r2, r3
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	f002 f957 	bl	8008cb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	441a      	add	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d32b      	bcc.n	8006a78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	605a      	str	r2, [r3, #4]
 8006a28:	e026      	b.n	8006a78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68d8      	ldr	r0, [r3, #12]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	461a      	mov	r2, r3
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	f002 f93d 	bl	8008cb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	425b      	negs	r3, r3
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d207      	bcs.n	8006a66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	425b      	negs	r3, r3
 8006a60:	441a      	add	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d105      	bne.n	8006a78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a80:	697b      	ldr	r3, [r7, #20]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d018      	beq.n	8006ace <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	441a      	add	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d303      	bcc.n	8006abe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68d9      	ldr	r1, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6838      	ldr	r0, [r7, #0]
 8006aca:	f002 f8f3 	bl	8008cb4 <memcpy>
	}
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ade:	f001 fd59 	bl	8008594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006aea:	e011      	b.n	8006b10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d012      	beq.n	8006b1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3324      	adds	r3, #36	; 0x24
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fd39 	bl	8007570 <xTaskRemoveFromEventList>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b04:	f000 fe10 	bl	8007728 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dce9      	bgt.n	8006aec <prvUnlockQueue+0x16>
 8006b18:	e000      	b.n	8006b1c <prvUnlockQueue+0x46>
					break;
 8006b1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	22ff      	movs	r2, #255	; 0xff
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b24:	f001 fd66 	bl	80085f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b28:	f001 fd34 	bl	8008594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b34:	e011      	b.n	8006b5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d012      	beq.n	8006b64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3310      	adds	r3, #16
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fd14 	bl	8007570 <xTaskRemoveFromEventList>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b4e:	f000 fdeb 	bl	8007728 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dce9      	bgt.n	8006b36 <prvUnlockQueue+0x60>
 8006b62:	e000      	b.n	8006b66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	22ff      	movs	r2, #255	; 0xff
 8006b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b6e:	f001 fd41 	bl	80085f4 <vPortExitCritical>
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b82:	f001 fd07 	bl	8008594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e001      	b.n	8006b98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b98:	f001 fd2c 	bl	80085f4 <vPortExitCritical>

	return xReturn;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bae:	f001 fcf1 	bl	8008594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d102      	bne.n	8006bc4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	e001      	b.n	8006bc8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bc8:	f001 fd14 	bl	80085f4 <vPortExitCritical>

	return xReturn;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	e014      	b.n	8006c12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006be8:	4a0f      	ldr	r2, [pc, #60]	; (8006c28 <vQueueAddToRegistry+0x50>)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10b      	bne.n	8006c0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006bf4:	490c      	ldr	r1, [pc, #48]	; (8006c28 <vQueueAddToRegistry+0x50>)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006bfe:	4a0a      	ldr	r2, [pc, #40]	; (8006c28 <vQueueAddToRegistry+0x50>)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	4413      	add	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c0a:	e006      	b.n	8006c1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b07      	cmp	r3, #7
 8006c16:	d9e7      	bls.n	8006be8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	200009f0 	.word	0x200009f0

08006c2c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	e016      	b.n	8006c68 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006c3a:	4a10      	ldr	r2, [pc, #64]	; (8006c7c <vQueueUnregisterQueue+0x50>)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	4413      	add	r3, r2
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d10b      	bne.n	8006c62 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006c4a:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <vQueueUnregisterQueue+0x50>)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2100      	movs	r1, #0
 8006c50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006c54:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <vQueueUnregisterQueue+0x50>)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	605a      	str	r2, [r3, #4]
				break;
 8006c60:	e006      	b.n	8006c70 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b07      	cmp	r3, #7
 8006c6c:	d9e5      	bls.n	8006c3a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	200009f0 	.word	0x200009f0

08006c80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c90:	f001 fc80 	bl	8008594 <vPortEnterCritical>
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c9a:	b25b      	sxtb	r3, r3
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d103      	bne.n	8006caa <vQueueWaitForMessageRestricted+0x2a>
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb0:	b25b      	sxtb	r3, r3
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d103      	bne.n	8006cc0 <vQueueWaitForMessageRestricted+0x40>
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cc0:	f001 fc98 	bl	80085f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	3324      	adds	r3, #36	; 0x24
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	68b9      	ldr	r1, [r7, #8]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fc1f 	bl	8007518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006cda:	6978      	ldr	r0, [r7, #20]
 8006cdc:	f7ff fefb 	bl	8006ad6 <prvUnlockQueue>
	}
 8006ce0:	bf00      	nop
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08e      	sub	sp, #56	; 0x38
 8006cec:	af04      	add	r7, sp, #16
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	623b      	str	r3, [r7, #32]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xTaskCreateStatic+0x46>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	61fb      	str	r3, [r7, #28]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d2e:	23a8      	movs	r3, #168	; 0xa8
 8006d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2ba8      	cmp	r3, #168	; 0xa8
 8006d36:	d00a      	beq.n	8006d4e <xTaskCreateStatic+0x66>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	61bb      	str	r3, [r7, #24]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01e      	beq.n	8006d94 <xTaskCreateStatic+0xac>
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01b      	beq.n	8006d94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	2202      	movs	r2, #2
 8006d6a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d6e:	2300      	movs	r3, #0
 8006d70:	9303      	str	r3, [sp, #12]
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	9302      	str	r3, [sp, #8]
 8006d76:	f107 0314 	add.w	r3, r7, #20
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f850 	bl	8006e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d8e:	f000 f8f3 	bl	8006f78 <prvAddNewTaskToReadyList>
 8006d92:	e001      	b.n	8006d98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d98:	697b      	ldr	r3, [r7, #20]
	}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3728      	adds	r7, #40	; 0x28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b08c      	sub	sp, #48	; 0x30
 8006da6:	af04      	add	r7, sp, #16
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 fd0e 	bl	80087d8 <pvPortMalloc>
 8006dbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006dc4:	20a8      	movs	r0, #168	; 0xa8
 8006dc6:	f001 fd07 	bl	80087d8 <pvPortMalloc>
 8006dca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006dd8:	e005      	b.n	8006de6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dda:	6978      	ldr	r0, [r7, #20]
 8006ddc:	f001 fdc8 	bl	8008970 <vPortFree>
 8006de0:	e001      	b.n	8006de6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d017      	beq.n	8006e1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006df4:	88fa      	ldrh	r2, [r7, #6]
 8006df6:	2300      	movs	r3, #0
 8006df8:	9303      	str	r3, [sp, #12]
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	9302      	str	r3, [sp, #8]
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f80e 	bl	8006e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e10:	69f8      	ldr	r0, [r7, #28]
 8006e12:	f000 f8b1 	bl	8006f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e16:	2301      	movs	r3, #1
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	e002      	b.n	8006e22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e22:	69bb      	ldr	r3, [r7, #24]
	}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	461a      	mov	r2, r3
 8006e44:	21a5      	movs	r1, #165	; 0xa5
 8006e46:	f001 feb1 	bl	8008bac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e54:	3b01      	subs	r3, #1
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f023 0307 	bic.w	r3, r3, #7
 8006e62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	617b      	str	r3, [r7, #20]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d01f      	beq.n	8006eca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	e012      	b.n	8006eb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4413      	add	r3, r2
 8006e96:	7819      	ldrb	r1, [r3, #0]
 8006e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3334      	adds	r3, #52	; 0x34
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d006      	beq.n	8006ebe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2b0f      	cmp	r3, #15
 8006eba:	d9e9      	bls.n	8006e90 <prvInitialiseNewTask+0x64>
 8006ebc:	e000      	b.n	8006ec0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006ebe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ec8:	e003      	b.n	8006ed2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	2b37      	cmp	r3, #55	; 0x37
 8006ed6:	d901      	bls.n	8006edc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ed8:	2337      	movs	r3, #55	; 0x37
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	2200      	movs	r2, #0
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fe94 	bl	8005c20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	3318      	adds	r3, #24
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fe8f 	bl	8005c20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	3354      	adds	r3, #84	; 0x54
 8006f2c:	224c      	movs	r2, #76	; 0x4c
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fe3b 	bl	8008bac <memset>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	4a0c      	ldr	r2, [pc, #48]	; (8006f6c <prvInitialiseNewTask+0x140>)
 8006f3a:	659a      	str	r2, [r3, #88]	; 0x58
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <prvInitialiseNewTask+0x144>)
 8006f40:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	4a0b      	ldr	r2, [pc, #44]	; (8006f74 <prvInitialiseNewTask+0x148>)
 8006f46:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	69b8      	ldr	r0, [r7, #24]
 8006f4e:	f001 f9f7 	bl	8008340 <pxPortInitialiseStack>
 8006f52:	4602      	mov	r2, r0
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f64:	bf00      	nop
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20004c84 	.word	0x20004c84
 8006f70:	20004cec 	.word	0x20004cec
 8006f74:	20004d54 	.word	0x20004d54

08006f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f80:	f001 fb08 	bl	8008594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f84:	4b26      	ldr	r3, [pc, #152]	; (8007020 <prvAddNewTaskToReadyList+0xa8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4a25      	ldr	r2, [pc, #148]	; (8007020 <prvAddNewTaskToReadyList+0xa8>)
 8006f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f8e:	4b25      	ldr	r3, [pc, #148]	; (8007024 <prvAddNewTaskToReadyList+0xac>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f96:	4a23      	ldr	r2, [pc, #140]	; (8007024 <prvAddNewTaskToReadyList+0xac>)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f9c:	4b20      	ldr	r3, [pc, #128]	; (8007020 <prvAddNewTaskToReadyList+0xa8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d110      	bne.n	8006fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fa4:	f000 fbde 	bl	8007764 <prvInitialiseTaskLists>
 8006fa8:	e00d      	b.n	8006fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006faa:	4b1f      	ldr	r3, [pc, #124]	; (8007028 <prvAddNewTaskToReadyList+0xb0>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fb2:	4b1c      	ldr	r3, [pc, #112]	; (8007024 <prvAddNewTaskToReadyList+0xac>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d802      	bhi.n	8006fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fc0:	4a18      	ldr	r2, [pc, #96]	; (8007024 <prvAddNewTaskToReadyList+0xac>)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fc6:	4b19      	ldr	r3, [pc, #100]	; (800702c <prvAddNewTaskToReadyList+0xb4>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	4a17      	ldr	r2, [pc, #92]	; (800702c <prvAddNewTaskToReadyList+0xb4>)
 8006fce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fd0:	4b16      	ldr	r3, [pc, #88]	; (800702c <prvAddNewTaskToReadyList+0xb4>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	4b14      	ldr	r3, [pc, #80]	; (8007030 <prvAddNewTaskToReadyList+0xb8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d903      	bls.n	8006fec <prvAddNewTaskToReadyList+0x74>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	4a11      	ldr	r2, [pc, #68]	; (8007030 <prvAddNewTaskToReadyList+0xb8>)
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4a0e      	ldr	r2, [pc, #56]	; (8007034 <prvAddNewTaskToReadyList+0xbc>)
 8006ffa:	441a      	add	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7fe fe19 	bl	8005c3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007008:	f001 faf4 	bl	80085f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <prvAddNewTaskToReadyList+0xb0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007014:	4b03      	ldr	r3, [pc, #12]	; (8007024 <prvAddNewTaskToReadyList+0xac>)
 8007016:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20000f04 	.word	0x20000f04
 8007024:	20000a30 	.word	0x20000a30
 8007028:	20000f10 	.word	0x20000f10
 800702c:	20000f20 	.word	0x20000f20
 8007030:	20000f0c 	.word	0x20000f0c
 8007034:	20000a34 	.word	0x20000a34

08007038 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d017      	beq.n	800707a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <vTaskDelay+0x60>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <vTaskDelay+0x30>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60bb      	str	r3, [r7, #8]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007068:	f000 f88a 	bl	8007180 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800706c:	2100      	movs	r1, #0
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fdc4 	bl	8007bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007074:	f000 f892 	bl	800719c <xTaskResumeAll>
 8007078:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d107      	bne.n	8007090 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007080:	4b06      	ldr	r3, [pc, #24]	; (800709c <vTaskDelay+0x64>)
 8007082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007090:	bf00      	nop
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000f2c 	.word	0x20000f2c
 800709c:	e000ed04 	.word	0xe000ed04

080070a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08a      	sub	sp, #40	; 0x28
 80070a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070ae:	463a      	mov	r2, r7
 80070b0:	1d39      	adds	r1, r7, #4
 80070b2:	f107 0308 	add.w	r3, r7, #8
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fd5e 	bl	8005b78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	9202      	str	r2, [sp, #8]
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	2300      	movs	r3, #0
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	2300      	movs	r3, #0
 80070cc:	460a      	mov	r2, r1
 80070ce:	4924      	ldr	r1, [pc, #144]	; (8007160 <vTaskStartScheduler+0xc0>)
 80070d0:	4824      	ldr	r0, [pc, #144]	; (8007164 <vTaskStartScheduler+0xc4>)
 80070d2:	f7ff fe09 	bl	8006ce8 <xTaskCreateStatic>
 80070d6:	4603      	mov	r3, r0
 80070d8:	4a23      	ldr	r2, [pc, #140]	; (8007168 <vTaskStartScheduler+0xc8>)
 80070da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070dc:	4b22      	ldr	r3, [pc, #136]	; (8007168 <vTaskStartScheduler+0xc8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e001      	b.n	80070ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d102      	bne.n	80070fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80070f4:	f000 fdd6 	bl	8007ca4 <xTimerCreateTimerTask>
 80070f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d11b      	bne.n	8007138 <vTaskStartScheduler+0x98>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	613b      	str	r3, [r7, #16]
}
 8007112:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007114:	4b15      	ldr	r3, [pc, #84]	; (800716c <vTaskStartScheduler+0xcc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3354      	adds	r3, #84	; 0x54
 800711a:	4a15      	ldr	r2, [pc, #84]	; (8007170 <vTaskStartScheduler+0xd0>)
 800711c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800711e:	4b15      	ldr	r3, [pc, #84]	; (8007174 <vTaskStartScheduler+0xd4>)
 8007120:	f04f 32ff 	mov.w	r2, #4294967295
 8007124:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <vTaskStartScheduler+0xd8>)
 8007128:	2201      	movs	r2, #1
 800712a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800712c:	4b13      	ldr	r3, [pc, #76]	; (800717c <vTaskStartScheduler+0xdc>)
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007132:	f001 f98d 	bl	8008450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007136:	e00e      	b.n	8007156 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713e:	d10a      	bne.n	8007156 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	60fb      	str	r3, [r7, #12]
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <vTaskStartScheduler+0xb4>
}
 8007156:	bf00      	nop
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	08008dd8 	.word	0x08008dd8
 8007164:	08007741 	.word	0x08007741
 8007168:	20000f28 	.word	0x20000f28
 800716c:	20000a30 	.word	0x20000a30
 8007170:	2000005c 	.word	0x2000005c
 8007174:	20000f24 	.word	0x20000f24
 8007178:	20000f10 	.word	0x20000f10
 800717c:	20000f08 	.word	0x20000f08

08007180 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007180:	b480      	push	{r7}
 8007182:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <vTaskSuspendAll+0x18>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	4a03      	ldr	r2, [pc, #12]	; (8007198 <vTaskSuspendAll+0x18>)
 800718c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800718e:	bf00      	nop
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	20000f2c 	.word	0x20000f2c

0800719c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071a6:	2300      	movs	r3, #0
 80071a8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071aa:	4b3c      	ldr	r3, [pc, #240]	; (800729c <xTaskResumeAll+0x100>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	603b      	str	r3, [r7, #0]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071c8:	f001 f9e4 	bl	8008594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071cc:	4b33      	ldr	r3, [pc, #204]	; (800729c <xTaskResumeAll+0x100>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	4a32      	ldr	r2, [pc, #200]	; (800729c <xTaskResumeAll+0x100>)
 80071d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071d6:	4b31      	ldr	r3, [pc, #196]	; (800729c <xTaskResumeAll+0x100>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d156      	bne.n	800728c <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071de:	4b30      	ldr	r3, [pc, #192]	; (80072a0 <xTaskResumeAll+0x104>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d052      	beq.n	800728c <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071e6:	e02f      	b.n	8007248 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e8:	4b2e      	ldr	r3, [pc, #184]	; (80072a4 <xTaskResumeAll+0x108>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3318      	adds	r3, #24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe fd7d 	bl	8005cf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3304      	adds	r3, #4
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fd78 	bl	8005cf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4b27      	ldr	r3, [pc, #156]	; (80072a8 <xTaskResumeAll+0x10c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d903      	bls.n	8007218 <xTaskResumeAll+0x7c>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	4a24      	ldr	r2, [pc, #144]	; (80072a8 <xTaskResumeAll+0x10c>)
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4a21      	ldr	r2, [pc, #132]	; (80072ac <xTaskResumeAll+0x110>)
 8007226:	441a      	add	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3304      	adds	r3, #4
 800722c:	4619      	mov	r1, r3
 800722e:	4610      	mov	r0, r2
 8007230:	f7fe fd03 	bl	8005c3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007238:	4b1d      	ldr	r3, [pc, #116]	; (80072b0 <xTaskResumeAll+0x114>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723e:	429a      	cmp	r2, r3
 8007240:	d302      	bcc.n	8007248 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007242:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <xTaskResumeAll+0x118>)
 8007244:	2201      	movs	r2, #1
 8007246:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007248:	4b16      	ldr	r3, [pc, #88]	; (80072a4 <xTaskResumeAll+0x108>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1cb      	bne.n	80071e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007256:	f000 fb27 	bl	80078a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <xTaskResumeAll+0x11c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d010      	beq.n	8007288 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007266:	f000 f839 	bl	80072dc <xTaskIncrementTick>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007270:	4b10      	ldr	r3, [pc, #64]	; (80072b4 <xTaskResumeAll+0x118>)
 8007272:	2201      	movs	r2, #1
 8007274:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	3b01      	subs	r3, #1
 800727a:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f1      	bne.n	8007266 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <xTaskResumeAll+0x11c>)
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <xTaskResumeAll+0x118>)
 800728a:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800728c:	f001 f9b2 	bl	80085f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007290:	687b      	ldr	r3, [r7, #4]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000f2c 	.word	0x20000f2c
 80072a0:	20000f04 	.word	0x20000f04
 80072a4:	20000ec4 	.word	0x20000ec4
 80072a8:	20000f0c 	.word	0x20000f0c
 80072ac:	20000a34 	.word	0x20000a34
 80072b0:	20000a30 	.word	0x20000a30
 80072b4:	20000f18 	.word	0x20000f18
 80072b8:	20000f14 	.word	0x20000f14

080072bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <xTaskGetTickCount+0x1c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072c8:	687b      	ldr	r3, [r7, #4]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20000f08 	.word	0x20000f08

080072dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072e6:	4b3f      	ldr	r3, [pc, #252]	; (80073e4 <xTaskIncrementTick+0x108>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d170      	bne.n	80073d0 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072ee:	4b3e      	ldr	r3, [pc, #248]	; (80073e8 <xTaskIncrementTick+0x10c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3301      	adds	r3, #1
 80072f4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072f6:	4a3c      	ldr	r2, [pc, #240]	; (80073e8 <xTaskIncrementTick+0x10c>)
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d120      	bne.n	8007344 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007302:	4b3a      	ldr	r3, [pc, #232]	; (80073ec <xTaskIncrementTick+0x110>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <xTaskIncrementTick+0x46>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	603b      	str	r3, [r7, #0]
}
 800731e:	bf00      	nop
 8007320:	e7fe      	b.n	8007320 <xTaskIncrementTick+0x44>
 8007322:	4b32      	ldr	r3, [pc, #200]	; (80073ec <xTaskIncrementTick+0x110>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	4b31      	ldr	r3, [pc, #196]	; (80073f0 <xTaskIncrementTick+0x114>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a2f      	ldr	r2, [pc, #188]	; (80073ec <xTaskIncrementTick+0x110>)
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	4a2f      	ldr	r2, [pc, #188]	; (80073f0 <xTaskIncrementTick+0x114>)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	4b2f      	ldr	r3, [pc, #188]	; (80073f4 <xTaskIncrementTick+0x118>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3301      	adds	r3, #1
 800733c:	4a2d      	ldr	r2, [pc, #180]	; (80073f4 <xTaskIncrementTick+0x118>)
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	f000 fab2 	bl	80078a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007344:	4b2c      	ldr	r3, [pc, #176]	; (80073f8 <xTaskIncrementTick+0x11c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d345      	bcc.n	80073da <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800734e:	4b27      	ldr	r3, [pc, #156]	; (80073ec <xTaskIncrementTick+0x110>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d104      	bne.n	8007362 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007358:	4b27      	ldr	r3, [pc, #156]	; (80073f8 <xTaskIncrementTick+0x11c>)
 800735a:	f04f 32ff 	mov.w	r2, #4294967295
 800735e:	601a      	str	r2, [r3, #0]
					break;
 8007360:	e03b      	b.n	80073da <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007362:	4b22      	ldr	r3, [pc, #136]	; (80073ec <xTaskIncrementTick+0x110>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d203      	bcs.n	8007382 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800737a:	4a1f      	ldr	r2, [pc, #124]	; (80073f8 <xTaskIncrementTick+0x11c>)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007380:	e02b      	b.n	80073da <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	3304      	adds	r3, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fcb4 	bl	8005cf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007390:	2b00      	cmp	r3, #0
 8007392:	d004      	beq.n	800739e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	3318      	adds	r3, #24
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe fcab 	bl	8005cf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a2:	4b16      	ldr	r3, [pc, #88]	; (80073fc <xTaskIncrementTick+0x120>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d903      	bls.n	80073b2 <xTaskIncrementTick+0xd6>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	4a13      	ldr	r2, [pc, #76]	; (80073fc <xTaskIncrementTick+0x120>)
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4a10      	ldr	r2, [pc, #64]	; (8007400 <xTaskIncrementTick+0x124>)
 80073c0:	441a      	add	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	3304      	adds	r3, #4
 80073c6:	4619      	mov	r1, r3
 80073c8:	4610      	mov	r0, r2
 80073ca:	f7fe fc36 	bl	8005c3a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ce:	e7be      	b.n	800734e <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073d0:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <xTaskIncrementTick+0x128>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	4a0b      	ldr	r2, [pc, #44]	; (8007404 <xTaskIncrementTick+0x128>)
 80073d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073da:	697b      	ldr	r3, [r7, #20]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20000f2c 	.word	0x20000f2c
 80073e8:	20000f08 	.word	0x20000f08
 80073ec:	20000ebc 	.word	0x20000ebc
 80073f0:	20000ec0 	.word	0x20000ec0
 80073f4:	20000f1c 	.word	0x20000f1c
 80073f8:	20000f24 	.word	0x20000f24
 80073fc:	20000f0c 	.word	0x20000f0c
 8007400:	20000a34 	.word	0x20000a34
 8007404:	20000f14 	.word	0x20000f14

08007408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800740e:	4b2a      	ldr	r3, [pc, #168]	; (80074b8 <vTaskSwitchContext+0xb0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007416:	4b29      	ldr	r3, [pc, #164]	; (80074bc <vTaskSwitchContext+0xb4>)
 8007418:	2201      	movs	r2, #1
 800741a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800741c:	e046      	b.n	80074ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800741e:	4b27      	ldr	r3, [pc, #156]	; (80074bc <vTaskSwitchContext+0xb4>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007424:	4b26      	ldr	r3, [pc, #152]	; (80074c0 <vTaskSwitchContext+0xb8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e010      	b.n	800744e <vTaskSwitchContext+0x46>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <vTaskSwitchContext+0x40>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	607b      	str	r3, [r7, #4]
}
 8007444:	bf00      	nop
 8007446:	e7fe      	b.n	8007446 <vTaskSwitchContext+0x3e>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3b01      	subs	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	491d      	ldr	r1, [pc, #116]	; (80074c4 <vTaskSwitchContext+0xbc>)
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0e4      	beq.n	800742c <vTaskSwitchContext+0x24>
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4613      	mov	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <vTaskSwitchContext+0xbc>)
 800746e:	4413      	add	r3, r2
 8007470:	60bb      	str	r3, [r7, #8]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	605a      	str	r2, [r3, #4]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	3308      	adds	r3, #8
 8007484:	429a      	cmp	r2, r3
 8007486:	d104      	bne.n	8007492 <vTaskSwitchContext+0x8a>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	605a      	str	r2, [r3, #4]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	4a0b      	ldr	r2, [pc, #44]	; (80074c8 <vTaskSwitchContext+0xc0>)
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	4a08      	ldr	r2, [pc, #32]	; (80074c0 <vTaskSwitchContext+0xb8>)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074a2:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <vTaskSwitchContext+0xc0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3354      	adds	r3, #84	; 0x54
 80074a8:	4a08      	ldr	r2, [pc, #32]	; (80074cc <vTaskSwitchContext+0xc4>)
 80074aa:	6013      	str	r3, [r2, #0]
}
 80074ac:	bf00      	nop
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	20000f2c 	.word	0x20000f2c
 80074bc:	20000f18 	.word	0x20000f18
 80074c0:	20000f0c 	.word	0x20000f0c
 80074c4:	20000a34 	.word	0x20000a34
 80074c8:	20000a30 	.word	0x20000a30
 80074cc:	2000005c 	.word	0x2000005c

080074d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	60fb      	str	r3, [r7, #12]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <vTaskPlaceOnEventList+0x44>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3318      	adds	r3, #24
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fe fbbf 	bl	8005c82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007504:	2101      	movs	r1, #1
 8007506:	6838      	ldr	r0, [r7, #0]
 8007508:	f000 fb78 	bl	8007bfc <prvAddCurrentTaskToDelayedList>
}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000a30 	.word	0x20000a30

08007518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	617b      	str	r3, [r7, #20]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <vTaskPlaceOnEventListRestricted+0x54>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3318      	adds	r3, #24
 8007546:	4619      	mov	r1, r3
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7fe fb76 	bl	8005c3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007554:	f04f 33ff 	mov.w	r3, #4294967295
 8007558:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	68b8      	ldr	r0, [r7, #8]
 800755e:	f000 fb4d 	bl	8007bfc <prvAddCurrentTaskToDelayedList>
	}
 8007562:	bf00      	nop
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000a30 	.word	0x20000a30

08007570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	60fb      	str	r3, [r7, #12]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	3318      	adds	r3, #24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fba7 	bl	8005cf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a6:	4b1e      	ldr	r3, [pc, #120]	; (8007620 <xTaskRemoveFromEventList+0xb0>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d11d      	bne.n	80075ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fb9e 	bl	8005cf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075bc:	4b19      	ldr	r3, [pc, #100]	; (8007624 <xTaskRemoveFromEventList+0xb4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d903      	bls.n	80075cc <xTaskRemoveFromEventList+0x5c>
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	4a16      	ldr	r2, [pc, #88]	; (8007624 <xTaskRemoveFromEventList+0xb4>)
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4a13      	ldr	r2, [pc, #76]	; (8007628 <xTaskRemoveFromEventList+0xb8>)
 80075da:	441a      	add	r2, r3
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fe fb29 	bl	8005c3a <vListInsertEnd>
 80075e8:	e005      	b.n	80075f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	3318      	adds	r3, #24
 80075ee:	4619      	mov	r1, r3
 80075f0:	480e      	ldr	r0, [pc, #56]	; (800762c <xTaskRemoveFromEventList+0xbc>)
 80075f2:	f7fe fb22 	bl	8005c3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fa:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <xTaskRemoveFromEventList+0xc0>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	429a      	cmp	r2, r3
 8007602:	d905      	bls.n	8007610 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007608:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <xTaskRemoveFromEventList+0xc4>)
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e001      	b.n	8007614 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007614:	697b      	ldr	r3, [r7, #20]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000f2c 	.word	0x20000f2c
 8007624:	20000f0c 	.word	0x20000f0c
 8007628:	20000a34 	.word	0x20000a34
 800762c:	20000ec4 	.word	0x20000ec4
 8007630:	20000a30 	.word	0x20000a30
 8007634:	20000f18 	.word	0x20000f18

08007638 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007640:	4b06      	ldr	r3, [pc, #24]	; (800765c <vTaskInternalSetTimeOutState+0x24>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007648:	4b05      	ldr	r3, [pc, #20]	; (8007660 <vTaskInternalSetTimeOutState+0x28>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	605a      	str	r2, [r3, #4]
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	20000f1c 	.word	0x20000f1c
 8007660:	20000f08 	.word	0x20000f08

08007664 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	613b      	str	r3, [r7, #16]
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10a      	bne.n	80076a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	60fb      	str	r3, [r7, #12]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80076a6:	f000 ff75 	bl	8008594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076aa:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <xTaskCheckForTimeOut+0xbc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d102      	bne.n	80076ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	e023      	b.n	8007712 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	4b15      	ldr	r3, [pc, #84]	; (8007724 <xTaskCheckForTimeOut+0xc0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d007      	beq.n	80076e6 <xTaskCheckForTimeOut+0x82>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d302      	bcc.n	80076e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	e015      	b.n	8007712 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d20b      	bcs.n	8007708 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	1ad2      	subs	r2, r2, r3
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff ff9b 	bl	8007638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007702:	2300      	movs	r3, #0
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	e004      	b.n	8007712 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007712:	f000 ff6f 	bl	80085f4 <vPortExitCritical>

	return xReturn;
 8007716:	69fb      	ldr	r3, [r7, #28]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3720      	adds	r7, #32
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20000f08 	.word	0x20000f08
 8007724:	20000f1c 	.word	0x20000f1c

08007728 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800772c:	4b03      	ldr	r3, [pc, #12]	; (800773c <vTaskMissedYield+0x14>)
 800772e:	2201      	movs	r2, #1
 8007730:	601a      	str	r2, [r3, #0]
}
 8007732:	bf00      	nop
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	20000f18 	.word	0x20000f18

08007740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007748:	f000 f84c 	bl	80077e4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <prvIdleTask+0x20>)
 800774e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800775c:	e7f4      	b.n	8007748 <prvIdleTask+0x8>
 800775e:	bf00      	nop
 8007760:	e000ed04 	.word	0xe000ed04

08007764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800776a:	2300      	movs	r3, #0
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	e00c      	b.n	800778a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4a12      	ldr	r2, [pc, #72]	; (80077c4 <prvInitialiseTaskLists+0x60>)
 800777c:	4413      	add	r3, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fa2e 	bl	8005be0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3301      	adds	r3, #1
 8007788:	607b      	str	r3, [r7, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b37      	cmp	r3, #55	; 0x37
 800778e:	d9ef      	bls.n	8007770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007790:	480d      	ldr	r0, [pc, #52]	; (80077c8 <prvInitialiseTaskLists+0x64>)
 8007792:	f7fe fa25 	bl	8005be0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007796:	480d      	ldr	r0, [pc, #52]	; (80077cc <prvInitialiseTaskLists+0x68>)
 8007798:	f7fe fa22 	bl	8005be0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800779c:	480c      	ldr	r0, [pc, #48]	; (80077d0 <prvInitialiseTaskLists+0x6c>)
 800779e:	f7fe fa1f 	bl	8005be0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077a2:	480c      	ldr	r0, [pc, #48]	; (80077d4 <prvInitialiseTaskLists+0x70>)
 80077a4:	f7fe fa1c 	bl	8005be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077a8:	480b      	ldr	r0, [pc, #44]	; (80077d8 <prvInitialiseTaskLists+0x74>)
 80077aa:	f7fe fa19 	bl	8005be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077ae:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <prvInitialiseTaskLists+0x78>)
 80077b0:	4a05      	ldr	r2, [pc, #20]	; (80077c8 <prvInitialiseTaskLists+0x64>)
 80077b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077b4:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <prvInitialiseTaskLists+0x7c>)
 80077b6:	4a05      	ldr	r2, [pc, #20]	; (80077cc <prvInitialiseTaskLists+0x68>)
 80077b8:	601a      	str	r2, [r3, #0]
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000a34 	.word	0x20000a34
 80077c8:	20000e94 	.word	0x20000e94
 80077cc:	20000ea8 	.word	0x20000ea8
 80077d0:	20000ec4 	.word	0x20000ec4
 80077d4:	20000ed8 	.word	0x20000ed8
 80077d8:	20000ef0 	.word	0x20000ef0
 80077dc:	20000ebc 	.word	0x20000ebc
 80077e0:	20000ec0 	.word	0x20000ec0

080077e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ea:	e019      	b.n	8007820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077ec:	f000 fed2 	bl	8008594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f0:	4b10      	ldr	r3, [pc, #64]	; (8007834 <prvCheckTasksWaitingTermination+0x50>)
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3304      	adds	r3, #4
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fe fa79 	bl	8005cf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007802:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <prvCheckTasksWaitingTermination+0x54>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3b01      	subs	r3, #1
 8007808:	4a0b      	ldr	r2, [pc, #44]	; (8007838 <prvCheckTasksWaitingTermination+0x54>)
 800780a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800780c:	4b0b      	ldr	r3, [pc, #44]	; (800783c <prvCheckTasksWaitingTermination+0x58>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3b01      	subs	r3, #1
 8007812:	4a0a      	ldr	r2, [pc, #40]	; (800783c <prvCheckTasksWaitingTermination+0x58>)
 8007814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007816:	f000 feed 	bl	80085f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f810 	bl	8007840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007820:	4b06      	ldr	r3, [pc, #24]	; (800783c <prvCheckTasksWaitingTermination+0x58>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e1      	bne.n	80077ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000ed8 	.word	0x20000ed8
 8007838:	20000f04 	.word	0x20000f04
 800783c:	20000eec 	.word	0x20000eec

08007840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3354      	adds	r3, #84	; 0x54
 800784c:	4618      	mov	r0, r3
 800784e:	f001 f9b5 	bl	8008bbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007858:	2b00      	cmp	r3, #0
 800785a:	d108      	bne.n	800786e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	4618      	mov	r0, r3
 8007862:	f001 f885 	bl	8008970 <vPortFree>
				vPortFree( pxTCB );
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 f882 	bl	8008970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800786c:	e018      	b.n	80078a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007874:	2b01      	cmp	r3, #1
 8007876:	d103      	bne.n	8007880 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f879 	bl	8008970 <vPortFree>
	}
 800787e:	e00f      	b.n	80078a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007886:	2b02      	cmp	r3, #2
 8007888:	d00a      	beq.n	80078a0 <prvDeleteTCB+0x60>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	60fb      	str	r3, [r7, #12]
}
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <prvDeleteTCB+0x5e>
	}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ae:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <prvResetNextTaskUnblockTime+0x38>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078b8:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <prvResetNextTaskUnblockTime+0x3c>)
 80078ba:	f04f 32ff 	mov.w	r2, #4294967295
 80078be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078c0:	e008      	b.n	80078d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c2:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <prvResetNextTaskUnblockTime+0x38>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	4a04      	ldr	r2, [pc, #16]	; (80078e4 <prvResetNextTaskUnblockTime+0x3c>)
 80078d2:	6013      	str	r3, [r2, #0]
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	20000ebc 	.word	0x20000ebc
 80078e4:	20000f24 	.word	0x20000f24

080078e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <xTaskGetSchedulerState+0x34>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d102      	bne.n	80078fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078f6:	2301      	movs	r3, #1
 80078f8:	607b      	str	r3, [r7, #4]
 80078fa:	e008      	b.n	800790e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078fc:	4b08      	ldr	r3, [pc, #32]	; (8007920 <xTaskGetSchedulerState+0x38>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007904:	2302      	movs	r3, #2
 8007906:	607b      	str	r3, [r7, #4]
 8007908:	e001      	b.n	800790e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800790a:	2300      	movs	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800790e:	687b      	ldr	r3, [r7, #4]
	}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	20000f10 	.word	0x20000f10
 8007920:	20000f2c 	.word	0x20000f2c

08007924 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d051      	beq.n	80079de <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793e:	4b2a      	ldr	r3, [pc, #168]	; (80079e8 <xTaskPriorityInherit+0xc4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	429a      	cmp	r2, r3
 8007946:	d241      	bcs.n	80079cc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	db06      	blt.n	800795e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007950:	4b25      	ldr	r3, [pc, #148]	; (80079e8 <xTaskPriorityInherit+0xc4>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	6959      	ldr	r1, [r3, #20]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <xTaskPriorityInherit+0xc8>)
 8007970:	4413      	add	r3, r2
 8007972:	4299      	cmp	r1, r3
 8007974:	d122      	bne.n	80079bc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3304      	adds	r3, #4
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe f9ba 	bl	8005cf4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007980:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <xTaskPriorityInherit+0xc4>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798e:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <xTaskPriorityInherit+0xcc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d903      	bls.n	800799e <xTaskPriorityInherit+0x7a>
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <xTaskPriorityInherit+0xcc>)
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4a10      	ldr	r2, [pc, #64]	; (80079ec <xTaskPriorityInherit+0xc8>)
 80079ac:	441a      	add	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	3304      	adds	r3, #4
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f7fe f940 	bl	8005c3a <vListInsertEnd>
 80079ba:	e004      	b.n	80079c6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <xTaskPriorityInherit+0xc4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079c6:	2301      	movs	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e008      	b.n	80079de <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <xTaskPriorityInherit+0xc4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d201      	bcs.n	80079de <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079da:	2301      	movs	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079de:	68fb      	ldr	r3, [r7, #12]
	}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000a30 	.word	0x20000a30
 80079ec:	20000a34 	.word	0x20000a34
 80079f0:	20000f0c 	.word	0x20000f0c

080079f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d056      	beq.n	8007ab8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a0a:	4b2e      	ldr	r3, [pc, #184]	; (8007ac4 <xTaskPriorityDisinherit+0xd0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d00a      	beq.n	8007a2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	60fb      	str	r3, [r7, #12]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	60bb      	str	r3, [r7, #8]
}
 8007a44:	bf00      	nop
 8007a46:	e7fe      	b.n	8007a46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4c:	1e5a      	subs	r2, r3, #1
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d02c      	beq.n	8007ab8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d128      	bne.n	8007ab8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe f942 	bl	8005cf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a88:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <xTaskPriorityDisinherit+0xd4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d903      	bls.n	8007a98 <xTaskPriorityDisinherit+0xa4>
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	4a0c      	ldr	r2, [pc, #48]	; (8007ac8 <xTaskPriorityDisinherit+0xd4>)
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4a09      	ldr	r2, [pc, #36]	; (8007acc <xTaskPriorityDisinherit+0xd8>)
 8007aa6:	441a      	add	r2, r3
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f7fe f8c3 	bl	8005c3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ab8:	697b      	ldr	r3, [r7, #20]
	}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000a30 	.word	0x20000a30
 8007ac8:	20000f0c 	.word	0x20000f0c
 8007acc:	20000a34 	.word	0x20000a34

08007ad0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d06a      	beq.n	8007bbe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	60fb      	str	r3, [r7, #12]
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d902      	bls.n	8007b16 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	e002      	b.n	8007b1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d04b      	beq.n	8007bbe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d146      	bne.n	8007bbe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b30:	4b25      	ldr	r3, [pc, #148]	; (8007bc8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d10a      	bne.n	8007b50 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	60bb      	str	r3, [r7, #8]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	db04      	blt.n	8007b6e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	6959      	ldr	r1, [r3, #20]
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	4613      	mov	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4a13      	ldr	r2, [pc, #76]	; (8007bcc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b7e:	4413      	add	r3, r2
 8007b80:	4299      	cmp	r1, r3
 8007b82:	d11c      	bne.n	8007bbe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fe f8b3 	bl	8005cf4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b92:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d903      	bls.n	8007ba2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	4a0c      	ldr	r2, [pc, #48]	; (8007bd0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4a07      	ldr	r2, [pc, #28]	; (8007bcc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007bb0:	441a      	add	r2, r3
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f7fe f83e 	bl	8005c3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bbe:	bf00      	nop
 8007bc0:	3720      	adds	r7, #32
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000a30 	.word	0x20000a30
 8007bcc:	20000a34 	.word	0x20000a34
 8007bd0:	20000f0c 	.word	0x20000f0c

08007bd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007be0:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007be6:	3201      	adds	r2, #1
 8007be8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007bea:	4b03      	ldr	r3, [pc, #12]	; (8007bf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bec:	681b      	ldr	r3, [r3, #0]
	}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	20000a30 	.word	0x20000a30

08007bfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c06:	4b21      	ldr	r3, [pc, #132]	; (8007c8c <prvAddCurrentTaskToDelayedList+0x90>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c0c:	4b20      	ldr	r3, [pc, #128]	; (8007c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe f86e 	bl	8005cf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1e:	d10a      	bne.n	8007c36 <prvAddCurrentTaskToDelayedList+0x3a>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d007      	beq.n	8007c36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c26:	4b1a      	ldr	r3, [pc, #104]	; (8007c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4819      	ldr	r0, [pc, #100]	; (8007c94 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c30:	f7fe f803 	bl	8005c3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c34:	e026      	b.n	8007c84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c3e:	4b14      	ldr	r3, [pc, #80]	; (8007c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d209      	bcs.n	8007c62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c4e:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f7fe f811 	bl	8005c82 <vListInsert>
}
 8007c60:	e010      	b.n	8007c84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c62:	4b0e      	ldr	r3, [pc, #56]	; (8007c9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f7fe f807 	bl	8005c82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d202      	bcs.n	8007c84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c7e:	4a08      	ldr	r2, [pc, #32]	; (8007ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	6013      	str	r3, [r2, #0]
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20000f08 	.word	0x20000f08
 8007c90:	20000a30 	.word	0x20000a30
 8007c94:	20000ef0 	.word	0x20000ef0
 8007c98:	20000ec0 	.word	0x20000ec0
 8007c9c:	20000ebc 	.word	0x20000ebc
 8007ca0:	20000f24 	.word	0x20000f24

08007ca4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08a      	sub	sp, #40	; 0x28
 8007ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cae:	f000 fb07 	bl	80082c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <xTimerCreateTimerTask+0x80>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d021      	beq.n	8007cfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cc2:	1d3a      	adds	r2, r7, #4
 8007cc4:	f107 0108 	add.w	r1, r7, #8
 8007cc8:	f107 030c 	add.w	r3, r7, #12
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fd ff6d 	bl	8005bac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	9202      	str	r2, [sp, #8]
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	2302      	movs	r3, #2
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	460a      	mov	r2, r1
 8007ce4:	4910      	ldr	r1, [pc, #64]	; (8007d28 <xTimerCreateTimerTask+0x84>)
 8007ce6:	4811      	ldr	r0, [pc, #68]	; (8007d2c <xTimerCreateTimerTask+0x88>)
 8007ce8:	f7fe fffe 	bl	8006ce8 <xTaskCreateStatic>
 8007cec:	4603      	mov	r3, r0
 8007cee:	4a10      	ldr	r2, [pc, #64]	; (8007d30 <xTimerCreateTimerTask+0x8c>)
 8007cf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cf2:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <xTimerCreateTimerTask+0x8c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	613b      	str	r3, [r7, #16]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d1a:	697b      	ldr	r3, [r7, #20]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000f60 	.word	0x20000f60
 8007d28:	08008de0 	.word	0x08008de0
 8007d2c:	08007e69 	.word	0x08007e69
 8007d30:	20000f64 	.word	0x20000f64

08007d34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08a      	sub	sp, #40	; 0x28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	623b      	str	r3, [r7, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d62:	4b1a      	ldr	r3, [pc, #104]	; (8007dcc <xTimerGenericCommand+0x98>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d02a      	beq.n	8007dc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b05      	cmp	r3, #5
 8007d7a:	dc18      	bgt.n	8007dae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d7c:	f7ff fdb4 	bl	80078e8 <xTaskGetSchedulerState>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d109      	bne.n	8007d9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d86:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <xTimerGenericCommand+0x98>)
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	f107 0110 	add.w	r1, r7, #16
 8007d8e:	2300      	movs	r3, #0
 8007d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d92:	f7fe f973 	bl	800607c <xQueueGenericSend>
 8007d96:	6278      	str	r0, [r7, #36]	; 0x24
 8007d98:	e012      	b.n	8007dc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d9a:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <xTimerGenericCommand+0x98>)
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	f107 0110 	add.w	r1, r7, #16
 8007da2:	2300      	movs	r3, #0
 8007da4:	2200      	movs	r2, #0
 8007da6:	f7fe f969 	bl	800607c <xQueueGenericSend>
 8007daa:	6278      	str	r0, [r7, #36]	; 0x24
 8007dac:	e008      	b.n	8007dc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dae:	4b07      	ldr	r3, [pc, #28]	; (8007dcc <xTimerGenericCommand+0x98>)
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	f107 0110 	add.w	r1, r7, #16
 8007db6:	2300      	movs	r3, #0
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	f7fe fa45 	bl	8006248 <xQueueGenericSendFromISR>
 8007dbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3728      	adds	r7, #40	; 0x28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000f60 	.word	0x20000f60

08007dd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af02      	add	r7, sp, #8
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dda:	4b22      	ldr	r3, [pc, #136]	; (8007e64 <prvProcessExpiredTimer+0x94>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fd ff83 	bl	8005cf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d022      	beq.n	8007e42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	699a      	ldr	r2, [r3, #24]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	18d1      	adds	r1, r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	6978      	ldr	r0, [r7, #20]
 8007e0a:	f000 f8d1 	bl	8007fb0 <prvInsertTimerInActiveList>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01f      	beq.n	8007e54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e14:	2300      	movs	r3, #0
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	6978      	ldr	r0, [r7, #20]
 8007e20:	f7ff ff88 	bl	8007d34 <xTimerGenericCommand>
 8007e24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d113      	bne.n	8007e54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	60fb      	str	r3, [r7, #12]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e48:	f023 0301 	bic.w	r3, r3, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	6978      	ldr	r0, [r7, #20]
 8007e5a:	4798      	blx	r3
}
 8007e5c:	bf00      	nop
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000f58 	.word	0x20000f58

08007e68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e70:	f107 0308 	add.w	r3, r7, #8
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 f857 	bl	8007f28 <prvGetNextExpireTime>
 8007e7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 f803 	bl	8007e8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e86:	f000 f8d5 	bl	8008034 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e8a:	e7f1      	b.n	8007e70 <prvTimerTask+0x8>

08007e8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e96:	f7ff f973 	bl	8007180 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e9a:	f107 0308 	add.w	r3, r7, #8
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 f866 	bl	8007f70 <prvSampleTimeNow>
 8007ea4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d130      	bne.n	8007f0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <prvProcessTimerOrBlockTask+0x3c>
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d806      	bhi.n	8007ec8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007eba:	f7ff f96f 	bl	800719c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ebe:	68f9      	ldr	r1, [r7, #12]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff ff85 	bl	8007dd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ec6:	e024      	b.n	8007f12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d008      	beq.n	8007ee0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ece:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <prvProcessTimerOrBlockTask+0x90>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <prvProcessTimerOrBlockTask+0x50>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e000      	b.n	8007ede <prvProcessTimerOrBlockTask+0x52>
 8007edc:	2300      	movs	r3, #0
 8007ede:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <prvProcessTimerOrBlockTask+0x94>)
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	4619      	mov	r1, r3
 8007eee:	f7fe fec7 	bl	8006c80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ef2:	f7ff f953 	bl	800719c <xTaskResumeAll>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10a      	bne.n	8007f12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <prvProcessTimerOrBlockTask+0x98>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	f3bf 8f6f 	isb	sy
}
 8007f0c:	e001      	b.n	8007f12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f0e:	f7ff f945 	bl	800719c <xTaskResumeAll>
}
 8007f12:	bf00      	nop
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000f5c 	.word	0x20000f5c
 8007f20:	20000f60 	.word	0x20000f60
 8007f24:	e000ed04 	.word	0xe000ed04

08007f28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f30:	4b0e      	ldr	r3, [pc, #56]	; (8007f6c <prvGetNextExpireTime+0x44>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <prvGetNextExpireTime+0x16>
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	e000      	b.n	8007f40 <prvGetNextExpireTime+0x18>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f4c:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <prvGetNextExpireTime+0x44>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	e001      	b.n	8007f5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20000f58 	.word	0x20000f58

08007f70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f78:	f7ff f9a0 	bl	80072bc <xTaskGetTickCount>
 8007f7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <prvSampleTimeNow+0x3c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d205      	bcs.n	8007f94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f88:	f000 f936 	bl	80081f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	e002      	b.n	8007f9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f9a:	4a04      	ldr	r2, [pc, #16]	; (8007fac <prvSampleTimeNow+0x3c>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000f68 	.word	0x20000f68

08007fb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d812      	bhi.n	8007ffc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d302      	bcc.n	8007fea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	e01b      	b.n	8008022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fea:	4b10      	ldr	r3, [pc, #64]	; (800802c <prvInsertTimerInActiveList+0x7c>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	f7fd fe44 	bl	8005c82 <vListInsert>
 8007ffa:	e012      	b.n	8008022 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d206      	bcs.n	8008012 <prvInsertTimerInActiveList+0x62>
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d302      	bcc.n	8008012 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e007      	b.n	8008022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008012:	4b07      	ldr	r3, [pc, #28]	; (8008030 <prvInsertTimerInActiveList+0x80>)
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3304      	adds	r3, #4
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f7fd fe30 	bl	8005c82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008022:	697b      	ldr	r3, [r7, #20]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20000f5c 	.word	0x20000f5c
 8008030:	20000f58 	.word	0x20000f58

08008034 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08e      	sub	sp, #56	; 0x38
 8008038:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800803a:	e0ca      	b.n	80081d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	da18      	bge.n	8008074 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008042:	1d3b      	adds	r3, r7, #4
 8008044:	3304      	adds	r3, #4
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10a      	bne.n	8008064 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	61fb      	str	r3, [r7, #28]
}
 8008060:	bf00      	nop
 8008062:	e7fe      	b.n	8008062 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800806a:	6850      	ldr	r0, [r2, #4]
 800806c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800806e:	6892      	ldr	r2, [r2, #8]
 8008070:	4611      	mov	r1, r2
 8008072:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	f2c0 80ab 	blt.w	80081d2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	3304      	adds	r3, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f7fd fe31 	bl	8005cf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008092:	463b      	mov	r3, r7
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff ff6b 	bl	8007f70 <prvSampleTimeNow>
 800809a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b09      	cmp	r3, #9
 80080a0:	f200 8096 	bhi.w	80081d0 <prvProcessReceivedCommands+0x19c>
 80080a4:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <prvProcessReceivedCommands+0x78>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080d5 	.word	0x080080d5
 80080b4:	080080d5 	.word	0x080080d5
 80080b8:	08008149 	.word	0x08008149
 80080bc:	0800815d 	.word	0x0800815d
 80080c0:	080081a7 	.word	0x080081a7
 80080c4:	080080d5 	.word	0x080080d5
 80080c8:	080080d5 	.word	0x080080d5
 80080cc:	08008149 	.word	0x08008149
 80080d0:	0800815d 	.word	0x0800815d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080da:	f043 0301 	orr.w	r3, r3, #1
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	18d1      	adds	r1, r2, r3
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f4:	f7ff ff5c 	bl	8007fb0 <prvInsertTimerInActiveList>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d069      	beq.n	80081d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008104:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d05e      	beq.n	80081d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	441a      	add	r2, r3
 800811c:	2300      	movs	r3, #0
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2300      	movs	r3, #0
 8008122:	2100      	movs	r1, #0
 8008124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008126:	f7ff fe05 	bl	8007d34 <xTimerGenericCommand>
 800812a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d14f      	bne.n	80081d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	61bb      	str	r3, [r7, #24]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800814e:	f023 0301 	bic.w	r3, r3, #1
 8008152:	b2da      	uxtb	r2, r3
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800815a:	e03a      	b.n	80081d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	617b      	str	r3, [r7, #20]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	18d1      	adds	r1, r2, r3
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a0:	f7ff ff06 	bl	8007fb0 <prvInsertTimerInActiveList>
					break;
 80081a4:	e015      	b.n	80081d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80081b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b6:	f000 fbdb 	bl	8008970 <vPortFree>
 80081ba:	e00a      	b.n	80081d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c2:	f023 0301 	bic.w	r3, r3, #1
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081ce:	e000      	b.n	80081d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80081d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081d2:	4b08      	ldr	r3, [pc, #32]	; (80081f4 <prvProcessReceivedCommands+0x1c0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	1d39      	adds	r1, r7, #4
 80081d8:	2200      	movs	r2, #0
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe f95c 	bl	8006498 <xQueueReceive>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f47f af2a 	bne.w	800803c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	3730      	adds	r7, #48	; 0x30
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000f60 	.word	0x20000f60

080081f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081fe:	e048      	b.n	8008292 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008200:	4b2d      	ldr	r3, [pc, #180]	; (80082b8 <prvSwitchTimerLists+0xc0>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800820a:	4b2b      	ldr	r3, [pc, #172]	; (80082b8 <prvSwitchTimerLists+0xc0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3304      	adds	r3, #4
 8008218:	4618      	mov	r0, r3
 800821a:	f7fd fd6b 	bl	8005cf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d02e      	beq.n	8008292 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4413      	add	r3, r2
 800823c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	429a      	cmp	r2, r3
 8008244:	d90e      	bls.n	8008264 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008252:	4b19      	ldr	r3, [pc, #100]	; (80082b8 <prvSwitchTimerLists+0xc0>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3304      	adds	r3, #4
 800825a:	4619      	mov	r1, r3
 800825c:	4610      	mov	r0, r2
 800825e:	f7fd fd10 	bl	8005c82 <vListInsert>
 8008262:	e016      	b.n	8008292 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008264:	2300      	movs	r3, #0
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	2300      	movs	r3, #0
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	2100      	movs	r1, #0
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7ff fd60 	bl	8007d34 <xTimerGenericCommand>
 8008274:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	603b      	str	r3, [r7, #0]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <prvSwitchTimerLists+0xc0>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1b1      	bne.n	8008200 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800829c:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <prvSwitchTimerLists+0xc0>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082a2:	4b06      	ldr	r3, [pc, #24]	; (80082bc <prvSwitchTimerLists+0xc4>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a04      	ldr	r2, [pc, #16]	; (80082b8 <prvSwitchTimerLists+0xc0>)
 80082a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082aa:	4a04      	ldr	r2, [pc, #16]	; (80082bc <prvSwitchTimerLists+0xc4>)
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	6013      	str	r3, [r2, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000f58 	.word	0x20000f58
 80082bc:	20000f5c 	.word	0x20000f5c

080082c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082c6:	f000 f965 	bl	8008594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082ca:	4b15      	ldr	r3, [pc, #84]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d120      	bne.n	8008314 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082d2:	4814      	ldr	r0, [pc, #80]	; (8008324 <prvCheckForValidListAndQueue+0x64>)
 80082d4:	f7fd fc84 	bl	8005be0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082d8:	4813      	ldr	r0, [pc, #76]	; (8008328 <prvCheckForValidListAndQueue+0x68>)
 80082da:	f7fd fc81 	bl	8005be0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <prvCheckForValidListAndQueue+0x6c>)
 80082e0:	4a10      	ldr	r2, [pc, #64]	; (8008324 <prvCheckForValidListAndQueue+0x64>)
 80082e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082e4:	4b12      	ldr	r3, [pc, #72]	; (8008330 <prvCheckForValidListAndQueue+0x70>)
 80082e6:	4a10      	ldr	r2, [pc, #64]	; (8008328 <prvCheckForValidListAndQueue+0x68>)
 80082e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082ea:	2300      	movs	r3, #0
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4b11      	ldr	r3, [pc, #68]	; (8008334 <prvCheckForValidListAndQueue+0x74>)
 80082f0:	4a11      	ldr	r2, [pc, #68]	; (8008338 <prvCheckForValidListAndQueue+0x78>)
 80082f2:	2110      	movs	r1, #16
 80082f4:	200a      	movs	r0, #10
 80082f6:	f7fd fd82 	bl	8005dfe <xQueueGenericCreateStatic>
 80082fa:	4603      	mov	r3, r0
 80082fc:	4a08      	ldr	r2, [pc, #32]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 80082fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	490b      	ldr	r1, [pc, #44]	; (800833c <prvCheckForValidListAndQueue+0x7c>)
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fc62 	bl	8006bd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008314:	f000 f96e 	bl	80085f4 <vPortExitCritical>
}
 8008318:	bf00      	nop
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000f60 	.word	0x20000f60
 8008324:	20000f30 	.word	0x20000f30
 8008328:	20000f44 	.word	0x20000f44
 800832c:	20000f58 	.word	0x20000f58
 8008330:	20000f5c 	.word	0x20000f5c
 8008334:	2000100c 	.word	0x2000100c
 8008338:	20000f6c 	.word	0x20000f6c
 800833c:	08008de8 	.word	0x08008de8

08008340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3b04      	subs	r3, #4
 8008350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3b04      	subs	r3, #4
 800835e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f023 0201 	bic.w	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3b04      	subs	r3, #4
 800836e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008370:	4a0c      	ldr	r2, [pc, #48]	; (80083a4 <pxPortInitialiseStack+0x64>)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3b14      	subs	r3, #20
 800837a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3b04      	subs	r3, #4
 8008386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f06f 0202 	mvn.w	r2, #2
 800838e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3b20      	subs	r3, #32
 8008394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008396:	68fb      	ldr	r3, [r7, #12]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	080083a9 	.word	0x080083a9

080083a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083b2:	4b12      	ldr	r3, [pc, #72]	; (80083fc <prvTaskExitError+0x54>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ba:	d00a      	beq.n	80083d2 <prvTaskExitError+0x2a>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	60fb      	str	r3, [r7, #12]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <prvTaskExitError+0x28>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	60bb      	str	r3, [r7, #8]
}
 80083e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083e6:	bf00      	nop
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0fc      	beq.n	80083e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083ee:	bf00      	nop
 80083f0:	bf00      	nop
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	2000000c 	.word	0x2000000c

08008400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <pxCurrentTCBConst2>)
 8008402:	6819      	ldr	r1, [r3, #0]
 8008404:	6808      	ldr	r0, [r1, #0]
 8008406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	f380 8809 	msr	PSP, r0
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f380 8811 	msr	BASEPRI, r0
 800841a:	4770      	bx	lr
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst2>:
 8008420:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008428:	4808      	ldr	r0, [pc, #32]	; (800844c <prvPortStartFirstTask+0x24>)
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	6800      	ldr	r0, [r0, #0]
 800842e:	f380 8808 	msr	MSP, r0
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	f380 8814 	msr	CONTROL, r0
 800843a:	b662      	cpsie	i
 800843c:	b661      	cpsie	f
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	df00      	svc	0
 8008448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800844a:	bf00      	nop
 800844c:	e000ed08 	.word	0xe000ed08

08008450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008456:	4b46      	ldr	r3, [pc, #280]	; (8008570 <xPortStartScheduler+0x120>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a46      	ldr	r2, [pc, #280]	; (8008574 <xPortStartScheduler+0x124>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d10a      	bne.n	8008476 <xPortStartScheduler+0x26>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	613b      	str	r3, [r7, #16]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008476:	4b3e      	ldr	r3, [pc, #248]	; (8008570 <xPortStartScheduler+0x120>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a3f      	ldr	r2, [pc, #252]	; (8008578 <xPortStartScheduler+0x128>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d10a      	bne.n	8008496 <xPortStartScheduler+0x46>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	60fb      	str	r3, [r7, #12]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008496:	4b39      	ldr	r3, [pc, #228]	; (800857c <xPortStartScheduler+0x12c>)
 8008498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	22ff      	movs	r2, #255	; 0xff
 80084a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084b0:	78fb      	ldrb	r3, [r7, #3]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	4b31      	ldr	r3, [pc, #196]	; (8008580 <xPortStartScheduler+0x130>)
 80084bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084be:	4b31      	ldr	r3, [pc, #196]	; (8008584 <xPortStartScheduler+0x134>)
 80084c0:	2207      	movs	r2, #7
 80084c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084c4:	e009      	b.n	80084da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80084c6:	4b2f      	ldr	r3, [pc, #188]	; (8008584 <xPortStartScheduler+0x134>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	4a2d      	ldr	r2, [pc, #180]	; (8008584 <xPortStartScheduler+0x134>)
 80084ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084d0:	78fb      	ldrb	r3, [r7, #3]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e2:	2b80      	cmp	r3, #128	; 0x80
 80084e4:	d0ef      	beq.n	80084c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084e6:	4b27      	ldr	r3, [pc, #156]	; (8008584 <xPortStartScheduler+0x134>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f1c3 0307 	rsb	r3, r3, #7
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d00a      	beq.n	8008508 <xPortStartScheduler+0xb8>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	60bb      	str	r3, [r7, #8]
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008508:	4b1e      	ldr	r3, [pc, #120]	; (8008584 <xPortStartScheduler+0x134>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	4a1d      	ldr	r2, [pc, #116]	; (8008584 <xPortStartScheduler+0x134>)
 8008510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008512:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <xPortStartScheduler+0x134>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800851a:	4a1a      	ldr	r2, [pc, #104]	; (8008584 <xPortStartScheduler+0x134>)
 800851c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	b2da      	uxtb	r2, r3
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008526:	4b18      	ldr	r3, [pc, #96]	; (8008588 <xPortStartScheduler+0x138>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a17      	ldr	r2, [pc, #92]	; (8008588 <xPortStartScheduler+0x138>)
 800852c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008532:	4b15      	ldr	r3, [pc, #84]	; (8008588 <xPortStartScheduler+0x138>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a14      	ldr	r2, [pc, #80]	; (8008588 <xPortStartScheduler+0x138>)
 8008538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800853c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800853e:	f000 f8dd 	bl	80086fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008542:	4b12      	ldr	r3, [pc, #72]	; (800858c <xPortStartScheduler+0x13c>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008548:	f000 f8fc 	bl	8008744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800854c:	4b10      	ldr	r3, [pc, #64]	; (8008590 <xPortStartScheduler+0x140>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a0f      	ldr	r2, [pc, #60]	; (8008590 <xPortStartScheduler+0x140>)
 8008552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008558:	f7ff ff66 	bl	8008428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800855c:	f7fe ff54 	bl	8007408 <vTaskSwitchContext>
	prvTaskExitError();
 8008560:	f7ff ff22 	bl	80083a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	e000ed00 	.word	0xe000ed00
 8008574:	410fc271 	.word	0x410fc271
 8008578:	410fc270 	.word	0x410fc270
 800857c:	e000e400 	.word	0xe000e400
 8008580:	2000105c 	.word	0x2000105c
 8008584:	20001060 	.word	0x20001060
 8008588:	e000ed20 	.word	0xe000ed20
 800858c:	2000000c 	.word	0x2000000c
 8008590:	e000ef34 	.word	0xe000ef34

08008594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	607b      	str	r3, [r7, #4]
}
 80085ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085ae:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <vPortEnterCritical+0x58>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3301      	adds	r3, #1
 80085b4:	4a0d      	ldr	r2, [pc, #52]	; (80085ec <vPortEnterCritical+0x58>)
 80085b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085b8:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <vPortEnterCritical+0x58>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d10f      	bne.n	80085e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <vPortEnterCritical+0x5c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	603b      	str	r3, [r7, #0]
}
 80085dc:	bf00      	nop
 80085de:	e7fe      	b.n	80085de <vPortEnterCritical+0x4a>
	}
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	2000000c 	.word	0x2000000c
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085fa:	4b12      	ldr	r3, [pc, #72]	; (8008644 <vPortExitCritical+0x50>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <vPortExitCritical+0x24>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	607b      	str	r3, [r7, #4]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <vPortExitCritical+0x50>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3b01      	subs	r3, #1
 800861e:	4a09      	ldr	r2, [pc, #36]	; (8008644 <vPortExitCritical+0x50>)
 8008620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008622:	4b08      	ldr	r3, [pc, #32]	; (8008644 <vPortExitCritical+0x50>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d105      	bne.n	8008636 <vPortExitCritical+0x42>
 800862a:	2300      	movs	r3, #0
 800862c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	f383 8811 	msr	BASEPRI, r3
}
 8008634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	2000000c 	.word	0x2000000c
	...

08008650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008650:	f3ef 8009 	mrs	r0, PSP
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <pxCurrentTCBConst>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	f01e 0f10 	tst.w	lr, #16
 8008660:	bf08      	it	eq
 8008662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866a:	6010      	str	r0, [r2, #0]
 800866c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008674:	f380 8811 	msr	BASEPRI, r0
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f7fe fec2 	bl	8007408 <vTaskSwitchContext>
 8008684:	f04f 0000 	mov.w	r0, #0
 8008688:	f380 8811 	msr	BASEPRI, r0
 800868c:	bc09      	pop	{r0, r3}
 800868e:	6819      	ldr	r1, [r3, #0]
 8008690:	6808      	ldr	r0, [r1, #0]
 8008692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008696:	f01e 0f10 	tst.w	lr, #16
 800869a:	bf08      	it	eq
 800869c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086a0:	f380 8809 	msr	PSP, r0
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	f3af 8000 	nop.w

080086b0 <pxCurrentTCBConst>:
 80086b0:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop

080086b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	607b      	str	r3, [r7, #4]
}
 80086d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086d2:	f7fe fe03 	bl	80072dc <xTaskIncrementTick>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086dc:	4b06      	ldr	r3, [pc, #24]	; (80086f8 <xPortSysTickHandler+0x40>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	2300      	movs	r3, #0
 80086e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f383 8811 	msr	BASEPRI, r3
}
 80086ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <vPortSetupTimerInterrupt+0x34>)
 8008702:	2200      	movs	r2, #0
 8008704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008706:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <vPortSetupTimerInterrupt+0x38>)
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800870c:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <vPortSetupTimerInterrupt+0x3c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a0a      	ldr	r2, [pc, #40]	; (800873c <vPortSetupTimerInterrupt+0x40>)
 8008712:	fba2 2303 	umull	r2, r3, r2, r3
 8008716:	099b      	lsrs	r3, r3, #6
 8008718:	4a09      	ldr	r2, [pc, #36]	; (8008740 <vPortSetupTimerInterrupt+0x44>)
 800871a:	3b01      	subs	r3, #1
 800871c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800871e:	4b04      	ldr	r3, [pc, #16]	; (8008730 <vPortSetupTimerInterrupt+0x34>)
 8008720:	2207      	movs	r2, #7
 8008722:	601a      	str	r2, [r3, #0]
}
 8008724:	bf00      	nop
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	e000e010 	.word	0xe000e010
 8008734:	e000e018 	.word	0xe000e018
 8008738:	20000000 	.word	0x20000000
 800873c:	10624dd3 	.word	0x10624dd3
 8008740:	e000e014 	.word	0xe000e014

08008744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008754 <vPortEnableVFP+0x10>
 8008748:	6801      	ldr	r1, [r0, #0]
 800874a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800874e:	6001      	str	r1, [r0, #0]
 8008750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008752:	bf00      	nop
 8008754:	e000ed88 	.word	0xe000ed88

08008758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800875e:	f3ef 8305 	mrs	r3, IPSR
 8008762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b0f      	cmp	r3, #15
 8008768:	d914      	bls.n	8008794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800876a:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <vPortValidateInterruptPriority+0x70>)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008774:	4b15      	ldr	r3, [pc, #84]	; (80087cc <vPortValidateInterruptPriority+0x74>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	7afa      	ldrb	r2, [r7, #11]
 800877a:	429a      	cmp	r2, r3
 800877c:	d20a      	bcs.n	8008794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	607b      	str	r3, [r7, #4]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008794:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <vPortValidateInterruptPriority+0x78>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800879c:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <vPortValidateInterruptPriority+0x7c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d90a      	bls.n	80087ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	603b      	str	r3, [r7, #0]
}
 80087b6:	bf00      	nop
 80087b8:	e7fe      	b.n	80087b8 <vPortValidateInterruptPriority+0x60>
	}
 80087ba:	bf00      	nop
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	e000e3f0 	.word	0xe000e3f0
 80087cc:	2000105c 	.word	0x2000105c
 80087d0:	e000ed0c 	.word	0xe000ed0c
 80087d4:	20001060 	.word	0x20001060

080087d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08a      	sub	sp, #40	; 0x28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087e0:	2300      	movs	r3, #0
 80087e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087e4:	f7fe fccc 	bl	8007180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087e8:	4b5b      	ldr	r3, [pc, #364]	; (8008958 <pvPortMalloc+0x180>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087f0:	f000 f920 	bl	8008a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087f4:	4b59      	ldr	r3, [pc, #356]	; (800895c <pvPortMalloc+0x184>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f040 8093 	bne.w	8008928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01d      	beq.n	8008844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008808:	2208      	movs	r2, #8
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	2b00      	cmp	r3, #0
 8008818:	d014      	beq.n	8008844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f023 0307 	bic.w	r3, r3, #7
 8008820:	3308      	adds	r3, #8
 8008822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <pvPortMalloc+0x6c>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	617b      	str	r3, [r7, #20]
}
 8008840:	bf00      	nop
 8008842:	e7fe      	b.n	8008842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d06e      	beq.n	8008928 <pvPortMalloc+0x150>
 800884a:	4b45      	ldr	r3, [pc, #276]	; (8008960 <pvPortMalloc+0x188>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	429a      	cmp	r2, r3
 8008852:	d869      	bhi.n	8008928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008854:	4b43      	ldr	r3, [pc, #268]	; (8008964 <pvPortMalloc+0x18c>)
 8008856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008858:	4b42      	ldr	r3, [pc, #264]	; (8008964 <pvPortMalloc+0x18c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800885e:	e004      	b.n	800886a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	429a      	cmp	r2, r3
 8008872:	d903      	bls.n	800887c <pvPortMalloc+0xa4>
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1f1      	bne.n	8008860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800887c:	4b36      	ldr	r3, [pc, #216]	; (8008958 <pvPortMalloc+0x180>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008882:	429a      	cmp	r2, r3
 8008884:	d050      	beq.n	8008928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2208      	movs	r2, #8
 800888c:	4413      	add	r3, r2
 800888e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	1ad2      	subs	r2, r2, r3
 80088a0:	2308      	movs	r3, #8
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d91f      	bls.n	80088e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4413      	add	r3, r2
 80088ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <pvPortMalloc+0xf8>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	613b      	str	r3, [r7, #16]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	1ad2      	subs	r2, r2, r3
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088e2:	69b8      	ldr	r0, [r7, #24]
 80088e4:	f000 f908 	bl	8008af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088e8:	4b1d      	ldr	r3, [pc, #116]	; (8008960 <pvPortMalloc+0x188>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	4a1b      	ldr	r2, [pc, #108]	; (8008960 <pvPortMalloc+0x188>)
 80088f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088f6:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <pvPortMalloc+0x188>)
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <pvPortMalloc+0x190>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d203      	bcs.n	800890a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008902:	4b17      	ldr	r3, [pc, #92]	; (8008960 <pvPortMalloc+0x188>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a18      	ldr	r2, [pc, #96]	; (8008968 <pvPortMalloc+0x190>)
 8008908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	4b13      	ldr	r3, [pc, #76]	; (800895c <pvPortMalloc+0x184>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	431a      	orrs	r2, r3
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800891e:	4b13      	ldr	r3, [pc, #76]	; (800896c <pvPortMalloc+0x194>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	4a11      	ldr	r2, [pc, #68]	; (800896c <pvPortMalloc+0x194>)
 8008926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008928:	f7fe fc38 	bl	800719c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <pvPortMalloc+0x174>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	60fb      	str	r3, [r7, #12]
}
 8008948:	bf00      	nop
 800894a:	e7fe      	b.n	800894a <pvPortMalloc+0x172>
	return pvReturn;
 800894c:	69fb      	ldr	r3, [r7, #28]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3728      	adds	r7, #40	; 0x28
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20004c6c 	.word	0x20004c6c
 800895c:	20004c80 	.word	0x20004c80
 8008960:	20004c70 	.word	0x20004c70
 8008964:	20004c64 	.word	0x20004c64
 8008968:	20004c74 	.word	0x20004c74
 800896c:	20004c78 	.word	0x20004c78

08008970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d04d      	beq.n	8008a1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008982:	2308      	movs	r3, #8
 8008984:	425b      	negs	r3, r3
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	4413      	add	r3, r2
 800898a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	4b24      	ldr	r3, [pc, #144]	; (8008a28 <vPortFree+0xb8>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4013      	ands	r3, r2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <vPortFree+0x44>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	60fb      	str	r3, [r7, #12]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00a      	beq.n	80089d2 <vPortFree+0x62>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60bb      	str	r3, [r7, #8]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	4b14      	ldr	r3, [pc, #80]	; (8008a28 <vPortFree+0xb8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01e      	beq.n	8008a1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d11a      	bne.n	8008a1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	4b0e      	ldr	r3, [pc, #56]	; (8008a28 <vPortFree+0xb8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	43db      	mvns	r3, r3
 80089f2:	401a      	ands	r2, r3
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089f8:	f7fe fbc2 	bl	8007180 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <vPortFree+0xbc>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4413      	add	r3, r2
 8008a06:	4a09      	ldr	r2, [pc, #36]	; (8008a2c <vPortFree+0xbc>)
 8008a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a0a:	6938      	ldr	r0, [r7, #16]
 8008a0c:	f000 f874 	bl	8008af8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <vPortFree+0xc0>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3301      	adds	r3, #1
 8008a16:	4a06      	ldr	r2, [pc, #24]	; (8008a30 <vPortFree+0xc0>)
 8008a18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a1a:	f7fe fbbf 	bl	800719c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a1e:	bf00      	nop
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20004c80 	.word	0x20004c80
 8008a2c:	20004c70 	.word	0x20004c70
 8008a30:	20004c7c 	.word	0x20004c7c

08008a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a40:	4b27      	ldr	r3, [pc, #156]	; (8008ae0 <prvHeapInit+0xac>)
 8008a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00c      	beq.n	8008a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3307      	adds	r3, #7
 8008a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f023 0307 	bic.w	r3, r3, #7
 8008a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	4a1f      	ldr	r2, [pc, #124]	; (8008ae0 <prvHeapInit+0xac>)
 8008a64:	4413      	add	r3, r2
 8008a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a6c:	4a1d      	ldr	r2, [pc, #116]	; (8008ae4 <prvHeapInit+0xb0>)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a72:	4b1c      	ldr	r3, [pc, #112]	; (8008ae4 <prvHeapInit+0xb0>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a80:	2208      	movs	r2, #8
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 0307 	bic.w	r3, r3, #7
 8008a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4a15      	ldr	r2, [pc, #84]	; (8008ae8 <prvHeapInit+0xb4>)
 8008a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a96:	4b14      	ldr	r3, [pc, #80]	; (8008ae8 <prvHeapInit+0xb4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a9e:	4b12      	ldr	r3, [pc, #72]	; (8008ae8 <prvHeapInit+0xb4>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	1ad2      	subs	r2, r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <prvHeapInit+0xb4>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	4a0a      	ldr	r2, [pc, #40]	; (8008aec <prvHeapInit+0xb8>)
 8008ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	4a09      	ldr	r2, [pc, #36]	; (8008af0 <prvHeapInit+0xbc>)
 8008aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008acc:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <prvHeapInit+0xc0>)
 8008ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ad2:	601a      	str	r2, [r3, #0]
}
 8008ad4:	bf00      	nop
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	20001064 	.word	0x20001064
 8008ae4:	20004c64 	.word	0x20004c64
 8008ae8:	20004c6c 	.word	0x20004c6c
 8008aec:	20004c74 	.word	0x20004c74
 8008af0:	20004c70 	.word	0x20004c70
 8008af4:	20004c80 	.word	0x20004c80

08008af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b00:	4b28      	ldr	r3, [pc, #160]	; (8008ba4 <prvInsertBlockIntoFreeList+0xac>)
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	e002      	b.n	8008b0c <prvInsertBlockIntoFreeList+0x14>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d8f7      	bhi.n	8008b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	4413      	add	r3, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d108      	bne.n	8008b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	441a      	add	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	441a      	add	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d118      	bne.n	8008b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	4b15      	ldr	r3, [pc, #84]	; (8008ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d00d      	beq.n	8008b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	441a      	add	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	e008      	b.n	8008b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b76:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	e003      	b.n	8008b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d002      	beq.n	8008b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b96:	bf00      	nop
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	20004c64 	.word	0x20004c64
 8008ba8:	20004c6c 	.word	0x20004c6c

08008bac <memset>:
 8008bac:	4402      	add	r2, r0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d100      	bne.n	8008bb6 <memset+0xa>
 8008bb4:	4770      	bx	lr
 8008bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bba:	e7f9      	b.n	8008bb0 <memset+0x4>

08008bbc <_reclaim_reent>:
 8008bbc:	4b29      	ldr	r3, [pc, #164]	; (8008c64 <_reclaim_reent+0xa8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4283      	cmp	r3, r0
 8008bc2:	b570      	push	{r4, r5, r6, lr}
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	d04b      	beq.n	8008c60 <_reclaim_reent+0xa4>
 8008bc8:	69c3      	ldr	r3, [r0, #28]
 8008bca:	b143      	cbz	r3, 8008bde <_reclaim_reent+0x22>
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d144      	bne.n	8008c5c <_reclaim_reent+0xa0>
 8008bd2:	69e3      	ldr	r3, [r4, #28]
 8008bd4:	6819      	ldr	r1, [r3, #0]
 8008bd6:	b111      	cbz	r1, 8008bde <_reclaim_reent+0x22>
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 f879 	bl	8008cd0 <_free_r>
 8008bde:	6961      	ldr	r1, [r4, #20]
 8008be0:	b111      	cbz	r1, 8008be8 <_reclaim_reent+0x2c>
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 f874 	bl	8008cd0 <_free_r>
 8008be8:	69e1      	ldr	r1, [r4, #28]
 8008bea:	b111      	cbz	r1, 8008bf2 <_reclaim_reent+0x36>
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 f86f 	bl	8008cd0 <_free_r>
 8008bf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008bf4:	b111      	cbz	r1, 8008bfc <_reclaim_reent+0x40>
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 f86a 	bl	8008cd0 <_free_r>
 8008bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfe:	b111      	cbz	r1, 8008c06 <_reclaim_reent+0x4a>
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 f865 	bl	8008cd0 <_free_r>
 8008c06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c08:	b111      	cbz	r1, 8008c10 <_reclaim_reent+0x54>
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 f860 	bl	8008cd0 <_free_r>
 8008c10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c12:	b111      	cbz	r1, 8008c1a <_reclaim_reent+0x5e>
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 f85b 	bl	8008cd0 <_free_r>
 8008c1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008c1c:	b111      	cbz	r1, 8008c24 <_reclaim_reent+0x68>
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 f856 	bl	8008cd0 <_free_r>
 8008c24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008c26:	b111      	cbz	r1, 8008c2e <_reclaim_reent+0x72>
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 f851 	bl	8008cd0 <_free_r>
 8008c2e:	6a23      	ldr	r3, [r4, #32]
 8008c30:	b1b3      	cbz	r3, 8008c60 <_reclaim_reent+0xa4>
 8008c32:	4620      	mov	r0, r4
 8008c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c38:	4718      	bx	r3
 8008c3a:	5949      	ldr	r1, [r1, r5]
 8008c3c:	b941      	cbnz	r1, 8008c50 <_reclaim_reent+0x94>
 8008c3e:	3504      	adds	r5, #4
 8008c40:	69e3      	ldr	r3, [r4, #28]
 8008c42:	2d80      	cmp	r5, #128	; 0x80
 8008c44:	68d9      	ldr	r1, [r3, #12]
 8008c46:	d1f8      	bne.n	8008c3a <_reclaim_reent+0x7e>
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f000 f841 	bl	8008cd0 <_free_r>
 8008c4e:	e7c0      	b.n	8008bd2 <_reclaim_reent+0x16>
 8008c50:	680e      	ldr	r6, [r1, #0]
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 f83c 	bl	8008cd0 <_free_r>
 8008c58:	4631      	mov	r1, r6
 8008c5a:	e7ef      	b.n	8008c3c <_reclaim_reent+0x80>
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	e7ef      	b.n	8008c40 <_reclaim_reent+0x84>
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	bf00      	nop
 8008c64:	2000005c 	.word	0x2000005c

08008c68 <__libc_init_array>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	4d0d      	ldr	r5, [pc, #52]	; (8008ca0 <__libc_init_array+0x38>)
 8008c6c:	4c0d      	ldr	r4, [pc, #52]	; (8008ca4 <__libc_init_array+0x3c>)
 8008c6e:	1b64      	subs	r4, r4, r5
 8008c70:	10a4      	asrs	r4, r4, #2
 8008c72:	2600      	movs	r6, #0
 8008c74:	42a6      	cmp	r6, r4
 8008c76:	d109      	bne.n	8008c8c <__libc_init_array+0x24>
 8008c78:	4d0b      	ldr	r5, [pc, #44]	; (8008ca8 <__libc_init_array+0x40>)
 8008c7a:	4c0c      	ldr	r4, [pc, #48]	; (8008cac <__libc_init_array+0x44>)
 8008c7c:	f000 f880 	bl	8008d80 <_init>
 8008c80:	1b64      	subs	r4, r4, r5
 8008c82:	10a4      	asrs	r4, r4, #2
 8008c84:	2600      	movs	r6, #0
 8008c86:	42a6      	cmp	r6, r4
 8008c88:	d105      	bne.n	8008c96 <__libc_init_array+0x2e>
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c90:	4798      	blx	r3
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7ee      	b.n	8008c74 <__libc_init_array+0xc>
 8008c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9a:	4798      	blx	r3
 8008c9c:	3601      	adds	r6, #1
 8008c9e:	e7f2      	b.n	8008c86 <__libc_init_array+0x1e>
 8008ca0:	08008e80 	.word	0x08008e80
 8008ca4:	08008e80 	.word	0x08008e80
 8008ca8:	08008e80 	.word	0x08008e80
 8008cac:	08008e84 	.word	0x08008e84

08008cb0 <__retarget_lock_acquire_recursive>:
 8008cb0:	4770      	bx	lr

08008cb2 <__retarget_lock_release_recursive>:
 8008cb2:	4770      	bx	lr

08008cb4 <memcpy>:
 8008cb4:	440a      	add	r2, r1
 8008cb6:	4291      	cmp	r1, r2
 8008cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cbc:	d100      	bne.n	8008cc0 <memcpy+0xc>
 8008cbe:	4770      	bx	lr
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cca:	4291      	cmp	r1, r2
 8008ccc:	d1f9      	bne.n	8008cc2 <memcpy+0xe>
 8008cce:	bd10      	pop	{r4, pc}

08008cd0 <_free_r>:
 8008cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cd2:	2900      	cmp	r1, #0
 8008cd4:	d044      	beq.n	8008d60 <_free_r+0x90>
 8008cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cda:	9001      	str	r0, [sp, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f1a1 0404 	sub.w	r4, r1, #4
 8008ce2:	bfb8      	it	lt
 8008ce4:	18e4      	addlt	r4, r4, r3
 8008ce6:	f000 f83f 	bl	8008d68 <__malloc_lock>
 8008cea:	4a1e      	ldr	r2, [pc, #120]	; (8008d64 <_free_r+0x94>)
 8008cec:	9801      	ldr	r0, [sp, #4]
 8008cee:	6813      	ldr	r3, [r2, #0]
 8008cf0:	b933      	cbnz	r3, 8008d00 <_free_r+0x30>
 8008cf2:	6063      	str	r3, [r4, #4]
 8008cf4:	6014      	str	r4, [r2, #0]
 8008cf6:	b003      	add	sp, #12
 8008cf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cfc:	f000 b83a 	b.w	8008d74 <__malloc_unlock>
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	d908      	bls.n	8008d16 <_free_r+0x46>
 8008d04:	6825      	ldr	r5, [r4, #0]
 8008d06:	1961      	adds	r1, r4, r5
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	bf01      	itttt	eq
 8008d0c:	6819      	ldreq	r1, [r3, #0]
 8008d0e:	685b      	ldreq	r3, [r3, #4]
 8008d10:	1949      	addeq	r1, r1, r5
 8008d12:	6021      	streq	r1, [r4, #0]
 8008d14:	e7ed      	b.n	8008cf2 <_free_r+0x22>
 8008d16:	461a      	mov	r2, r3
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	b10b      	cbz	r3, 8008d20 <_free_r+0x50>
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	d9fa      	bls.n	8008d16 <_free_r+0x46>
 8008d20:	6811      	ldr	r1, [r2, #0]
 8008d22:	1855      	adds	r5, r2, r1
 8008d24:	42a5      	cmp	r5, r4
 8008d26:	d10b      	bne.n	8008d40 <_free_r+0x70>
 8008d28:	6824      	ldr	r4, [r4, #0]
 8008d2a:	4421      	add	r1, r4
 8008d2c:	1854      	adds	r4, r2, r1
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	6011      	str	r1, [r2, #0]
 8008d32:	d1e0      	bne.n	8008cf6 <_free_r+0x26>
 8008d34:	681c      	ldr	r4, [r3, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	6053      	str	r3, [r2, #4]
 8008d3a:	440c      	add	r4, r1
 8008d3c:	6014      	str	r4, [r2, #0]
 8008d3e:	e7da      	b.n	8008cf6 <_free_r+0x26>
 8008d40:	d902      	bls.n	8008d48 <_free_r+0x78>
 8008d42:	230c      	movs	r3, #12
 8008d44:	6003      	str	r3, [r0, #0]
 8008d46:	e7d6      	b.n	8008cf6 <_free_r+0x26>
 8008d48:	6825      	ldr	r5, [r4, #0]
 8008d4a:	1961      	adds	r1, r4, r5
 8008d4c:	428b      	cmp	r3, r1
 8008d4e:	bf04      	itt	eq
 8008d50:	6819      	ldreq	r1, [r3, #0]
 8008d52:	685b      	ldreq	r3, [r3, #4]
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	bf04      	itt	eq
 8008d58:	1949      	addeq	r1, r1, r5
 8008d5a:	6021      	streq	r1, [r4, #0]
 8008d5c:	6054      	str	r4, [r2, #4]
 8008d5e:	e7ca      	b.n	8008cf6 <_free_r+0x26>
 8008d60:	b003      	add	sp, #12
 8008d62:	bd30      	pop	{r4, r5, pc}
 8008d64:	20004dc0 	.word	0x20004dc0

08008d68 <__malloc_lock>:
 8008d68:	4801      	ldr	r0, [pc, #4]	; (8008d70 <__malloc_lock+0x8>)
 8008d6a:	f7ff bfa1 	b.w	8008cb0 <__retarget_lock_acquire_recursive>
 8008d6e:	bf00      	nop
 8008d70:	20004dbc 	.word	0x20004dbc

08008d74 <__malloc_unlock>:
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <__malloc_unlock+0x8>)
 8008d76:	f7ff bf9c 	b.w	8008cb2 <__retarget_lock_release_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	20004dbc 	.word	0x20004dbc

08008d80 <_init>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	bf00      	nop
 8008d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d86:	bc08      	pop	{r3}
 8008d88:	469e      	mov	lr, r3
 8008d8a:	4770      	bx	lr

08008d8c <_fini>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	bf00      	nop
 8008d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d92:	bc08      	pop	{r3}
 8008d94:	469e      	mov	lr, r3
 8008d96:	4770      	bx	lr
